number,code
1,"def z_array_classic(text):
    length = len(text)
    z_values = [0] * length
    left = 0
    right = 0
    for k in range(1, length):
        if k > right:
            left = right = k
            while right < length and text[right - left] == text[right]:
                right += 1
            z_values[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if z_values[k1] < right - k + 1:
                z_values[k] = z_values[k1]
            else:
                left = k
                while right < length and text[right - left] == text[right]:
                    right += 1
                z_values[k] = right - left
                right -= 1
    return z_values"
2,"def z_array_slicing(string):
    n = len(string)
    z_arr = [0] * n
    for i in range(1, n):
        for j in range(n - i):
            if string[j:j+i] == string[0:i]:
                z_arr[i] = i
                break
    return z_arr"
3,"def z_array_generator(pattern):
    length = len(pattern)
    yield 0
    for i in range(1, length):
        yield max(j for j in range(1, length - i + 1) if pattern[i:i+j] == pattern[:j])"
4,"def z_array_recursive(text_str, index, left_bound, right_bound, z_values):
    n = len(text_str)
    if index == n:
        return z_values
    if index > right_bound:
        left_bound = right_bound = index
        while right_bound < n and text_str[right_bound - left_bound] == text_str[right_bound]:
            right_bound += 1
        z_values[index] = right_bound - left_bound
        right_bound -= 1
    else:
        k = index - left_bound
        if z_values[k] < right_bound - index + 1:
            z_values[index] = z_values[k]
        else:
            left_bound = index
            while right_bound < n and text_str[right_bound - left_bound] == text_str[right_bound]:
                right_bound += 1
            z_values[index] = right_bound - left_bound
            right_bound -= 1
    return z_array_recursive(text_str, index + 1, left_bound, right_bound, z_values)"
5,"def z_array_comprehension(seq):
    length = len(seq)
    return [max(j for j in range(1, length - i + 1) if seq[i:i+j] == seq[:j]) for i in range(length)]"
6,"def z_array_bitwise(data):
    n = len(data)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            z[i] = min(r - i + 1, z[k])
        while i + z[i] < n and data[z[i]] == data[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
    return z"
7,"def z_array_functional(string_data):
    n = len(string_data)
    z_values = [0] * n
    def calculate_z(index, left, right):
        if index > right:
            new_left = new_right = index
            while new_right < n and string_data[new_right - new_left] == string_data[new_right]:
                new_right += 1
            return new_left, new_right, new_right - new_left
        else:
            k = index - left
            if z_values[k] < right - index + 1:
                return left, right, z_values[k]
            else:
                new_left = index
                while right < n and string_data[right - new_left] == string_data[right]:
                    right += 1
                return new_left, right, right - new_left
    left, right = 0, 0
    for i in range(1, n):
        left, right, z_values[i] = calculate_z(i, left, right)
    return z_values"
8,"def z_array_iterative(text_input):
    length = len(text_input)
    z_arr = [0] * length
    l = 0
    r = 0
    for i in range(1, length):
        if i <= r:
            k = i - l
            z_arr[i] = min(r - i + 1, z_arr[k])
        while i + z_arr[i] < length and text_input[z_arr[i]] == text_input[i + z_arr[i]]:
            z_arr[i] += 1
        if i + z_arr[i] - 1 > r:
            l = i
            r = i + z_arr[i] - 1
    return z_arr"
9,"def z_array_alt(s):
    n = len(s)
    z = [0] * n
    l = r = 0
    for i in range(1, n):
        if i > r:
            k = 0
            while i + k < n and s[k] == s[i + k]:
                k += 1
            z[i] = k
            l = i
            r = i + k - 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                k = r - i + 1
                while i + k < n and s[k] == s[i + k]:
                    k += 1
                z[i] = k
                l = i
                r = i + k - 1
    return z"
10,"def z_array_compact(str_data):
    n = len(str_data)
    z_values = [0] * n
    left_pos = 0
    right_pos = 0
    for i in range(1, n):
        if i > right_pos:
            left_pos = right_pos = i
            while right_pos < n and str_data[right_pos - left_pos] == str_data[right_pos]:
                right_pos += 1
            z_values[i] = right_pos - left_pos
            right_pos -= 1
        else:
            k = i - left_pos
            if z_values[k] < right_pos - i + 1:
                z_values[i] = z_values[k]
            else:
                left_pos = i
                while right_pos < n and str_data[right_pos - left_pos] == str_data[right_pos]:
                    right_pos += 1
                z_values[i] = right_pos - left_pos
                right_pos -= 1
    return z_values"
11,"def z_array_classic(text):
    length = len(text)
    z_values = [0] * length
    left = 0
    right = 0
    for k in range(1, length):
        if k > right:
            left = right = k
            while right < length and text[right - left] == text[right]:
                right += 1
            z_values[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if z_values[k1] < right - k + 1:
                z_values[k] = z_values[k1]
            else:
                left = k
                while right < length and text[right - left] == text[right]:
                    right += 1
                z_values[k] = right - left
                right -= 1
    return z_values"
12,"def z_array_slicing(string):
    n = len(string)
    z_arr = [0] * n
    for i in range(1, n):
        for j in range(n - i):
            if string[j:j+i] == string[0:i]:
                z_arr[i] = i
                break
    return z_arr"
13,"def z_array_generator(pattern):
    length = len(pattern)
    yield 0
    for i in range(1, length):
        yield max(j for j in range(1, length - i + 1) if pattern[i:i+j] == pattern[:j])"
14,"def z_array_recursive(text_str, index, left_bound, right_bound, z_values):
    n = len(text_str)
    if index == n:
        return z_values
    if index > right_bound:
        left_bound = right_bound = index
        while right_bound < n and text_str[right_bound - left_bound] == text_str[right_bound]:
            right_bound += 1
        z_values[index] = right_bound - left_bound
        right_bound -= 1
    else:
        k = index - left_bound
        if z_values[k] < right_bound - index + 1:
            z_values[index] = z_values[k]
        else:
            left_bound = index
            while right_bound < n and text_str[right_bound - left_bound] == text_str[right_bound]:
                right_bound += 1
            z_values[index] = right_bound - left_bound
            right_bound -= 1
    return z_array_recursive(text_str, index + 1, left_bound, right_bound, z_values)"
15,"def z_array_comprehension(seq):
    length = len(seq)
    return [max(j for j in range(1, length - i + 1) if seq[i:i+j] == seq[:j]) for i in range(length)]"
16,"def z_array_bitwise(data):
    n = len(data)
    z_arr = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            z_arr[i] = min(r - i + 1, z_arr[k])
        while i + z_arr[i] < n and data[z_arr[i]] == data[i + z_arr[i]]:
            z_arr[i] += 1
        if i + z_arr[i] - 1 > r:
            l = i
            r = i + z_arr[i] - 1
    return z_arr"
17,"def z_array_functional(string_data):
    n = len(string_data)
    z_values = [0] * n
    def calculate_z(index, left, right):
        if index > right:
            new_left = new_right = index
            while new_right < n and string_data[new_right - new_left] == string_data[new_right]:
                new_right += 1
            return new_left, new_right, new_right - new_left
        else:
            k = index - left
            if z_values[k] < right - index + 1:
                return left, right, z_values[k]
            else:
                new_left = index
                while right < n and string_data[right - new_left] == string_data[right]:
                    right += 1
                return new_left, right, right - new_left
    left, right = 0, 0
    for i in range(1, n):
        left, right, z_values[i] = calculate_z(i, left, right)
    return z_values"
18,"def z_array_iterative(text_input):
    length = len(text_input)
    z_values = [0] * length
    l = 0
    r = 0
    i = 1
    while i < length:
        if i <= r:
            k = i - l
            z_values[i] = min(r - i + 1, z_values[k])
        while i + z_values[i] < length and text_input[z_values[i]] == text_input[i + z_values[i]]:
            z_values[i] += 1
        if i + z_values[i] - 1 > r:
            l = i
            r = i + z_values[i] - 1
        i += 1
    return z_values"
19,"def z_array_alt(s):
    n = len(s)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i > r:
            k = 0
            while i + k < n and s[k] == s[i + k]:
                k += 1
            z[i] = k
            l = i
            r = i + k - 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                k = r - i + 1
                while i + k < n and s[k] == s[i + k]:
                    k += 1
                z[i] = k
                l = i
                r = i + k - 1
    return z"
20,"def z_array_compact(text):
    n = len(text)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            z[i] = min(r - i + 1, z[i - l])
        while i + z[i] < n and text[z[i]] == text[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
    return z"
21,"def z_array_classic(text):
    length = len(text)
    z = [0] * length
    left = 0
    right = 0
    for k in range(1, length):
        if k > right:
            left = right = k
            while right < length and text[right - left] == text[right]:
                right += 1
            z[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if z[k1] < right - k + 1:
                z[k] = z[k1]
            else:
                left = k
                while right < length and text[right - left] == text[right]:
                    right += 1
                z[k] = right - left
                right -= 1
    return z"
22,"def z_array_slicing(string):
    n = len(string)
    z_values = [0] * n
    for i in range(1, n):
        for j in range(n - i):
            if string[j:j+i] == string[0:i]:
                z_values[i] = i
                break
    return z_values"
23,"def z_array_generator(phrase):
    length = len(phrase)
    yield 0
    for i in range(1, length):
        yield max(j for j in range(1, length - i + 1) if phrase[i:i+j] == phrase[:j])"
24,"def z_array_recursive(pattern):
    length = len(pattern)
    def compute_z(index):
        if index == 0:
            return 0
        max_len = 0
        for j in range(1, length - index + 1):
            if pattern[index:index+j] == pattern[:j]:
                max_len = j
        return max_len
    return [compute_z(i) for i in range(length)]"
25,"def z_array_comprehension(seq):
    n = len(seq)
    return [len(take_while(lambda i: seq[i] == seq[k], range(n - k))) for k in range(n)]
def take_while(predicate, iterable):
    result = []
    for item in iterable:
        if predicate(item):
            result.append(item)
        else:
            break
    return result"
26,"def z_array_bitwise(data):
    size = len(data)
    z_arr = [0] * size
    l, r = 0, 0
    for k in range(1, size):
        if k > r:
            l = r = k
            while r < size and data[r - l] == data[r]:
                r += 1
            z_arr[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z_arr[k1] < r - k + 1:
                z_arr[k] = z_arr[k1]
            else:
                l = k
                while r < size and data[r - l] == data[r]:
                    r += 1
                z_arr[k] = r - l
                r -= 1
    return z_arr"
27,"def z_array_functional(text_str):
    n = len(text_str)
    return [max(len(common_prefix(text_str, text_str[i:])) for i in range(n)) if i > 0 else 0 for i in range(n)]
def common_prefix(str1, str2):
    i = 0
    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:
        i += 1
    return str1[:i]"
28,"def z_array_iterative(s):
    n = len(s)
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                j = r + 1
                while j < n and s[j] == s[j - i]:
                    j += 1
                z[i] = j - i
                l = i
                r = j - 1
        else:
            j = 0
            while j < n - i and s[j] == s[j + i]:
                j += 1
            z[i] = j
            if j > 0:
                l = i
                r = i + j - 1
    return z"
29,"def z_array_alt(string):
    n = len(string)
    z_val = [0] * n
    for i in range(1, n):
        j = 0
        while i + j < n and string[j] == string[i + j]:
            j += 1
        z_val[i] = j
    return z_val"
30,"def z_array_reduced(text_in):
    length = len(text_in)
    z_arr = [0] * length
    left_bound = 0
    right_bound = 0
    for k in range(1, length):
        if k > right_bound:
            left_bound = right_bound = k
            while right_bound < length and text_in[right_bound - left_bound] == text_in[right_bound]:
                right_bound += 1
            z_arr[k] = right_bound - left_bound
            right_bound -= 1
        else:
            k1 = k - left_bound
            if z_arr[k1] < right_bound - k + 1:
                z_arr[k] = z_arr[k1]
            else:
                left_bound = k
                while right_bound < length and text_in[right_bound - left_bound] == text_in[right_bound]:
                    right_bound += 1
                z_arr[k] = right_bound - left_bound
                right_bound -= 1
    return z_arr"
31,"def z_array_classic(text):
    length = len(text)
    z_values = [0] * length
    left = 0
    right = 0
    for k in range(1, length):
        if k > right:
            left = right = k
            while right < length and text[right - left] == text[right]:
                right += 1
            z_values[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if z_values[k1] < right - k + 1:
                z_values[k] = z_values[k1]
            else:
                left = k
                while right < length and text[right - left] == text[right]:
                    right += 1
                z_values[k] = right - left
                right -= 1
    return z_values"
32,"def z_array_slicing(string):
    n = len(string)
    z_arr = [0] * n
    for i in range(1, n):
        for j in range(n - i):
            if string[j:j+i] == string[0:i]:
                z_arr[i] = i
                break
    return z_arr"
33,"def z_array_generator(pattern):
    length = len(pattern)
    yield 0
    for i in range(1, length):
        yield max(j for j in range(1, length - i + 1) if pattern[i:i+j] == pattern[:j])"
34,"def z_array_recursive(text_str, index, left_bound, right_bound, z_values):
    n = len(text_str)
    if index == n:
        return z_values
    if index > right_bound:
        left_bound = right_bound = index
        while right_bound < n and text_str[right_bound - left_bound] == text_str[right_bound]:
            right_bound += 1
        z_values[index] = right_bound - left_bound
        right_bound -= 1
    else:
        k = index - left_bound
        if z_values[k] < right_bound - index + 1:
            z_values[index] = z_values[k]
        else:
            left_bound = index
            while right_bound < n and text_str[right_bound - left_bound] == text_str[right_bound]:
                right_bound += 1
            z_values[index] = right_bound - left_bound
            right_bound -= 1
    return z_array_recursive(text_str, index + 1, left_bound, right_bound, z_values)"
35,"def z_array_comprehension(seq):
    length = len(seq)
    return [max(j for j in range(1, length - i + 1) if seq[i:i+j] == seq[:j]) for i in range(length)]"
36,"def z_array_bitwise(data):
    n = len(data)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            z[i] = min(r - i + 1, z[k])
        while i + z[i] < n and data[z[i]] == data[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
    return z"
37,"def z_array_functional(string_data):
    n = len(string_data)
    z_values = [0] * n
    def calculate_z(index, left, right):
        if index > right:
            new_left = new_right = index
            while new_right < n and string_data[new_right - new_left] == string_data[new_right]:
                new_right += 1
            return new_left, new_right, new_right - new_left
        else:
            k = index - left
            if z_values[k] < right - index + 1:
                return left, right, z_values[k]
            else:
                new_left = index
                while right < n and string_data[right - new_left] == string_data[right]:
                    right += 1
                return new_left, right, right - new_left
    for i in range(1, n):
        left, right, z_val = calculate_z(i, left, right)
        z_values[i] = z_val
    return z_values"
38,"def z_array_iterative(text_input):
    length = len(text_input)
    z_arr = [0] * length
    l = 0
    r = 0
    for i in range(1, length):
        if i <= r:
            k = i - l
            z_arr[i] = min(r - i + 1, z_arr[k])
        while i + z_arr[i] < length and text_input[z_arr[i]] == text_input[i + z_arr[i]]:
            z_arr[i] += 1
        if i + z_arr[i] - 1 > r:
            l = i
            r = i + z_arr[i] - 1
    return z_arr"
39,"def z_array_alt(s):
    n = len(s)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i > r:
            k = 0
            while i + k < n and s[k] == s[i + k]:
                k += 1
            z[i] = k
            l = i
            r = i + k - 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                k = r - i + 1
                while i + k < n and s[k] == s[i + k]:
                    k += 1
                z[i] = k
                l = i
                r = i + k - 1
    return z"
40,"def z_array_compact(text):
    n = len(text)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            z[i] = min(r - i + 1, z[i - l])
        while i + z[i] < n and text[z[i]] == text[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
    return z"
41,"def z_function_v1(pattern):
    l, r = 0, 0
    n = len(pattern)
    z_arr = [0] * n
    for i in range(1, n):
        if i > r:
            left, right = i, n - 1
            while left < n and pattern[left] == pattern[left - i]:
                left += 1
            z_arr[i] = left - i
            r = left - 1
        else:
            k = i - l
            if z_arr[k] < r - i + 1:
                z_arr[i] = z_arr[k]
            else:
                left, right = r + 1, n - 1
                while left < n and pattern[left] == pattern[left - i]:
                    left += 1
                z_arr[i] = left - i
                l = i
                r = left - 1
    return z_arr"
42,"def z_function_v2(text):
    length = len(text)
    z_values = [0] * length
    left, right = 0, 0
    for i in range(1, length):
        if i <= right:
            k = i - left
            z_values[i] = min(right - i + 1, z_values[k])
        while i + z_values[i] < length and text[z_values[i]] == text[i + z_values[i]]:
            z_values[i] += 1
        if i + z_values[i] - 1 > right:
            left = i
            right = i + z_values[i] - 1
    return z_values"
43,"def z_function_v3(string):
    n = len(string)
    z_array = [0] * n
    boundaries = [0, 0]
    for i in range(1, n):
        if i <= boundaries[1]:
            k = i - boundaries[0]
            z_array[i] = min(boundaries[1] - i + 1, z_array[k])
        while i + z_array[i] < n and string[z_array[i]] == string[i + z_array[i]]:
            z_array[i] += 1
        if i + z_array[i] - 1 > boundaries[1]:
            boundaries[0] = i
            boundaries[1] = i + z_array[i] - 1
    return z_array"
44,"def z_function_v4(s):
    n = len(s)
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i > r:
            k = 0
            while i + k < n and s[k] == s[i + k]:
                k += 1
            z[i] = k
            l = i
            r = i + k - 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                k = r - i + 1
                while i + k < n and s[k] == s[i + k]:
                    k += 1
                z[i] = k
                l = i
                r = i + k - 1
    return z"
45,"def z_function_v5(txt):
    n = len(txt)
    zval = [0] * n
    left = 0
    right = 0
    for i in range(1, n):
        if i <= right:
            k = i - left
            zval[i] = min(right - i + 1, zval[k])
        while i + zval[i] < n and txt[zval[i]] == txt[i + zval[i]]:
            zval[i] += 1
        if i + zval[i] - 1 > right:
            left = i
            right = i + zval[i] - 1
    return zval"
46,"def z_function_v6(string):
    n = len(string)
    z_arr = [0] * n
    l = r = 0
    for i in range(1, n):
        if i > r:
            k = 0
            while i + k < n and string[k] == string[i + k]:
                k += 1
            z_arr[i] = k
            l = i
            r = i + k - 1
        else:
            k = i - l
            if z_arr[k] < r - i + 1:
                z_arr[i] = z_arr[k]
            else:
                k = r - i + 1
                while i + k < n and string[k] == string[i + k]:
                    k += 1
                z_arr[i] = k
                l = i
                r = i + k - 1
    return z_arr"
47,"def z_function_v7(text):
    n = len(text)
    z = [0] * n
    left = 0
    right = 0
    for k in range(1,n):
        if k > right:
            l = 0
            r = 0
            while k+r < n and text[r] == text[k+r]:
                r += 1
            z[k] = r
            left = k
            right = k+r-1
        else:
            k1 = k-left
            if z[k1] < right-k+1:
                z[k] = z[k1]
            else:
                l = right - k + 1
                r=0
                while k+r < n and text[l+r] == text[k+r]:
                    r += 1
                z[k] = r
                left = k
                right = k+r-1
    return z"
48,"def z_function_v8(s):
    n = len(s)
    arr_z = [0] * n
    levo = 0
    pravo = 0
    for i in range(1, n):
        if i > pravo:
            k = 0
            while i + k < n and s[k] == s[i + k]:
                k += 1
            arr_z[i] = k
            levo = i
            pravo = i + k - 1
        else:
            k = i - levo
            if arr_z[k] < pravo - i + 1:
                arr_z[i] = arr_z[k]
            else:
                k = pravo - i + 1
                while i + k < n and s[k] == s[i + k]:
                    k += 1
                arr_z[i] = k
                levo = i
                pravo = i + k - 1
    return arr_z"
49,"def z_function_v9(pattern):
    n = len(pattern)
    z_arr = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i > r:
            c = 0
            while i + c < n and pattern[c] == pattern[i + c]:
                c += 1
            z_arr[i] = c
            l = i
            r = i + c - 1
        else:
            k = i - l
            if z_arr[k] < r - i + 1:
                z_arr[i] = z_arr[k]
            else:
                c = r - i + 1
                while i + c < n and pattern[c] == pattern[i + c]:
                    c += 1
                z_arr[i] = c
                l = i
                r = i + c - 1
    return z_arr"
50,"def z_function_v10(text):
    n = len(text)
    z_values = [0] * n
    left = 0
    right = 0
    for i in range(1, n):
        if i <= right:
            k = i - left
            z_values[i] = min(right - i + 1, z_values[k])
        j = 0
        while i + j < n and text[j] == text[i + j]:
            j += 1
        z_values[i] = j
        if i + z_values[i] - 1 > right:
            left = i
            right = i + z_values[i] - 1
    return z_values"
51,"def z_array_classic(text):
    length = len(text)
    z_values = [0] * length
    left = 0
    right = 0
    for k in range(1, length):
        if k > right:
            left = right = k
            while right < length and text[right - left] == text[right]:
                right += 1
            z_values[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if z_values[k1] < right - k + 1:
                z_values[k] = z_values[k1]
            else:
                left = k
                while right < length and text[right - left] == text[right]:
                    right += 1
                z_values[k] = right - left
                right -= 1
    return z_values"
52,"def z_array_slicing(string):
    n = len(string)
    z_arr = [0] * n
    for i in range(1, n):
        for j in range(n - i):
            if string[j:j+i] == string[0:i]:
                z_arr[i] = i
                break
    return z_arr"
53,"def z_array_generator(phrase):
    length = len(phrase)
    yield 0
    for i in range(1, length):
        yield max(j for j in range(1, length - i + 1) if phrase[i:i+j] == phrase[:j])"
54,"def z_array_recursive(pattern):
    length = len(pattern)
    def compute_z(index):
        if index == 0:
            return 0
        max_len = 0
        for k in range(1, length - index + 1):
            if pattern[:k] == pattern[index:index+k]:
                max_len = k
        return max_len
    return [compute_z(i) for i in range(length)]"
55,"def z_array_comprehension(seq):
    n = len(seq)
    return [max(k for k in range(1, n - i + 1) if seq[i:i+k] == seq[:k]) for i in range(n)]"
56,"def z_array_bitwise(data):
    length = len(data)
    z_values = [0] * length
    l = 0
    r = 0
    for k in range(1, length):
        if k > r:
            l = r = k
            while r < length and data[r - l] == data[r]:
                r += 1
            z_values[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z_values[k1] < r - k + 1:
                z_values[k] = z_values[k1]
            else:
                l = k
                while r < length and data[r - l] == data[r]:
                    r += 1
                z_values[k] = r - l
                r -= 1
    return z_values"
57,"def z_array_functional(text_input):
    n = len(text_input)
    z = [0] * n
    def calculate_z(i):
        return max(j for j in range(1, n - i + 1) if text_input[i:i+j] == text_input[:j])
    return list(map(calculate_z, range(n)))"
58,"def z_array_iterative(string_input):
    n = len(string_input)
    z_arr = [0] * n
    for i in range(1, n):
        j = 0
        while i + j < n and string_input[j] == string_input[i + j]:
            j += 1
        z_arr[i] = j
    return z_arr"
59,"def z_array_optimized(s):
    n = len(s)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                j = r - i + 1
                while i + j < n and s[j] == s[i + j]:
                    j += 1
                z[i] = j
                l = i
                r = i + j - 1
        else:
            j = 0
            while i + j < n and s[j] == s[i + j]:
                j += 1
            z[i] = j
            if j > 0:
                l = i
                r = i + j - 1
    return z"
60,"def z_array_alt(text_str):
    length = len(text_str)
    z_values = [0] * length
    left_bound = 0
    right_bound = 0
    for k in range(1, length):
        if k > right_bound:
            left_bound = right_bound = k
            while right_bound < length and text_str[right_bound - left_bound] == text_str[right_bound]:
                right_bound += 1
            z_values[k] = right_bound - left_bound
            right_bound -= 1
        else:
            k1 = k - left_bound
            if z_values[k1] < right_bound - k + 1:
                z_values[k] = z_values[k1]
            else:
                left_bound = k
                while right_bound < length and text_str[right_bound - left_bound] == text_str[right_bound]:
                    right_bound += 1
                z_values[k] = right_bound - left_bound
                right_bound -= 1
    return z_values"
61,"def z_array_standard(sequence):
    length = len(sequence)
    result = [0] * length
    left = 0
    right = 0
    for k in range(1, length):
        if k > right:
            left = right = k
            while right < length and sequence[right - left] == sequence[right]:
                right += 1
            result[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if result[k1] < right - k + 1:
                result[k] = result[k1]
            else:
                left = k
                while right < length and sequence[right - left] == sequence[right]:
                    right += 1
                result[k] = right - left
                right -= 1
    return result"
62,"def z_array_slicing(text):
    n = len(text)
    z = [0] * n
    for i in range(1, n):
        max_len = 0
        for j in range(n - i):
            if text[j:j+i] == text[i:i+i]:
                max_len = i
        z[i] = max_len
    return z"
63,"def z_array_generator(string):
    def z_value(index):
        count = 0
        while index + count < len(string) and string[count] == string[index + count]:
            count += 1
        return count
    return [z_value(i) for i in range(len(string))]"
64,"def z_array_recursive(s):
    def compute_z(index, l, r, z_arr):
        if index > r:
            l = r = index
            while r < len(s) and s[r - l] == s[r]:
                r += 1
            z_arr[index] = r - l
            r -= 1
            return l, r
        k = index - l
        if z_arr[k] < r - index + 1:
            z_arr[index] = z_arr[k]
            return l, r
        else:
            l = index
            while r < len(s) and s[r - l] == s[r]:
                r += 1
            z_arr[index] = r - l
            r -= 1
            return l, r
    z_arr = [0] * len(s)
    l, r = 0, 0
    for i in range(1, len(s)):
        l, r = compute_z(i, l, r, z_arr)
    return z_arr"
65,"def z_array_comprehension(seq):
    n = len(seq)
    return [max(0, len(seq) - i - j) if seq[j:] == seq[i:i + len(seq) - i] else 0 for i in range(1, n) for j in range(i)]"
66,"def z_array_bitwise(str_):
    length = len(str_)
    z = [0] * length
    left_pos = 0
    right_pos = 0
    for k in range(1, length):
        if k > right_pos:
            left_pos = right_pos = k
            while right_pos < length and str_[right_pos - left_pos] == str_[right_pos]:
                right_pos += 1
            z[k] = right_pos - left_pos
            right_pos -= 1
        else:
            k1 = k - left_pos
            if z[k1] < right_pos - k + 1:
                z[k] = z[k1]
            else:
                left_pos = k
                while right_pos < length and str_[right_pos - left_pos] == str_[right_pos]:
                    right_pos += 1
                z[k] = right_pos - left_pos
                right_pos -= 1
    return z"
67,"def z_array_functional(text_):
    n = len(text_)
    result = [0] * n
    def find_z(idx):
        match_len = 0
        while idx + match_len < n and text_[match_len] == text_[idx + match_len]:
            match_len += 1
        return match_len
    return [find_z(i) for i in range(n)]"
68,"def z_array_alt(pattern):
    n = len(pattern)
    z = [0] * n
    l = r = 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n - 1 and pattern[r - l + 1] == pattern[r + 1]:
                    r += 1
                z[i] = r - l + 1
        else:
            l = i
            while r < n - 1 and pattern[r - l + 1] == pattern[r + 1]:
                r += 1
            z[i] = r - l + 1
    return z"
69,"def z_array_dict(string_):
    n = len(string_)
    z = {}
    for i in range(1, n):
        max_len = 0
        for j in range(i):
            if string_[j:j+i] == string_[i:i+i]:
                max_len = i
        z[i] = max_len
    return [z.get(i, 0) for i in range(n)]"
70,"def z_array_map(seq):
    n = len(seq)
    def get_z_value(i):
        max_match = 0
        for j in range(n - i):
            if seq[:j+1] == seq[i:i + j + 1]:
                max_match = j + 1
        return max_match
    return list(map(get_z_value, range(1, n)))"
71,"s = input()
n = len(s)
table = [0] * n
left = 0
right = 0
for k in range(1, n):
    if k > right:
        left = right = k
        while right < n and s[right - left] == s[right]:
            right += 1
        table[k] = right - left
        right -= 1
    else:
        k1 = k - left
        if table[k1] < right - k + 1:
            table[k] = table[k1]
        else:
            left = k
            while right < n and s[right - left] == s[right]:
                right += 1
            table[k] = right - left
            right -= 1
print(*table)"
72,"string = input()
length = len(string)
z_array = [0] * length
l = 0
r = 0
i = 1
while i < length:
    if i > r:
        l = r = i
        while r < length and string[r - l] == string[r]:
            r += 1
        z_array[i] = r - l
        r -= 1
    else:
        k = i - l
        if z_array[k] < r - i + 1:
            z_array[i] = z_array[k]
        else:
            l = i
            while r < length and string[r - l] == string[r]:
                r += 1
            z_array[i] = r - l
            r -= 1
    i += 1
print(*z_array)"
73,"text = input()
m = len(text)
z = [0] * m
prefix = 0
suffix = 0
for i in range(1, m):
    if i <= prefix:
        z[i] = min(prefix - i + 1, z[i - prefix])
    while i + z[i] < m and text[z[i]] == text[i + z[i]]:
        z[i] += 1
    if i + z[i] - 1 > prefix:
        prefix = i + z[i] - 1
print(*z)"
74,"str_input = input()
n_len = len(str_input)
z_values = [0] * n_len
left_pos = 0
right_pos = 0
for i in range(1, n_len):
    if i > right_pos:
        left_pos = right_pos = i
        while right_pos < n_len and str_input[right_pos - left_pos] == str_input[right_pos]:
            right_pos += 1
        z_values[i] = right_pos - left_pos
        right_pos -= 1
    else:
        k = i - left_pos
        if z_values[k] < right_pos - i + 1:
            z_values[i] = z_values[k]
        else:
            left_pos = i
            while right_pos < n_len and str_input[right_pos - left_pos] == str_input[right_pos]:
                right_pos += 1
            z_values[i] = right_pos - left_pos
            right_pos -= 1
print(*z_values)"
75,"inp_str = input()
size = len(inp_str)
z_arr = [0] * size
l_bound = 0
r_bound = 0
for i in range(1, size):
    if i <= r_bound:
        k = i - l_bound
        z_arr[i] = min(r_bound - i + 1, z_arr[k])
    while i + z_arr[i] < size and inp_str[z_arr[i]] == inp_str[i + z_arr[i]]:
        z_arr[i] += 1
    if i + z_arr[i] - 1 > r_bound:
        l_bound = i
        r_bound = i + z_arr[i] - 1
print(*z_arr)"
76,"text_str = input()
text_len = len(text_str)
z_array_result = [0] * text_len
left_end = 0
right_end = 0
for i in range(1, text_len):
    if i > right_end:
        left_end = i
        right_end = i
        while right_end < text_len and text_str[right_end - left_end] == text_str[right_end]:
            right_end += 1
        z_array_result[i] = right_end - left_end
        right_end -= 1
    else:
        k_val = i - left_end
        if z_array_result[k_val] < right_end - i + 1:
            z_array_result[i] = z_array_result[k_val]
        else:
            left_end = i
            while right_end < text_len and text_str[right_end - left_end] == text_str[right_end]:
                right_end += 1
            z_array_result[i] = right_end - left_end
            right_end -= 1
print(*z_array_result)"
77,"st = input()
n_val = len(st)
z_list = [0] * n_val
l_pt = 0
r_pt = 0
for k in range(1, n_val):
    if k > r_pt:
        l_pt = r_pt = k
        while r_pt < n_val and st[r_pt - l_pt] == st[r_pt]:
            r_pt += 1
        z_list[k] = r_pt - l_pt
        r_pt -= 1
    else:
        k_idx = k - l_pt
        if z_list[k_idx] < r_pt - k + 1:
            z_list[k] = z_list[k_idx]
        else:
            l_pt = k
            while r_pt < n_val and st[r_pt - l_pt] == st[r_pt]:
                r_pt += 1
            z_list[k] = r_pt - l_pt
            r_pt -= 1
print(*z_list)"
78,"val = input()
strlen = len(val)
zarr = [0] * strlen
def calculate_z(s, n):
    l = 0
    r = 0
    for k in range(1, n):
        if k > r:
            l = r = k
            while r < n and s[r - l] == s[r]:
                r += 1
            zarr[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if zarr[k1] < r - k + 1:
                zarr[k] = zarr[k1]
            else:
                l = k
                while r < n and s[r - l] == s[r]:
                    r += 1
                zarr[k] = r - l
                r -= 1
    return zarr
result = calculate_z(val, strlen)
print(*result)"
79,"data = input()
data_len = len(data)
z_output = [0] * data_len
left_index = 0
right_index = 0
for i in range(1, data_len):
    if i > right_index:
        left_index = right_index = i
        while right_index < data_len and data[right_index - left_index] == data[right_index]:
            right_index += 1
        z_output[i] = right_index - left_index
        right_index -= 1
    else:
        k = i - left_index
        if z_output[k] < right_index - i + 1:
            z_output[i] = z_output[k]
        else:
            left_index = i
            while right_index < data_len and data[right_index - left_index] == data[right_index]:
                right_index += 1
            z_output[i] = right_index - left_index
            right_index -= 1
print(*z_output)"
80,"input_string = input()
input_length = len(input_string)
z_table = [0] * input_length
l = 0
r = 0
for i in range(1, input_length):
    if i > r:
        l = r = i
        while r < input_length and input_string[r - l] == input_string[r]:
            r += 1
        z_table[i] = r - l
        r -= 1
    else:
        k = i - l
        if z_table[k] < r - i + 1:
            z_table[i] = z_table[k]
        else:
            l = i
            while r < input_length and input_string[r - l] == input_string[r]:
                r += 1
            z_table[i] = r - l
            r -= 1
print(*z_table)"
81,"def z_function_one(pattern):
    n = len(pattern)
    z = [0] * n
    l, r = 0, 0
    for k in range(1, n):
        if k > r:
            l = r = k
            while r < n and pattern[r - l] == pattern[r]:
                r += 1
            z[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z[k1] < r - k + 1:
                z[k] = z[k1]
            else:
                l = k
                while r < n and pattern[r - l] == pattern[r]:
                    r += 1
                z[k] = r - l
                r -= 1
    return z
input_string = input()
n = len(input_string)
z_array = z_function_one(input_string)
print(*z_array)"
82,"def z_function_two(text):
    length = len(text)
    z_values = [0] * length
    left = 0
    right = 0
    for i in range(1, length):
        if i > right:
            left = right = i
            while right < length and text[right - left] == text[right]:
                right += 1
            z_values[i] = right - left
            right -= 1
        else:
            k = i - left
            if z_values[k] < right - i + 1:
                z_values[i] = z_values[k]
            else:
                left = i
                while right < length and text[right - left] == text[right]:
                    right += 1
                z_values[i] = right - left
                right -= 1
    return z_values
str_input = input()
n = len(str_input)
z_result = z_function_two(str_input)
print(' '.join(map(str, z_result)))"
83,"def z_function_three(s):
    n = len(s)
    z = [0] * n
    l = 0
    r = 0
    i = 1
    while i < n:
        if i > r:
            l = r = i
            while r < n and s[r - l] == s[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and s[r - l] == s[r]:
                    r += 1
                z[i] = r - l
                r -= 1
        i += 1
    return z
text = input()
n = len(text)
z_array = z_function_three(text)
print(*z_array, sep=' ')"
84,"def z_function_four(string):
    length = len(string)
    z_arr = [0] * length
    left_pos = 0
    right_pos = 0
    for k in range(1, length):
        if k > right_pos:
            left_pos = right_pos = k
            while right_pos < length and string[right_pos - left_pos] == string[right_pos]:
                right_pos += 1
            z_arr[k] = right_pos - left_pos
            right_pos -= 1
        else:
            k1 = k - left_pos
            if z_arr[k1] < right_pos - k + 1:
                z_arr[k] = z_arr[k1]
            else:
                left_pos = k
                while right_pos < length and string[right_pos - left_pos] == string[right_pos]:
                    right_pos += 1
                z_arr[k] = right_pos - left_pos
                right_pos -= 1
    return z_arr
str_in = input()
n = len(str_in)
z_values = z_function_four(str_in)
print(*z_values)"
85,"def z_function_five(input_str):
    n = len(input_str)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            z[i] = min(r - i + 1, z[k])
        while i + z[i] < n and input_str[z[i]] == input_str[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
    return z
s = input()
n = len(s)
z_array = z_function_five(s)
print(*z_array)"
86,"def z_function_six(text_input):
    n = len(text_input)
    z_values = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and text_input[r - l] == text_input[r]:
                r += 1
            z_values[i] = r - l
            r -= 1
        else:
            k = i - l
            if z_values[k] < r - i + 1:
                z_values[i] = z_values[k]
            else:
                l = i
                while r < n and text_input[r - l] == text_input[r]:
                    r += 1
                z_values[i] = r - l
                r -= 1
    return z_values
string = input()
n = len(string)
z_result = z_function_six(string)
print(' '.join(map(str, z_result)))"
87,"def z_function_seven(pattern_str):
    n = len(pattern_str)
    z = [0] * n
    l, r = 0, 0
    for k in range(1, n):
        if k > r:
            l = r = k
            while r < n and pattern_str[r - l] == pattern_str[r]:
                r += 1
            z[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z[k1] < r - k + 1:
                z[k] = z[k1]
            else:
                l = k
                while r < n and pattern_str[r - l] == pattern_str[r]:
                    r += 1
                z[k] = r - l
                r -= 1
    return z
input_str = input()
n = len(input_str)
z_array = z_function_seven(input_str)
print(*z_array)"
88,"def z_function_eight(s):
    n = len(s)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and s[r - l] == s[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and s[r - l] == s[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z
text = input()
n = len(text)
z_array = z_function_eight(text)
print(*z_array, sep=' ')"
89,"def z_function_nine(string):
    n = len(string)
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and string[r - l] == string[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and string[r - l] == string[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z
input_string = input()
n = len(input_string)
z_array = z_function_nine(input_string)
print(*z_array)"
90,"def z_function_ten(str_):
    length = len(str_)
    z_arr = [0] * length
    left = 0
    right = 0
    for i in range(1, length):
        if i > right:
            left = right = i
            while right < length and str_[right - left] == str_[right]:
                right += 1
            z_arr[i] = right - left
            right -= 1
        else:
            k = i - left
            if z_arr[k] < right - i + 1:
                z_arr[i] = z_arr[k]
            else:
                left = i
                while right < length and str_[right - left] == str_[right]:
                    right += 1
                z_arr[i] = right - left
                right -= 1
    return z_arr
input_str = input()
n = len(input_str)
z_values = z_function_ten(input_str)
print(*z_values)"
91,"def z_array_calc(pattern):
    n = len(pattern)
    z = [0] * n
    left = 0
    right = 0
    for k in range(1, n):
        if k > right:
            left = right = k
            while right < n and pattern[right - left] == pattern[right]:
                right += 1
            z[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if z[k1] < right - k + 1:
                z[k] = z[k1]
            else:
                left = k
                while right < n and pattern[right - left] == pattern[right]:
                    right += 1
                z[k] = right - left
                right -= 1
    return z
input_string = input()
n = len(input_string)
z_arr = z_array_calc(input_string)
print(*z_arr)"
92,"def compute_z(string):
    length = len(string)
    z_vals = [0] * length
    l, r = 0, 0
    i = 1
    while i < length:
        if i <= r:
            z_vals[i] = min(r - i + 1, z_vals[i - l])
        while i + z_vals[i] < length and string[z_vals[i]] == string[i + z_vals[i]]:
            z_vals[i] += 1
        if i + z_vals[i] - 1 > r:
            l = i
            r = i + z_vals[i] - 1
        i += 1
    return z_vals
text = input()
n = len(text)
z = compute_z(text)
print(*z)"
93,"def zfunction(s):
    n = len(s)
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i <= r:
            z[i] = min(r - i + 1, z[i - l])
        while i + z[i] < n and s[z[i]] == s[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
    return z
str_input = input()
n = len(str_input)
z_array = zfunction(str_input)
print(*z_array)"
94,"def calculate_z(text_in):
    n = len(text_in)
    z_val = [0] * n
    left_boundary = 0
    right_boundary = 0
    for k in range(1,n):
        if k > right_boundary:
            left_boundary = right_boundary = k
            while right_boundary < n and text_in[right_boundary - left_boundary] == text_in[right_boundary]:
                right_boundary += 1
            z_val[k] = right_boundary - left_boundary
            right_boundary -= 1
        else:
            k_diff = k - left_boundary
            if z_val[k_diff] < right_boundary - k + 1:
                z_val[k] = z_val[k_diff]
            else:
                left_boundary = k
                while right_boundary < n and text_in[right_boundary - left_boundary] == text_in[right_boundary]:
                    right_boundary += 1
                z_val[k] = right_boundary - left_boundary
                right_boundary -= 1
    return z_val
input_str = input()
n = len(input_str)
z_result = calculate_z(input_str)
print(*z_result)"
95,"def get_z_array(string_val):
    n = len(string_val)
    z_arr = [0] * n
    l = 0
    r = 0
    i = 1
    while i < n:
        if i <= r:
            z_arr[i] = min(r - i + 1, z_arr[i - l])
        while i + z_arr[i] < n and string_val[z_arr[i]] == string_val[i + z_arr[i]]:
            z_arr[i] += 1
        if i + z_arr[i] - 1 > r:
            l = i
            r = i + z_arr[i] - 1
        i += 1
    return z_arr
s = input()
n = len(s)
z = get_z_array(s)
print(*z)"
96,"def z_func(txt):
    n = len(txt)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            z[i] = min(r - i + 1, z[i - l])
        while i + z[i] < n and txt[z[i]] == txt[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
    return z
string_input = input()
n = len(string_input)
z_array = z_func(string_input)
print(*z_array)"
97,"def build_z(seq):
    n = len(seq)
    z = [0] * n
    leftmost = 0
    rightmost = 0
    for i in range(1, n):
        if i > rightmost:
            leftmost = rightmost = i
            k = 0
            while rightmost < n and seq[k] == seq[rightmost]:
                k += 1
                rightmost += 1
            z[i] = k
            rightmost -= 1
        else:
            k = i - leftmost
            if z[k] < rightmost - i + 1:
                z[i] = z[k]
            else:
                leftmost = i
                k = 0
                while rightmost < n and seq[k] == seq[rightmost]:
                    k += 1
                    rightmost += 1
                z[i] = k
                rightmost -= 1
    return z
phrase = input()
n = len(phrase)
z_output = build_z(phrase)
print(*z_output)"
98,"def z_algorithm(text_data):
    n = len(text_data)
    z_values = [0] * n
    left_pos = 0
    right_pos = 0
    for i in range(1, n):
        if i <= right_pos:
            z_values[i] = min(right_pos - i + 1, z_values[i - left_pos])
        while i + z_values[i] < n and text_data[z_values[i]] == text_data[i + z_values[i]]:
            z_values[i] += 1
        if i + z_values[i] - 1 > right_pos:
            left_pos = i
            right_pos = i + z_values[i] - 1
    return z_values
word = input()
n = len(word)
result_z = z_algorithm(word)
print(*result_z)"
99,"def create_z(input_str):
    n = len(input_str)
    z_arr = [0] * n
    l, r = 0, 0
    for k in range(1, n):
        if k > r:
            l = r = k
            while r < n and input_str[r - l] == input_str[r]:
                r += 1
            z_arr[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z_arr[k1] < r - k + 1:
                z_arr[k] = z_arr[k1]
            else:
                l = k
                while r < n and input_str[r - l] == input_str[r]:
                    r += 1
                z_arr[k] = r - l
                r -= 1
    return z_arr
string = input()
n = len(string)
z_values = create_z(string)
print(*z_values)"
100,"def z_func_recursive(string, idx, l, r, z_array):
    n = len(string)
    if idx == n:
        return z_array
    if idx <= r:
        z_array[idx] = min(r - idx + 1, z_array[idx - l])
    else:
        l_temp, r_temp = idx, idx
        while r_temp < n and string[r_temp - l_temp] == string[r_temp]:
            r_temp += 1
        z_array[idx] = r_temp - l_temp
        l = idx
        r = r_temp - 1
    return z_func_recursive(string, idx + 1, l, r, z_array)
input_text = input()
n = len(input_text)
z = [0] * n
z_result = z_func_recursive(input_text, 1, 0, 0, z)
print(*z_result)"
101,"def z_function_v1(pattern, length):
    z = [0] * length
    left = 0
    right = 0
    for k in range(1, length):
        if k > right:
            left = right = k
            while right < length and pattern[right - left] == pattern[right]:
                right += 1
            z[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if z[k1] < right - k + 1:
                z[k] = z[k1]
            else:
                left = k
                while right < length and pattern[right - left] == pattern[right]:
                    right += 1
                z[k] = right - left
                right -= 1
    return z
input_string = input()
n = len(input_string)
z_array = z_function_v1(input_string, n)
print(*z_array)"
102,"def z_function_v2(text, size):
    z_values = [0] * size
    l, r = 0, 0
    i = 1
    while i < size:
        if i <= r:
            z_values[i] = min(r - i + 1, z_values[i - l])
        else:
            l, r = i, i
            while r < size and text[r - l] == text[r]:
                r += 1
            z_values[i] = r - l
            r -= 1
        i += 1
    return z_values
str_input = input()
n = len(str_input)
z_result = z_function_v2(str_input, n)
print(' '.join(map(str, z_result)))"
103,"def z_function_v3(s, n):
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and s[r - l] == s[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and s[r - l] == s[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z
text = input()
length = len(text)
z_array = z_function_v3(text, length)
print(*z_array, sep=' ')"
104,"def z_function_v4(string, length):
    z_arr = [0] * length
    left_pos = 0
    right_pos = 0
    for i in range(1, length):
        if i > right_pos:
            left_pos = right_pos = i
            while right_pos < length and string[right_pos - left_pos] == string[right_pos]:
                right_pos += 1
            z_arr[i] = right_pos - left_pos
            right_pos -= 1
        else:
            k = i - left_pos
            if z_arr[k] < right_pos - i + 1:
                z_arr[i] = z_arr[k]
            else:
                left_pos = i
                while right_pos < length and string[right_pos - left_pos] == string[right_pos]:
                    right_pos += 1
                z_arr[i] = right_pos - left_pos
                right_pos -= 1
    return z_arr
input_str = input()
n = len(input_str)
z_values = z_function_v4(input_str, n)
print(*z_values)"
105,"def z_function_v5(data, size):
    z_values = [0] * size
    l, r = 0, 0
    for i in range(1, size):
        if i > r:
            l = r = i
            while r < size and data[r - l] == data[r]:
                r += 1
            z_values[i] = r - l
            r -= 1
        else:
            k = i - l
            if z_values[k] < r - i + 1:
                z_values[i] = z_values[k]
            else:
                l = i
                while r < size and data[r - l] == data[r]:
                    r += 1
                z_values[i] = r - l
                r -= 1
    return z_values
s = input()
n = len(s)
z_array = z_function_v5(s, n)
print(*z_array)"
106,"def z_function_v6(text, n):
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i <= r:
            z[i] = min(r - i + 1, z[i - l])
        else:
            l = r = i
            while r < n and text[r - l] == text[r]:
                r += 1
            z[i] = r - l
            r -= 1
    return z
str_input = input()
length = len(str_input)
z_result = z_function_v6(str_input, length)
print(*z_result)"
107,"def z_function_v7(pattern, length):
    z = [0] * length
    left = 0
    right = 0
    i = 1
    while i < length:
        if i > right:
            left = right = i
            while right < length and pattern[right - left] == pattern[right]:
                right += 1
            z[i] = right - left
            right -= 1
        else:
            k = i - left
            if z[k] < right - i + 1:
                z[i] = z[k]
            else:
                left = i
                while right < length and pattern[right - left] == pattern[right]:
                    right += 1
                z[i] = right - left
                right -= 1
        i += 1
    return z
input_string = input()
n = len(input_string)
z_array = z_function_v7(input_string, n)
print(' '.join(map(str, z_array)))"
108,"def z_function_v8(s, n):
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and s[r - l] == s[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and s[r - l] == s[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z
text = input()
length = len(text)
z_array = z_function_v8(text, length)
print(*z_array, sep=',')"
109,"def z_function_v9(string, size):
    z_values = [0] * size
    left = 0
    right = 0
    for i in range(1, size):
        if i > right:
            left = right = i
            while right < size and string[right - left] == string[right]:
                right += 1
            z_values[i] = right - left
            right -= 1
        else:
            k = i - left
            if z_values[k] < right - i + 1:
                z_values[i] = z_values[k]
            else:
                left = i
                while right < size and string[right - left] == string[right]:
                    right += 1
                z_values[i] = right - left
                right -= 1
    return z_values
input_str = input()
n = len(input_str)
z_result = z_function_v9(input_str, n)
print(*z_result)"
110,"def z_function_v10(data, length):
    z = [0] * length
    l = 0
    r = 0
    for k in range(1, length):
        if k > r:
            l = r = k
            while r < length and data[r - l] == data[r]:
                r += 1
            z[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z[k1] < r - k + 1:
                z[k] = z[k1]
            else:
                l = k
                while r < length and data[r - l] == data[r]:
                    r += 1
                z[k] = r - l
                r -= 1
    return z
s = input()
n = len(s)
z_array = z_function_v10(s, n)
print(*z_array)"
111,"def z_function_one(pattern):
    n = len(pattern)
    z = [0] * n
    l, r = 0, 0
    for k in range(1, n):
        if k > r:
            l = r = k
            while r < n and pattern[r - l] == pattern[r]:
                r += 1
            z[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z[k1] < r - k + 1:
                z[k] = z[k1]
            else:
                l = k
                while r < n and pattern[r - l] == pattern[r]:
                    r += 1
                z[k] = r - l
                r -= 1
    return z
input_string = input()
n = len(input_string)
z_array = z_function_one(input_string)
print(*z_array)"
112,"def z_function_two(text):
    length = len(text)
    z_values = [0] * length
    left = 0
    right = 0
    for i in range(1, length):
        if i > right:
            left = right = i
            while right < length and text[right - left] == text[right]:
                right += 1
            z_values[i] = right - left
            right -= 1
        else:
            k = i - left
            if z_values[k] < right - i + 1:
                z_values[i] = z_values[k]
            else:
                left = i
                while right < length and text[right - left] == text[right]:
                    right += 1
                z_values[i] = right - left
                right -= 1
    return z_values
str_input = input()
n = len(str_input)
z_result = z_function_two(str_input)
print(' '.join(map(str, z_result)))"
113,"def z_function_three(s):
    n = len(s)
    z = [0] * n
    l = 0
    r = 0
    i = 1
    while i < n:
        if i > r:
            l = r = i
            while r < n and s[r - l] == s[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and s[r - l] == s[r]:
                    r += 1
                z[i] = r - l
                r -= 1
        i += 1
    return z
text = input()
n = len(text)
z_array = z_function_three(text)
print(*z_array, sep=' ')"
114,"def z_function_four(string):
    length = len(string)
    z_arr = [0] * length
    left_pos = 0
    right_pos = 0
    for k in range(1, length):
        if k > right_pos:
            left_pos = right_pos = k
            while right_pos < length and string[right_pos - left_pos] == string[right_pos]:
                right_pos += 1
            z_arr[k] = right_pos - left_pos
            right_pos -= 1
        else:
            k1 = k - left_pos
            if z_arr[k1] < right_pos - k + 1:
                z_arr[k] = z_arr[k1]
            else:
                left_pos = k
                while right_pos < length and string[right_pos - left_pos] == string[right_pos]:
                    right_pos += 1
                z_arr[k] = right_pos - left_pos
                right_pos -= 1
    return z_arr
str_in = input()
n = len(str_in)
z_values = z_function_four(str_in)
print(*z_values)"
115,"def z_function_five(s):
    n = len(s)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            z[i] = min(r - i + 1, z[k])
        while i + z[i] < n and s[z[i]] == s[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
    return z
input_str = input()
n = len(input_str)
z_array = z_function_five(input_str)
print(*z_array)"
116,"def z_function_six(text):
    n = len(text)
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and text[r - l] == text[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and text[r - l] == text[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z
string = input()
n = len(string)
z_result = z_function_six(string)
print(' '.join(map(str, z_result)))"
117,"def z_function_seven(pattern):
    n = len(pattern)
    z = [0] * n
    l, r = 0, 0
    for k in range(1, n):
        if k > r:
            l = r = k
            while r < n and pattern[r - l] == pattern[r]:
                r += 1
            z[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z[k1] < r - k + 1:
                z[k] = z[k1]
            else:
                l = k
                while r < n and pattern[r - l] == pattern[r]:
                    r += 1
                z[k] = r - l
                r -= 1
    return z
input_str = input()
n = len(input_str)
z_array = z_function_seven(input_str)
print(*z_array)"
118,"def z_function_eight(s):
    n = len(s)
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            z[i] = min(r - i + 1, z[k])
        while i + z[i] < n and s[z[i]] == s[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
    return z
text_input = input()
n = len(text_input)
z_values = z_function_eight(text_input)
print(*z_values)"
119,"def z_function_nine(string):
    n = len(string)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and string[r - l] == string[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and string[r - l] == string[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z
str_in = input()
n = len(str_in)
z_result = z_function_nine(str_in)
print(*z_result)"
120,"def z_function_ten(s):
    n = len(s)
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            z[i] = min(r - i + 1, z[k])
        while i + z[i] < n and s[z[i]] == s[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
    return z
input_string = input()
n = len(input_string)
z_array = z_function_ten(input_string)
print(*z_array, sep=' ')"
121,"def z_function_v1(pattern, length):
    z = [0] * length
    left = 0
    right = 0
    for k in range(1, length):
        if k > right:
            left = right = k
            while right < length and pattern[right - left] == pattern[right]:
                right += 1
            z[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if z[k1] < right - k + 1:
                z[k] = z[k1]
            else:
                left = k
                while right < length and pattern[right - left] == pattern[right]:
                    right += 1
                z[k] = right - left
                right -= 1
    return z
string_input = input()
n = len(string_input)
z_array = z_function_v1(string_input, n)
print(*z_array)"
122,"def z_function_v2(str_input, n):
    z_values = [0] * n
    l, r = 0, 0
    i = 1
    while i < n:
        if i <= r:
            z_values[i] = min(r - i + 1, z_values[i - l])
        else:
            l = r = i
            while r < n and str_input[r - l] == str_input[r]:
                r += 1
            z_values[i] = r - l
            r -= 1
        i += 1
    return z_values
input_string = input()
len_string = len(input_string)
z_result = z_function_v2(input_string, len_string)
print(*z_result)"
123,"def z_function_v3(text, size):
    z_arr = [0] * size
    l = 0
    r = 0
    for i in range(1, size):
        if i > r:
            l = r = i
            k = 0
            while l + k < size and text[k] == text[l + k]:
                k += 1
            z_arr[i] = k
            r = l + k - 1
        else:
            k = i - l
            if z_arr[k] < r - i + 1:
                z_arr[i] = z_arr[k]
            else:
                l = i
                k = r - i + 1
                while l + k < size and text[k] == text[l + k]:
                    k += 1
                z_arr[i] = k
                r = l + k - 1
    return z_arr
s = input()
length = len(s)
z = z_function_v3(s, length)
print(*z)"
124,"def z_function_v4(pattern, n):
    z = [0] * n
    left = 0
    right = 0
    for k in range(1, n):
        if k > right:
            left = right = k
            while right < n and pattern[right - left] == pattern[right]:
                right += 1
            z[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if z[k1] < right - k + 1:
                z[k] = z[k1]
            else:
                l = k
                r = right
                while r < n and pattern[r - l] == pattern[r]:
                  r += 1
                z[k] = r - l
                right = r - 1
    return z
input_string = input()
string_len = len(input_string)
result = z_function_v4(input_string, string_len)
print(*result)"
125,"def z_function_v5(s, size):
    z_values = [0] * size
    l = 0
    r = 0
    for i in range(1, size):
        if i <= r:
            z_values[i] = min(r - i + 1, z_values[i - l])
        else:
            l = r = i
            k = 0
            while l + k < size and s[k] == s[l + k]:
                k += 1
            z_values[i] = k
            r = l + k - 1
    return z_values
input_str = input()
str_len = len(input_str)
z_array = z_function_v5(input_str, str_len)
print(*z_array)"
126,"def z_function_v6(test_str, n):
    z_arr = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i > r:
            l = r = i
            k = 0
            while l + k < n and test_str[k] == test_str[l + k]:
                k += 1
            z_arr[i] = k
            r = l + k - 1
        else:
            k = i - l
            if z_arr[k] < r - i + 1:
                z_arr[i] = z_arr[k]
            else:
                l = i
                k = r - i + 1
                while l + k < n and test_str[k] == test_str[l + k]:
                    k += 1
                z_arr[i] = k
                r = l + k - 1
    return z_arr
str_in = input()
len_str = len(str_in)
z_result = z_function_v6(str_in, len_str)
print(*z_result)"
127,"def z_function_v7(input_str, length):
    z = [0] * length
    left = 0
    right = 0
    for k in range(1, length):
        if k > right:
            left = right = k
            while right < length and input_str[right - left] == input_str[right]:
                right += 1
            z[k] = right - left
            right -= 1
        else:
            k1 = k - left
            if z[k1] < right - k + 1:
                z[k] = z[k1]
            else:
                l = k
                r = right
                while r < length and input_str[r - l] == input_str[r]:
                    r += 1
                z[k] = r - l
                right = r - 1
    return z
s = input()
n = len(s)
z_array = z_function_v7(s, n)
print(*z_array)"
128,"def z_function_v8(text, n):
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i <= r:
            z[i] = min(r - i + 1, z[i - l])
        else:
            l = r = i
            k = 0
            while l + k < n and text[k] == text[l + k]:
                k += 1
            z[i] = k
            r = l + k - 1
    return z
input_string = input()
str_len = len(input_string)
print(*z_function_v8(input_string, str_len))"
129,"def z_function_v9(s, n):
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i <= r:
            k = i - l
            z[i] = min(r - i + 1, z[k])
        else:
            l = i
            while r < n and s[r - l] == s[r]:
                r += 1
            z[i] = r - l
            r -= 1
    return z
str_input = input()
len_str = len(str_input)
z_result = z_function_v9(str_input, len_str)
print(*z_result)"
130,"def z_function_v10(string, length):
    z_arr = [0] * length
    left = 0
    right = 0
    for i in range(1, length):
        if i > right:
            left = right = i
            k = 0
            while left + k < length and string[k] == string[left + k]:
                k += 1
            z_arr[i] = k
            right = left + k - 1
        else:
            k = i - left
            if z_arr[k] < right - i + 1:
                z_arr[i] = z_arr[k]
            else:
                left = i
                k = right - i + 1
                while left + k < length and string[k] == string[left + k]:
                    k += 1
                z_arr[i] = k
                right = left + k - 1
    return z_arr
input_text = input()
text_length = len(input_text)
z_values = z_function_v10(input_text, text_length)
print(*z_values)"
131,"def z_func_one(pattern):
    n = len(pattern)
    z_arr = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            z_arr[i] = min(r - i + 1, z_arr[i - l])
        while i + z_arr[i] < n and pattern[z_arr[i]] == pattern[i + z_arr[i]]:
            z_arr[i] += 1
        if i + z_arr[i] - 1 > r:
            l = i
            r = i + z_arr[i] - 1
    return z_arr
string_one = input()
n_one = len(string_one)
z_array_one = z_func_one(string_one)
print(*z_array_one)"
132,"def z_func_two(text):
    length = len(text)
    z = [0] * length
    left = 0
    right = 0
    index = 1
    while index < length:
        if index > right:
            left = index
            right = index
            while right < length and text[right - left] == text[right]:
                right += 1
            z[index] = right - left
            right -= 1
        else:
            k = index - left
            if z[k] < right - index + 1:
                z[index] = z[k]
            else:
                left = index
                while right < length and text[right - left] == text[right]:
                    right += 1
                z[index] = right - left
                right -= 1
        index += 1
    return z
str_input = input()
n_input = len(str_input)
z_array_input = z_func_two(str_input)
print(*z_array_input)"
133,"def z_func_three(s):
  n = len(s)
  z = [0] * n
  l = 0
  r = 0
  for k in range(1, n):
    if k > r:
      l = k
      r = k
      while r < n and s[r-l] == s[r]:
        r += 1
      z[k] = r-l
      r -= 1
    elif z[k-l] < r-k+1:
      z[k] = z[k-l]
    else:
      l = k
      while r < n and s[r-l] == s[r]:
        r += 1
      z[k] = r-l
      r -= 1
  return z
input_str = input()
n_str = len(input_str)
z_arr = z_func_three(input_str)
print(*z_arr)"
134,"def compute_z(text_four):
    n_four = len(text_four)
    z_four = [0] * n_four
    l_four, r_four = 0, 0
    for i in range(1, n_four):
        k = 1 if i > r_four else min(r_four - i + 1, z_four[i - l_four])
        while i + k < n_four and text_four[k] == text_four[i + k]:
            k += 1
        z_four[i] = k
        if i + k - 1 > r_four:
            l_four = i
            r_four = i + k - 1
    return z_four
text_four = input()
n_four = len(text_four)
z_array_four = compute_z(text_four)
print(*z_array_four)"
135,"def z_function_five(string):
    n = len(string)
    z = [0] * n
    left_five = 0
    right_five = 0
    for i in range(1, n):
        if i <= right_five:
            z[i] = min(right_five - i + 1, z[i - left_five])
        else:
            left_five = i
            right_five = i
            while right_five < n and string[right_five - left_five] == string[right_five]:
                right_five += 1
            z[i] = right_five - left_five
            right_five -= 1
    return z
s_five = input()
n_five = len(s_five)
z_five = z_function_five(s_five)
print(*z_five)"
136,"def z_func_six(s_six):
    n_six = len(s_six)
    z_six = [0] * n_six
    l_six, r_six = 0, 0
    for i in range(1, n_six):
        if i <= r_six:
            z_six[i] = min(r_six - i + 1, z_six[i - l_six])
        while i + z_six[i] < n_six and s_six[z_six[i]] == s_six[i + z_six[i]]:
            z_six[i] += 1
        if i + z_six[i] - 1 > r_six:
            l_six = i
            r_six = i + z_six[i] - 1
    return z_six
string_six = input()
n_six = len(string_six)
result_six = z_func_six(string_six)
print("" "".join(map(str, result_six)))"
137,"def z_array(data):
    n = len(data)
    z_val = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        k = 0 if i > r else min(r - i + 1, z_val[i - l])
        while i + k < n and data[k] == data[i + k]:
            k += 1
        z_val[i] = k
        if i + k - 1 > r:
            l = i
            r = i + k - 1
    return z_val
input_string = input()
len_string = len(input_string)
z_result = z_array(input_string)
print(*z_result)"
138,"def get_z_array(string_eight):
    z_eight = [0] * len(string_eight)
    left_eight, right_eight = 0, 0
    for i in range(1, len(string_eight)):
        if i <= right_eight:
            z_eight[i] = min(right_eight - i + 1, z_eight[i - left_eight])
        else:
            left_eight = i
            right_eight = i
            while right_eight < len(string_eight) and string_eight[right_eight - left_eight] == string_eight[right_eight]:
                right_eight += 1
            z_eight[i] = right_eight - left_eight
            right_eight -= 1
    return z_eight
string_eight = input()
z_array_eight = get_z_array(string_eight)
print(*z_array_eight)"
139,"def z_function_nine(text_nine):
  n_nine = len(text_nine)
  z_nine = [0] * n_nine
  l_nine = 0
  r_nine = 0
  for i in range(1, n_nine):
    if i <= r_nine:
      z_nine[i] = min(r_nine - i + 1, z_nine[i - l_nine])
    else:
      l_nine = i
      r_nine = i
      while r_nine < n_nine and text_nine[r_nine - l_nine] == text_nine[r_nine]:
        r_nine += 1
      z_nine[i] = r_nine - l_nine
      r_nine -= 1
  return z_nine
str_nine = input()
n_nine = len(str_nine)
z_arr_nine = z_function_nine(str_nine)
print(*z_arr_nine)"
140,"def create_z_array(str_ten):
    n_ten = len(str_ten)
    z_ten = [0] * n_ten
    left_ten, right_ten = 0, 0
    for k in range(1, n_ten):
        if k > right_ten:
            left_ten = k
            right_ten = k
            while right_ten < n_ten and str_ten[right_ten - left_ten] == str_ten[right_ten]:
                right_ten += 1
            z_ten[k] = right_ten - left_ten
            right_ten -= 1
        else:
            k_val = k - left_ten
            if z_ten[k_val] < right_ten - k + 1:
                z_ten[k] = z_ten[k_val]
            else:
                left_ten = k
                while right_ten < n_ten and str_ten[right_ten - left_ten] == str_ten[right_ten]:
                    right_ten += 1
                z_ten[k] = right_ten - left_ten
                right_ten -= 1
    return z_ten
input_ten = input()
n_ten = len(input_ten)
z_result_ten = create_z_array(input_ten)
print(*z_result_ten)"
141,"def z_function_one(pattern):
    n = len(pattern)
    z = [0] * n
    l, r = 0, 0
    for k in range(1, n):
        if k > r:
            l = r = k
            while r < n and pattern[r - l] == pattern[r]:
                r += 1
            z[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z[k1] < r - k + 1:
                z[k] = z[k1]
            else:
                l = k
                while r < n and pattern[r - l] == pattern[r]:
                    r += 1
                z[k] = r - l
                r -= 1
    return z
input_string = input()
n = len(input_string)
z_array = z_function_one(input_string)
print(*z_array)"
142,"def z_function_two(text):
    length = len(text)
    z_values = [0] * length
    left = 0
    right = 0
    for i in range(1, length):
        if i > right:
            left = right = i
            while right < length and text[right - left] == text[right]:
                right += 1
            z_values[i] = right - left
            right -= 1
        else:
            k = i - left
            if z_values[k] < right - i + 1:
                z_values[i] = z_values[k]
            else:
                left = i
                while right < length and text[right - left] == text[right]:
                    right += 1
                z_values[i] = right - left
                right -= 1
    return z_values
str_input = input()
n = len(str_input)
z_result = z_function_two(str_input)
print(' '.join(map(str, z_result)))"
143,"def z_function_three(s):
    n = len(s)
    z = [0] * n
    l = 0
    r = 0
    i = 1
    while i < n:
        if i <= r:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and s[r - l] == s[r]:
                    r += 1
                z[i] = r - l
                r -= 1
        else:
            l = r = i
            while r < n and s[r - l] == s[r]:
                r += 1
            z[i] = r - l
            r -= 1
        i += 1
    return z
text = input()
n = len(text)
z_array = z_function_three(text)
print(*z_array, sep=' ')"
144,"def z_function_four(string):
    length = len(string)
    z_arr = [0] * length
    left_pos = 0
    right_pos = 0
    for k in range(1, length):
        if k > right_pos:
            left_pos = right_pos = k
            while right_pos < length and string[right_pos - left_pos] == string[right_pos]:
                right_pos += 1
            z_arr[k] = right_pos - left_pos
            right_pos -= 1
        else:
            k1 = k - left_pos
            if z_arr[k1] < right_pos - k + 1:
                z_arr[k] = z_arr[k1]
            else:
                left_pos = k
                while right_pos < length and string[right_pos - left_pos] == string[right_pos]:
                    right_pos += 1
                z_arr[k] = right_pos - left_pos
                right_pos -= 1
    return z_arr
str_in = input()
n = len(str_in)
z_result = z_function_four(str_in)
print(*z_result)"
145,"def z_function_five(s):
    n = len(s)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and s[r - l] == s[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and s[r - l] == s[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z
input_str = input()
n = len(input_str)
z_array = z_function_five(input_str)
print(' '.join(map(lambda x: str(x), z_array)))"
146,"def z_function_six(text):
    n = len(text)
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and text[r - l] == text[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and text[r - l] == text[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z
string = input()
n = len(string)
z_values = z_function_six(string)
print(*z_values)"
147,"def z_function_seven(pattern):
    n = len(pattern)
    z = [0] * n
    l, r = 0, 0
    for k in range(1, n):
        if k > r:
            l = r = k
            while r < n and pattern[r - l] == pattern[r]:
                r += 1
            z[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z[k1] < r - k + 1:
                z[k] = z[k1]
            else:
                l = k
                while r < n and pattern[r - l] == pattern[r]:
                    r += 1
                z[k] = r - l
                r -= 1
    return z
s = input()
n = len(s)
z_arr = z_function_seven(s)
print(*[str(x) for x in z_arr])"
148,"def z_function_eight(text):
    n = len(text)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and text[r - l] == text[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and text[r - l] == text[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z
input_text = input()
n = len(input_text)
z_array = z_function_eight(input_text)
print(' '.join(map(str, z_array)))"
149,"def z_function_nine(s):
    n = len(s)
    z = [0] * n
    l = 0
    r = 0
    for i in range(1, n):
        if i > r:
            l = r = i
            while r < n and s[r - l] == s[r]:
                r += 1
            z[i] = r - l
            r -= 1
        else:
            k = i - l
            if z[k] < r - i + 1:
                z[i] = z[k]
            else:
                l = i
                while r < n and s[r - l] == s[r]:
                    r += 1
                z[i] = r - l
                r -= 1
    return z
string_input = input()
n = len(string_input)
z_result = z_function_nine(string_input)
print(*z_result)"
150,"def z_function_ten(text):
    n = len(text)
    z = [0] * n
    l, r = 0, 0
    for k in range(1, n):
        if k > r:
            l = r = k
            while r < n and text[r - l] == text[r]:
                r += 1
            z[k] = r - l
            r -= 1
        else:
            k1 = k - l
            if z[k1] < r - k + 1:
                z[k] = z[k1]
            else:
                l = k
                while r < n and text[r - l] == text[r]:
                    r += 1
                z[k] = r - l
                r -= 1
    return z
str_data = input()
n = len(str_data)
z_values = z_function_ten(str_data)
print(*z_values, sep=' ')"
