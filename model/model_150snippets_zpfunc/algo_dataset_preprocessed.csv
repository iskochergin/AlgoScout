number,code,Type
1,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    var4 = {}
    def var5(var6):
        if var6 >= var2:
            return (0, [])
        if var6 in var3:
            return var3[var6]
        var7, var8 = var5(var6 + 1)
        var9, var10 = var5(var6 + 2)
        if var7 + var1[var6] < var9 + var1[var6]:
            var3[var6] = (var7 + var1[var6], [var6 + 1] + var8)
            return var3[var6]
        else:
            var3[var6] = (var9 + var1[var6], [var6 + 2] + var10)
            return var3[var6]
    var11, var12 = var5(0)
    return (var11, [var13 + 1 for var13 in var12])",Grasshopper
2,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[0] = var1[0]
    var4[0] = [1]
    if var2 > 1:
        var3[1] = var1[1]
        var4[1] = [2]
        for var6 in range(2, var2):
            if var3[var6 - 1] + var1[var6] < var3[var6 - 2] + var1[var6]:
                var3[var6] = var3[var6 - 1] + var1[var6]
                var4[var6] = [var6 + 1] + var4[var6 - 1]
            else:
                var3[var6] = var3[var6 - 2] + var1[var6]
                var4[var6] = [var6 + 1] + var4[var6 - 2]
    return (var3[var2 - 1], var4[var2 - 1])",Grasshopper
3,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0, var1[0], var1[1]]
    var4 = [0, 1, 1]
    for var5 in range(2, var2):
        if var3[1] + var1[var5] < var3[2] + var1[var5]:
            var3[0] = var3[1] + var1[var5]
            var4[0] = 1
        else:
            var3[0] = var3[2] + var1[var5]
            var4[0] = 2
        var3[1] = var3[0]
        var3[2] = var3[1]
    var6 = []
    var7 = var2 - 1
    while var7 >= 0:
        var6.insert(0, var7 + 1)
        if var4[0] == 1:
            var7 -= 1
        else:
            var7 -= 2
    return (var3[0], var6)",Grasshopper
4,"def var0(var1):
    var2 = len(var1)
    for var3 in range(2, var2):
        if var1[var3 - 1] < var1[var3 - 2]:
            var1[var3] += var1[var3 - 1]
        else:
            var1[var3] += var1[var3 - 2]
    var4 = []
    var3 = var2 - 1
    while var3 >= 0:
        var4.insert(0, var3 + 1)
        if var3 > 1 and var1[var3 - 1] < var1[var3 - 2]:
            var3 -= 1
        else:
            var3 -= 2
    return (var1[var2 - 1], var4)",Grasshopper
5,"def var0(var1):
    var2 = len(var1)
    var3 = [float('inf')] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var5 in range(2, var2):
        if var3[var5 - 1] + var1[var5] < var3[var5 - 2] + var1[var5]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
6,"def var0(var1):
    def var2(var3):
        if var3 >= len(var1):
            yield (0, [])
        else:
            for var4 in [var3 + 1, var3 + 2]:
                for var5, var6 in var2(var4):
                    yield (var5 + var1[var3], [var3 + 1] + var6)
    var7 = float('inf')
    var8 = []
    for var5, var6 in var2(0):
        if var5 < var7:
            var7 = var5
            var8 = var6
    return (var7, var8)",Grasshopper
7,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    var3 = reduce(lambda var4, var5: var4 + [min(var4[-1] + var1[var5], var4[-2] + var1[var5])], range(2, var2), [var1[0], var1[1]])
    var6 = []
    var5 = var2 - 1
    while var5 >= 0:
        var6.insert(0, var5 + 1)
        if var5 > 1 and var3[var5 - 1] < var3[var5 - 2]:
            var5 -= 1
        else:
            var5 -= 2
    return (var3[var2 - 1], var6)",Grasshopper
8,"import numpy as np
def var0(var1):
    var2 = len(var1)
    var3 = np.zeros(var2)
    var3[0] = var1[0]
    if var2 > 1:
        var3[1] = var1[1]
        for var4 in range(2, var2):
            var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        var5.insert(0, var4 + 1)
        if var4 > 1 and var3[var4 - 1] < var3[var4 - 2]:
            var4 -= 1
        else:
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
9,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        var5.insert(0, var4 + 1)
        if var4 > 1 and var3[var4 - 1] < var3[var4 - 2]:
            var4 -= 1
        else:
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
10,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1] + var1[var4], var3[var4 - 2] + var1[var4])
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        var5.insert(0, var4 + 1)
        if var4 > 1 and var3[var4 - 1] + var1[var4] < var3[var4 - 2] + var1[var4]:
            var4 -= 1
        else:
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
11,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = {}
    var4 = {}
    def var5(var6):
        if var6 == var2 - 1:
            return (var1[var6], [var6 + 1])
        if var6 in var3:
            return var3[var6]
        var7, var8 = var5(var6 + 1)
        var9, var10 = var5(var6 + 2)
        if var7 < var9:
            var3[var6] = (var1[var6] + var7, [var6 + 1] + var8)
            var4[var6] = var6 + 1
        else:
            var3[var6] = (var1[var6] + var9, [var6 + 1] + var10)
            var4[var6] = var6 + 2
        return var3[var6]
    var11, var12 = var5(0)
    return (var11, var12)",Grasshopper
12,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = [0] * var2
    var4 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 1
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var1[var5] + var3[var5 - 1]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var1[var5] + var3[var5 - 2]
            var4[var5] = var5 - 2
    var6 = [var2]
    var7 = var2 - 1
    while var7 != 0:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    if len(var1) == 1:
        return (var1[0], [1])
    return (var3[var2 - 1], var6)",Grasshopper
13,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = var1[0]
    var4 = var1[1]
    for var5 in range(2, var2):
        var6 = var1[var5] + min(var4, var3)
        var3 = var4
        var4 = var6
    var7 = [var2]
    var6 = var2 - 1
    if var2 >= 3:
        while var6 != 0:
            if var6 == 0:
                break
            if var6 == 1:
                var7.insert(0, 1)
                break
            if var1[var6 - 1] + var3 < var1[var6 - 2] + var3:
                var7.insert(0, var6)
                var6 -= 1
            else:
                var7.insert(0, var6)
                var6 -= 2
    elif var2 == 2:
        var7 = [1, 2]
    elif var2 == 1:
        var7 = [1]
    return (var4, var7)",Grasshopper
14,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    for var3 in range(2, var2):
        var1[var3] += min(var1[var3 - 1], var1[var3 - 2])
    var4 = [var2]
    var5 = var2 - 1
    while var5 != 0:
        var4.insert(0, var5 + 1)
        if var5 == 1:
            break
        if var1[var5 - 1] <= var1[var5 - 2]:
            var5 -= 1
        else:
            var5 -= 2
    return (var1[var2 - 1], var4)",Grasshopper
15,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = [0] * var2
    var4 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var1[var5] + var3[var5 - 1]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var1[var5] + var3[var5 - 2]
            var4[var5] = var5 - 2
    var6 = [var2]
    var7 = var2 - 1
    while var7 != 0:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
16,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    def var3(var4):
        if var4 == var2 - 1:
            yield (var1[var4], [var4 + 1])
        else:
            if var4 + 1 < var2:
                for var5, var6 in var3(var4 + 1):
                    yield (var1[var4] + var5, [var4 + 1] + var6)
            if var4 + 2 < var2:
                for var7, var8 in var3(var4 + 2):
                    yield (var1[var4] + var7, [var4 + 1] + var8)
    var9 = float('inf')
    var10 = []
    for var11, var12 in var3(0):
        if var11 < var9:
            var9 = var11
            var10 = var12
    return (var9, var10)",Grasshopper
17,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var3 = reduce(lambda var4, var5: var4 + [var1[var5] + min(var4[var5 - 1], var4[var5 - 2])], range(2, var2), var3)
    var6 = [var2]
    var7 = var2 - 1
    while var7 != 0:
        var6.insert(0, var7 + 1)
        if var7 == 1:
            break
        if var1[var7 - 1] <= var1[var7 - 2]:
            var7 -= 1
        else:
            var7 -= 2
    return (var3[var2 - 1], var6)",Grasshopper
18,"import numpy as np
def var0(var1):
    var1 = np.array(var1)
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = np.zeros(var2, dtype=int)
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + np.min([var3[var4 - 1], var3[var4 - 2]])
    var5 = [var2]
    var6 = var2 - 1
    while var6 != 0:
        var5.insert(0, var6 + 1)
        if var6 == 1:
            break
        if var3[var6 - 1] <= var3[var6 - 2]:
            var6 -= 1
        else:
            var6 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
19,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = [0] * var2
    var4 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var1[var5] + var3[var5 - 1]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var1[var5] + var3[var5 - 2]
            var4[var5] = var5 - 2
    var6 = [var2]
    var7 = var2 - 1
    while var7 != 0:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
20,"import multiprocessing
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    def var3(var4):
        if var4 == var2 - 1:
            return (var1[var4], [var4 + 1])
        else:
            var5, var6 = var3(var4 + 1)
            var7, var8 = var3(var4 + 2)
            if var5 < var7:
                return (var1[var4] + var5, [var4 + 1] + var6)
            else:
                return (var1[var4] + var7, [var4 + 1] + var8)
    with multiprocessing.Pool(processes=2) as var9:
        var10 = var9.apply_async(var3, (0,))
        var11, var12 = var10.get()
    return (var11, var12)",Grasshopper
21,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    def var4(var5):
        if var5 >= var2:
            return (0, [])
        if var5 in var3:
            return var3[var5]
        var6, var7 = var4(var5 + 1)
        var8, var9 = var4(var5 + 2)
        if var6 + var1[var5] < var8 + var1[var5]:
            var3[var5] = (var6 + var1[var5], [var5 + 1] + var7)
        else:
            var3[var5] = (var8 + var1[var5], [var5 + 2] + var9)
        return var3[var5]
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    return var4(0)",Grasshopper
22,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[var2 - 1] = var1[var2 - 1]
    var4[var2 - 1] = [var2]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = [var2 - 1, var2]
    for var6 in range(var2 - 3, -1, -1):
        if var3[var6 + 1] + var1[var6] < var3[var6 + 2] + var1[var6]:
            var3[var6] = var3[var6 + 1] + var1[var6]
            var4[var6] = [var6 + 1] + var4[var6 + 1]
        else:
            var3[var6] = var3[var6 + 2] + var1[var6]
            var4[var6] = [var6 + 2] + var4[var6 + 2]
    return (var3[0], var4[0])",Grasshopper
23,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0, 0]
    var4 = [[], []]
    var3[0] = var1[var2 - 1]
    var4[0] = [var2]
    var3[1] = var1[var2 - 2] + var1[var2 - 1]
    var4[1] = [var2 - 1, var2]
    for var5 in range(var2 - 3, -1, -1):
        if var3[0] + var1[var5] < var3[1] + var1[var5]:
            var3[1] = var3[0] + var1[var5]
            var4[1] = [var5 + 1] + var4[0]
        else:
            var3[0] = var3[1] + var1[var5]
            var4[0] = [var5 + 2] + var4[1]
    return (var3[0], var4[0])",Grasshopper
24,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = var1[:]
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + min(var3[var4 + 1], var3[var4 + 2])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
25,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = var2 - 1
    for var5 in range(var2 - 3, -1, -1):
        if var3[var5 + 1] + var1[var5] < var3[var5 + 2] + var1[var5]:
            var3[var5] = var3[var5 + 1] + var1[var5]
            var4[var5] = var5 + 1
        else:
            var3[var5] = var3[var5 + 2] + var1[var5]
            var4[var5] = var5 + 2
    var6 = []
    var7 = 0
    while var7 < var2:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[0], var6)",Grasshopper
26,"def var0(var1):
    var2 = len(var1)
    def var3(var4):
        if var4 >= var2:
            yield []
        else:
            for var5 in [var4 + 1, var4 + 2]:
                for var6 in var3(var5):
                    yield ([var4 + 1] + var6)
    var7 = float('inf')
    var8 = []
    for var9 in var3(0):
        var10 = sum((var1[var11 - 1] for var11 in var9))
        if var10 < var7:
            var7 = var10
            var8 = var9
    return (var7, var8)",Grasshopper
27,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = reduce(lambda var4, var5: [var1[var5] + min(var4[0], var4[1])] + var4, range(var2 - 2, -1, -1), [var1[var2 - 1], var1[var2 - 2] + var1[var2 - 1]])
    var6 = []
    var7 = 0
    while var7 < var2 - 1:
        if var3[0] < var3[1]:
            var6.append(var7 + 1)
            var7 += 1
        else:
            var6.append(var7 + 2)
            var7 += 2
    var6.append(var2)
    return (var3[0], [var8 + 1 for var8 in var6])",Grasshopper
28,"import numpy as np
def var0(var1):
    var2 = len(var1)
    var1 = np.array(var1)
    if var2 < 3:
        return (np.sum(var1), list(range(1, var2 + 1)))
    var3 = np.zeros(var2)
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + np.min([var3[var4 + 1], var3[var4 + 2]])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
29,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        if var3[var4 + 2] > var3[var4 + 1] + var1[var4]:
            var3[var4] = var3[var4 + 1] + var1[var4]
        else:
            var3[var4] = var3[var4 + 2] + var1[var4]
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
30,"import multiprocessing
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    with multiprocessing.Pool(processes=2) as var4:
        var5 = var4.starmap(lambda var6: (var6, var1[var6] + min(var3[var6 + 1], var3[var6 + 2])), [(var6,) for var6 in range(var2 - 3, -1, -1)])
    for var6, var7 in var5:
        var3[var6] = var7
    var8 = []
    var9 = 0
    while var9 < var2 - 1:
        if var3[var9 + 1] < var3[var9 + 2]:
            var8.append(var9 + 1)
            var9 += 1
        else:
            var8.append(var9 + 2)
            var9 += 2
    var8.append(var2)
    return (var3[0], [var10 + 1 for var10 in var8])",Grasshopper
31,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    var4 = {}
    def var5(var6):
        if var6 >= var2:
            return (0, [])
        if var6 in var3:
            return var3[var6]
        var7, var8 = var5(var6 + 1)
        var9, var10 = var5(var6 + 2)
        if var7 + var1[var6] < var9 + var1[var6]:
            var3[var6] = (var7 + var1[var6], [var6 + 1] + var8)
        else:
            var3[var6] = (var9 + var1[var6], [var6 + 2] + var10)
        return var3[var6]
    var11, var12 = var5(0)
    return (var11, [var13 + 1 for var13 in var12])",Grasshopper
32,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[0] = var1[0]
    var4[0] = [1]
    if var2 > 1:
        var3[1] = var1[1]
        var4[1] = [2]
        for var6 in range(2, var2):
            if var3[var6 - 1] + var1[var6] < var3[var6 - 2] + var1[var6]:
                var3[var6] = var3[var6 - 1] + var1[var6]
                var4[var6] = [var6 + 1] + var4[var6 - 1]
            else:
                var3[var6] = var3[var6 - 2] + var1[var6]
                var4[var6] = [var6 + 1] + var4[var6 - 2]
    return (var3[var2 - 1], var4[var2 - 1])",Grasshopper
33,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1] if var2 > 0 else 0, [])
    var3 = var1[0]
    var4 = var1[1]
    var5 = [1]
    var6 = [2]
    for var7 in range(2, var2):
        if var4 + var1[var7] < var3 + var1[var7]:
            var8 = var4 + var1[var7]
            var9 = [var7 + 1] + var6
        else:
            var8 = var3 + var1[var7]
            var9 = [var7 + 1] + var5
        var3 = var4
        var4 = var8
        var5 = var6
        var6 = var9
    return (var4, [var10 + 1 for var10 in var6])",Grasshopper
34,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1] if var2 > 0 else 0, [])
    var1 = var1[:]
    for var3 in range(2, var2):
        var1[var3] += min(var1[var3 - 1], var1[var3 - 2])
    var4 = []
    var5 = var2 - 1
    while var5 > 0:
        var4.append(var5 + 1)
        if var5 >= 2 and var1[var5] == var1[var5 - 2] + var1[var5]:
            var5 -= 2
        else:
            var5 -= 1
    var4.append(1)
    return (var1[var2 - 1], var4[::-1])",Grasshopper
35,"def var0(var1):
    var2 = len(var1)
    var3 = [float('inf')] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] + var1[var5] < var3[var5 - 2] + var1[var5]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6[::-1])",Grasshopper
36,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[0] = var1[0]
    var4[0] = [1]
    if var2 > 1:
        var3[1] = var1[1]
        var4[1] = [2]
        for var6 in range(2, var2):
            def var7(var8):
                if var8 == var6 - 1:
                    yield ([var6 + 1] + var4[var6 - 1])
                else:
                    yield ([var6 + 1] + var4[var6 - 2])
            if var3[var6 - 1] + var1[var6] < var3[var6 - 2] + var1[var6]:
                var3[var6] = var3[var6 - 1] + var1[var6]
                var4[var6] = next(var7(var6 - 1))
            else:
                var3[var6] = var3[var6 - 2] + var1[var6]
                var4[var6] = next(var7(var6 - 2))
    return (var3[var2 - 1], var4[var2 - 1])",Grasshopper
37,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    var3 = reduce(lambda var4, var5: var4 + [min(var4[-1] + var1[var5], (var4[-2] if var5 > 1 else float('inf')) + var1[var5])], range(var2), [0, var1[0]] if var2 > 0 else [])
    var6 = []
    var7 = var2 - 1
    while var7 > 0:
        var6.append(var7 + 1)
        if var7 > 1 and var3[var7] == var3[var7 - 1] + var1[var7]:
            var7 -= 1
        else:
            var7 -= 2
    var6.append(1)
    return (var3[var2 - 1], var6[::-1])",Grasshopper
38,"import numpy as np
def var0(var1):
    var2 = len(var1)
    var3 = np.zeros(var2)
    if var2 > 0:
        var3[0] = var1[0]
        if var2 > 1:
            var3[1] = var1[1]
            for var4 in range(2, var2):
                var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
    var5 = []
    var6 = var2 - 1
    while var6 > 0:
        var5.append(var6 + 1)
        if var3[var6] == var3[var6 - 1] + var1[var6]:
            var6 -= 1
        else:
            var6 -= 2
    var5.append(1)
    return (var3[var2 - 1], var5[::-1])",Grasshopper
39,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1] if var2 > 0 else 0, [])
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
        if var3[var4] > 1000000.0:
            break
    var5 = []
    var6 = var2 - 1
    while var6 > 0:
        var5.append(var6 + 1)
        if var3[var6] == var3[var6 - 1] + var1[var6]:
            var6 -= 1
        else:
            var6 -= 2
    var5.append(1)
    return (var3[var2 - 1], var5[::-1])",Grasshopper
40,"from multiprocessing import Pool
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1] if var2 > 0 else 0, [])
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    with Pool(processes=2) as var4:
        for var5 in range(2, var2):
            var6 = var4.starmap(var7, [(var3, var1, var5)])
            var3[var5] = var6[0]
    var8 = []
    var9 = var2 - 1
    while var9 > 0:
        var8.append(var9 + 1)
        if var3[var9] == var3[var9 - 1] + var1[var9]:
            var9 -= 1
        else:
            var9 -= 2
    var8.append(1)
    return (var3[var2 - 1], var8[::-1])
def var7(var3, var1, var5):
    return var1[var5] + min(var3[var5 - 1], var3[var5 - 2])",Grasshopper
41,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = {}
    var4 = []
    def var5(var6):
        if var6 == var2:
            return (0, [])
        if var6 in var3:
            return var3[var6]
        var7, var8 = var5(var6 + 1)
        var9, var10 = var5(var6 + 2)
        if var7 < var9:
            var11 = var1[var6] + var7
            var12 = [var6 + 1] + var8
        else:
            var11 = var1[var6] + var9
            var12 = [var6 + 2] + var10
        var3[var6] = (var11, var12)
        return (var11, var12)
    var13, var4 = var5(0)
    return (var13, var4)",Grasshopper
42,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = [0] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var1[var5] + var3[var5 - 1]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var1[var5] + var3[var5 - 2]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
43,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = 0
    var4 = var1[0]
    var5 = var1[1]
    for var6 in range(2, var2):
        var7 = var1[var6] + min(var3, var4)
        var3 = var4
        var4 = var5
        var5 = var7
    var8 = []
    var9 = var2 - 1
    if var5 <= var3 + var1[var2 - 1]:
        var8.append(var9 + 1)
        var9 -= 2
    else:
        var8.append(var9 + 1)
        var9 -= 1
    while var9 >= 0:
        var8.append(var9 + 1)
        if var9 - 2 >= 0:
            var9 -= 2
        else:
            var9 -= 1
    return (var5, var8[::-1])",Grasshopper
44,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    for var3 in range(2, var2):
        var1[var3] += min(var1[var3 - 1], var1[var3 - 2])
    var4 = [var2]
    var5 = var2 - 1
    while var5 > 0:
        if var5 - 2 >= 0 and var1[var5 - 2] <= var1[var5 - 1]:
            var5 -= 2
        else:
            var5 -= 1
        var4.append(var5 + 1)
    return (var1[var2 - 1], var4[::-1])",Grasshopper
45,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = [0] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var1[var5] + var3[var5 - 1]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var1[var5] + var3[var5 - 2]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
46,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    def var3(var4, var5, var6):
        if var4 == var2:
            yield (var5, var6)
        else:
            yield from var3(var4 + 1, var5 + var1[var4], var6 + [var4 + 1])
            yield from var3(var4 + 2, var5 + var1[var4], var6 + [var4 + 2])
    var7 = float('inf')
    var8 = []
    for var9, var6 in var3(0, 0, []):
        if var9 < var7:
            var7 = var9
            var8 = var6
    return (var7, var8)",Grasshopper
47,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = reduce(lambda var4, var5: var4 + [var1[var5] + min(var4[var5 - 1], var4[var5 - 2] if var5 > 1 else float('inf'))], range(2, var2), [var1[0], var1[1]])
    var6 = []
    var7 = var2 - 1
    while var7 > 0:
        var6.insert(0, var7 + 1)
        if var7 - 2 >= 0 and var3[var7 - 2] <= var3[var7 - 1]:
            var7 -= 2
        else:
            var7 -= 1
    return (var3[var2 - 1], var6)",Grasshopper
48,"import numpy as np
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = np.zeros(var2, dtype=np.int64)
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
    var5 = []
    var6 = var2 - 1
    while var6 >= 0:
        var5.insert(0, var6 + 1)
        if var6 - 2 >= 0 and var3[var6 - 2] <= var3[var6 - 1]:
            var6 -= 2
        else:
            var6 -= 1
    return (var3[var2 - 1], var5)",Grasshopper
49,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
        if var3[var4] > 10 ** 6:
            break
    var5 = [var2]
    var6 = var2 - 1
    while var6 > 0:
        var5.insert(0, var6 + 1)
        if var6 - 2 >= 0 and var3[var6 - 2] <= var3[var6 - 1]:
            var6 -= 2
        else:
            var6 -= 1
    return (var3[var2 - 1], var5)",Grasshopper
50,"import multiprocessing
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    with multiprocessing.Pool(processes=2) as var3:
        var4 = var3.starmap(var5, [(var6, var1) for var6 in [1, 2]])
    var7, var8 = var4[0]
    var9, var10 = var4[1]
    if var7 < var9:
        var11 = var1[0] + var7
        var12 = [1] + var8
    else:
        var11 = var1[0] + var9
        var12 = [2] + var10
    return (var11, var12)
def var5(var13, var1):
    var2 = len(var1)
    var14 = [0] * var2
    var14[0] = 0
    var14[1] = var1[1]
    for var6 in range(2, var2):
        var14[var6] = var1[var6] + min(var14[var6 - 1], var14[var6 - 2])
    var12 = [var15 + 1 for var15 in range(var2 - 1, -1, -1)]
    return (var14[var2 - 1], var12)",Grasshopper
51,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    def var4(var5):
        if var5 >= var2:
            return (0, [])
        if var5 in var3:
            return var3[var5]
        var6, var7 = var4(var5 + 1)
        var8, var9 = var4(var5 + 2)
        if var6 + var1[var5] < var8 + var1[var5]:
            var3[var5] = (var6 + var1[var5], [var5 + 1] + var7)
        else:
            var3[var5] = (var8 + var1[var5], [var5 + 2] + var9)
        return var3[var5]
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    return var4(0)",Grasshopper
52,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[0] = var1[0]
    var4[0] = [1]
    if var2 > 1:
        var3[1] = var1[1]
        var4[1] = [2]
    for var6 in range(2, var2):
        if var3[var6 - 1] + var1[var6] < var3[var6 - 2] + var1[var6]:
            var3[var6] = var3[var6 - 1] + var1[var6]
            var4[var6] = [var6 + 1] + var4[var6 - 1]
        else:
            var3[var6] = var3[var6 - 2] + var1[var6]
            var4[var6] = [var6 + 2] + var4[var6 - 2]
    return (var3[var2 - 1], var4[var2 - 1])",Grasshopper
53,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0, 0]
    var4 = [[1], [2]]
    for var5 in range(2, var2):
        if var3[0] + var1[var5] < var3[1] + var1[var5]:
            var3[1] = var3[0] + var1[var5]
            var4[1] = [var5 + 1] + var4[0]
        else:
            var3[1] = var3[1] + var1[var5]
            var4[1] = [var5 + 2] + var4[1]
        var3[0], var3[1] = (var3[1], var3[0])
        var4[0], var4[1] = (var4[1], var4[0])
    return (var3[1], var4[1])",Grasshopper
54,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    for var3 in range(2, var2):
        if var1[var3 - 1] < var1[var3 - 2]:
            var1[var3] = var1[var3 - 1] + var1[var3]
        else:
            var1[var3] = var1[var3 - 2] + var1[var3]
    var4 = []
    var3 = var2 - 1
    while var3 >= 0:
        var4.insert(0, var3 + 1)
        if var3 > 1 and var1[var3 - 1] < var1[var3 - 2]:
            var3 -= 1
        else:
            var3 -= 2
    return (var1[var2 - 1], var4)",Grasshopper
55,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    if var2 > 1:
        var3[1] = var1[1]
        var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] + var1[var5] < var3[var5 - 2] + var1[var5]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
56,"def var0(var1):
    def var2(var3, var4):
        if var3 >= len(var1):
            yield (0, var4)
        else:
            for var5 in [1, 2]:
                var6 = var3 + var5
                yield (var1[var3] + (var7 for var7, var8 in var2(var6, var4 + [var6 + 1]))[0] if var6 < len(var1) else 0, var4 + [var6 + 1])
    var9 = float('inf')
    var10 = []
    for var11, var12 in var2(0, [1]):
        if var11 < var9:
            var9, var10 = (var11, var12)
    return (var9, var10)",Grasshopper
57,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = reduce(lambda var4, var5: var4 + [min(var4[var5 - 1] + var1[var5], var4[var5 - 2] + var1[var5])], range(2, var2), [var1[0], var1[1]])
    var6 = []
    var5 = var2 - 1
    while var5 >= 0:
        var6.insert(0, var5 + 1)
        if var5 > 1 and var3[var5 - 1] < var3[var5 - 2]:
            var5 -= 1
        else:
            var5 -= 2
    return (var3[-1], var6)",Grasshopper
58,"import numpy as np
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (np.sum(var1), list(range(1, var2 + 1)))
    var3 = np.zeros(var2)
    var3[0] = var1[0]
    if var2 > 1:
        var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1] + var1[var4], var3[var4 - 2] + var1[var4])
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        var5.insert(0, var4 + 1)
        if var4 > 1 and var3[var4 - 1] < var3[var4 - 2]:
            var4 -= 1
        else:
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
59,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
        if var3[var4] > 100000:
            return (float('inf'), [])
    var5 = [var2]
    var4 = var2 - 1
    while var4 > 0:
        if var4 >= 2 and var3[var4 - 2] < var3[var4 - 1]:
            var4 -= 2
        else:
            var4 -= 1
        var5.append(var4)
    var5.reverse()
    return (var3[var2 - 1], var5)",Grasshopper
60,"import concurrent.futures
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    with concurrent.futures.ThreadPoolExecutor(max_workers=2) as var3:
        var4 = var3.submit(lambda: var5(var1, var2, 1))
        var6 = var3.submit(lambda: var5(var1, var2, 2))
        var7, var8 = var4.result()
        var9, var10 = var6.result()
    if var7 < var9:
        return (var7, var8)
    else:
        return (var9, var10)
def var5(var1, var2, var11):
    if var11 >= var2:
        return (0, [])
    if var11 == var2 - 1:
        return (var1[var11], [var11 + 1])
    var7, var8 = var5(var1, var2, var11 + 1)
    var9, var10 = var5(var1, var2, var11 + 2)
    if var7 + var1[var11] < var9 + var1[var11]:
        return (var7 + var1[var11], [var11 + 1] + var8)
    else:
        return (var9 + var1[var11], [var11 + 2] + var10)",Grasshopper
61,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    def var4(var5):
        if var5 >= var2:
            return (0, [])
        if var5 in var3:
            return var3[var5]
        var6, var7 = var4(var5 + 1)
        var8, var9 = var4(var5 + 2)
        if var6 + var1[var5] < var8 + var1[var5]:
            var3[var5] = (var6 + var1[var5], [var5 + 1] + var7)
        else:
            var3[var5] = (var8 + var1[var5], [var5 + 2] + var9)
        return var3[var5]
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var10, var11 = var4(0)
    return (var10, var11)",Grasshopper
62,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[0] = var1[0]
    var4[0] = [1]
    var3[1] = var1[1]
    var4[1] = [2]
    for var6 in range(2, var2):
        if var3[var6 - 1] + var1[var6] < var3[var6 - 2] + var1[var6]:
            var3[var6] = var3[var6 - 1] + var1[var6]
            var4[var6] = [var6 + 1] + var4[var6 - 1]
        else:
            var3[var6] = var3[var6 - 2] + var1[var6]
            var4[var6] = [var6 + 2] + var4[var6 - 2]
    return (var3[var2 - 1], var4[var2 - 1])",Grasshopper
63,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = var1[0]
    var4 = var1[1]
    for var5 in range(2, var2):
        var6 = min(var4 + var1[var5], var3 + var1[var5])
        var3 = var4
        var4 = var6
    var7 = []
    var5 = var2 - 1
    while var5 >= 0:
        if var5 == 0:
            var7 = [1] + var7
            break
        if var5 == 1:
            var7 = [2] + var7
            break
        if var4 + var1[var5] < var3 + var1[var5]:
            var7 = [var5 + 1] + var7
            var3 = var4
            var4 = var4 + var1[var5]
            var5 -= 1
        else:
            var7 = [var5 + 2] + var7
            var4 = var3
            var3 = var3 + var1[var5]
            var5 -= 2
    return (var4, var7)",Grasshopper
64,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    for var3 in range(2, var2):
        var1[var3] += min(var1[var3 - 1], var1[var3 - 2])
    var4 = []
    var3 = var2 - 1
    while var3 >= 0:
        if var3 == 0:
            var4 = [1] + var4
            break
        if var3 == 1:
            var4 = [2] + var4
            break
        if var1[var3 - 1] < var1[var3 - 2]:
            var4 = [var3 + 1] + var4
            var3 -= 1
        else:
            var4 = [var3 + 2] + var4
            var3 -= 2
    return (var1[var2 - 1], var4)",Grasshopper
65,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] + var1[var5] < var3[var5 - 2] + var1[var5]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6[::-1])",Grasshopper
66,"def var0(var1):
    def var2(var3, var4):
        if var3 >= len(var1):
            yield (0, var4)
        else:
            for var5 in [1, 2]:
                var6 = var3 + var5
                yield (var1[var3] + (yield from var2(var6, var4 + [var6 + 1])))
    var7 = float('inf')
    var8 = []
    for var9, var10 in var2(0, []):
        if var9 < var7:
            var7 = var9
            var8 = var10
    return (var7, var8)",Grasshopper
67,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = reduce(lambda var4, var5: var4 + [min(var4[-1] + var1[var5], var4[-2] + var1[var5])], range(2, var2), [var1[0], var1[1]])
    var6 = []
    var5 = var2 - 1
    while var5 >= 0:
        if var5 == 0:
            var6 = [1] + var6
            break
        if var5 == 1:
            var6 = [2] + var6
            break
        if var3[var5 - 1] < var3[var5 - 2]:
            var6 = [var5 + 1] + var6
            var5 -= 1
        else:
            var6 = [var5 + 2] + var6
            var5 -= 2
    return (var3[-1], var6)",Grasshopper
68,"import numpy as np
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (np.sum(var1), list(range(1, var2 + 1)))
    var3 = np.zeros(var2)
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        if var4 == 0:
            var5 = [1] + var5
            break
        if var4 == 1:
            var5 = [2] + var5
            break
        if var3[var4 - 1] < var3[var4 - 2]:
            var5 = [var4 + 1] + var5
            var4 -= 1
        else:
            var5 = [var4 + 2] + var5
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
69,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
        if var3[var4] >= 1000000:
            break
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        if var4 == 0:
            var5 = [1] + var5
            break
        if var4 == 1:
            var5 = [2] + var5
            break
        if var3[var4 - 1] < var3[var4 - 2]:
            var5 = [var4 + 1] + var5
            var4 -= 1
        else:
            var5 = [var4 + 2] + var5
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
70,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        if var4 == 0:
            var5 = [1] + var5
            break
        if var4 == 1:
            var5 = [2] + var5
            break
        if var3[var4 - 1] < var3[var4 - 2]:
            var5 = [var4 + 1] + var5
            var4 -= 1
        else:
            var5 = [var4 + 2] + var5
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
71,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    var4 = {}
    def var5(var6):
        if var6 >= var2:
            return (0, [])
        if var6 in var3:
            return var3[var6]
        var7, var8 = var5(var6 + 1)
        var9, var10 = var5(var6 + 2)
        if var7 + var1[var6] < var9 + var1[var6]:
            var3[var6] = (var7 + var1[var6], [var6 + 1] + var8)
            var4[var6] = var6 + 1
        else:
            var3[var6] = (var9 + var1[var6], [var6 + 2] + var10)
            var4[var6] = var6 + 2
        return var3[var6]
    var11, var12 = var5(0)
    return (var11, var12)",Grasshopper
72,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = var2 - 1
    var7 = [var6 + 1]
    while var6 > 0:
        var6 = var4[var6]
        var7.append(var6 + 1)
    return (var3[var2 - 1], var7[::-1])",Grasshopper
73,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1[:var2]), list(range(1, var2 + 1)))
    var3 = [0, 0]
    var4 = [0, 0]
    for var5 in range(2, var2):
        if var3[0] + var1[var5] < var3[1] + var1[var5]:
            var3[1] = var3[0] + var1[var5]
            var4[1] = var5
        else:
            var3[1] = var3[1] + var1[var5]
            var4[1] = var5
        var3[0], var3[1] = (var3[1], var3[0])
    var6 = [var2]
    var7 = var2 - 1
    return (var3[1], var6)",Grasshopper
74,"def var0(var1):
    var2 = len(var1)
    for var3 in range(2, var2):
        var1[var3] += min(var1[var3 - 1], var1[var3 - 2])
    var4 = [var2]
    var3 = var2 - 1
    while var3 > 0:
        if var3 == 1:
            var4.append(0)
            break
        if var1[var3 - 1] < var1[var3 - 2]:
            var4.append(var3 - 1)
            var3 = var3 - 1
        else:
            var4.append(var3 - 2)
            var3 = var3 - 2
    return (var1[var2 - 1], var4[::-1])",Grasshopper
75,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [None] * var2
    var3[1] = var1[1]
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6[::-1])",Grasshopper
76,"def var0(var1):
    def var2(var3, var4, var5):
        if var3 >= len(var1):
            yield (var4, var5)
        else:
            yield from var2(var3 + 1, var4 + var1[var3], var5 + [var3 + 1])
            yield from var2(var3 + 2, var4 + var1[var3], var5 + [var3 + 1, var3 + 2])
    var6 = list(var2(0, 0, []))
    return min(var6, key=lambda var7: var7[0])",Grasshopper
77,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    var3 = reduce(lambda var4, var5: var4 + [min(var4[-1] + var1[var5], (var4[-2] if var5 > 1 else float('inf')) + var1[var5])], range(2, var2), [0, var1[0] if var2 > 0 else 0, var1[1] if var2 > 1 else 0])
    var6 = []
    var5 = var2 - 1
    while var5 > 0:
        var6.append(var5 + 1)
        if var5 == 1:
            var5 = 0
        elif var3[var5] == var3[var5 - 1] + var1[var5]:
            var5 = var5 - 1
        else:
            var5 = var5 - 2
    return (var3[-1], var6[::-1])",Grasshopper
78,"import numpy as np
def var0(var1):
    var2 = len(var1)
    var3 = np.zeros(var2)
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
    var5 = [var2]
    var4 = var2 - 1
    while var4 > 0:
        if var4 == 1:
            var5.append(0)
            break
        if var3[var4] == var3[var4 - 1] + var1[var4]:
            var5.append(var4 - 1)
            var4 = var4 - 1
        else:
            var5.append(var4 - 2)
            var4 = var4 - 2
    return (var3[var2 - 1], var5[::-1])",Grasshopper
79,"def var0(var1):
    var2 = len(var1)
    if var2 <= 1:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
    var5 = [var2]
    var4 = var2 - 1
    while var4 > 0:
        var5.append(var4)
        if var4 == 1:
            var4 = 0
        elif var3[var4] == var3[var4 - 1] + var1[var4]:
            var4 = var4 - 1
        else:
            var4 = var4 - 2
    return (var3[var2 - 1], var5[::-1])",Grasshopper
80,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1] + var1[var4], var3[var4 - 2] + var1[var4])
    var5 = [var2]
    var4 = var2 - 1
    while var4 > 0:
        var5.append(var4)
        if var4 == 1:
            var4 = 0
        elif var3[var4] == var3[var4 - 1] + var1[var4]:
            var4 = var4 - 1
        else:
            var4 = var4 - 2
    return (var3[var2 - 1], var5[::-1])",Grasshopper
81,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    def var4(var5):
        if var5 >= var2:
            return (0, [])
        if var5 in var3:
            return var3[var5]
        var6, var7 = var4(var5 + 1)
        var8, var9 = var4(var5 + 2)
        if var6 + var1[var5] < var8 + var1[var5]:
            var3[var5] = (var6 + var1[var5], [var5 + 1] + var7)
        else:
            var3[var5] = (var8 + var1[var5], [var5 + 2] + var9)
        return var3[var5]
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    return var4(0)",Grasshopper
82,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[var2 - 1] = var1[var2 - 1]
    var4[var2 - 1] = [var2]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = [var2 - 1, var2]
    for var6 in range(var2 - 3, -1, -1):
        if var3[var6 + 1] + var1[var6] < var3[var6 + 2] + var1[var6]:
            var3[var6] = var3[var6 + 1] + var1[var6]
            var4[var6] = [var6 + 1] + var4[var6 + 1]
        else:
            var3[var6] = var3[var6 + 2] + var1[var6]
            var4[var6] = [var6 + 2] + var4[var6 + 2]
    return (var3[0], var4[0])",Grasshopper
83,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0, 0]
    var4 = [[], []]
    var3[0] = var1[var2 - 1]
    var4[0] = [var2]
    var3[1] = var1[var2 - 2] + var1[var2 - 1]
    var4[1] = [var2 - 1, var2]
    for var5 in range(var2 - 3, -1, -1):
        if var3[0] + var1[var5] < var3[1] + var1[var5]:
            var3[1] = var3[0] + var1[var5]
            var4[1] = [var5 + 1] + var4[0]
        else:
            var3[0] = var3[1] + var1[var5]
            var4[0] = [var5 + 2] + var4[1]
    return (var3[0], var4[0])",Grasshopper
84,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = var1[:]
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + min(var3[var4 + 1], var3[var4 + 2])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
85,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = var2 - 1
    for var5 in range(var2 - 3, -1, -1):
        if var3[var5 + 1] + var1[var5] < var3[var5 + 2] + var1[var5]:
            var3[var5] = var3[var5 + 1] + var1[var5]
            var4[var5] = var5 + 1
        else:
            var3[var5] = var3[var5 + 2] + var1[var5]
            var4[var5] = var5 + 2
    var6 = []
    var7 = 0
    while var7 < var2:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[0], var6)",Grasshopper
86,"def var0(var1):
    var2 = len(var1)
    def var3(var4):
        if var4 >= var2:
            yield []
        else:
            for var5 in [var4 + 1, var4 + 2]:
                for var6 in var3(var5):
                    yield ([var4 + 1] + var6)
    var7 = float('inf')
    var8 = []
    for var9 in var3(0):
        var10 = sum((var1[var11 - 1] for var11 in var9))
        if var10 < var7:
            var7 = var10
            var8 = var9
    return (var7, var8)",Grasshopper
87,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = reduce(lambda var4, var5: [var1[var5] + min(var4[0], var4[1])] + var4, range(var2 - 2, -1, -1), [var1[var2 - 1], var1[var2 - 2] + var1[var2 - 1]])
    var6 = []
    var7 = 0
    while var7 < var2 - 1:
        if var3[0] < var3[1]:
            var6.append(var7 + 1)
            var7 += 1
        else:
            var6.append(var7 + 2)
            var7 += 2
    var6.append(var2)
    return (var3[0], [var8 + 1 for var8 in var6])",Grasshopper
88,"import numpy as np
def var0(var1):
    var2 = len(var1)
    var1 = np.array(var1)
    if var2 < 3:
        return (np.sum(var1), list(range(1, var2 + 1)))
    var3 = np.zeros(var2)
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + np.min([var3[var4 + 1], var3[var4 + 2]])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
89,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        if var3[var4 + 2] > var3[var4 + 1] + var1[var4]:
            var3[var4] = var3[var4 + 1] + var1[var4]
        else:
            var3[var4] = var3[var4 + 2] + var1[var4]
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
90,"import multiprocessing
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    with multiprocessing.Pool(processes=2) as var4:
        var5 = var4.starmap(lambda var6: (var6, var1[var6] + min(var3[var6 + 1], var3[var6 + 2])), [(var6,) for var6 in range(var2 - 3, -1, -1)])
    for var6, var7 in var5:
        var3[var6] = var7
    var8 = []
    var9 = 0
    while var9 < var2 - 1:
        if var3[var9 + 1] < var3[var9 + 2]:
            var8.append(var9 + 1)
            var9 += 1
        else:
            var8.append(var9 + 2)
            var9 += 2
    var8.append(var2)
    return (var3[0], [var10 + 1 for var10 in var8])",Grasshopper
91,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    def var4(var5):
        if var5 >= var2:
            return (0, [])
        if var5 in var3:
            return var3[var5]
        var6, var7 = var4(var5 + 1)
        var8, var9 = var4(var5 + 2)
        if var6 + var1[var5] < var8 + var1[var5]:
            var3[var5] = (var6 + var1[var5], [var5 + 1] + var7)
        else:
            var3[var5] = (var8 + var1[var5], [var5 + 2] + var9)
        return var3[var5]
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    return var4(0)",Grasshopper
92,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[var2 - 1] = var1[var2 - 1]
    var4[var2 - 1] = [var2]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = [var2 - 1, var2]
    for var6 in range(var2 - 3, -1, -1):
        if var3[var6 + 1] + var1[var6] < var3[var6 + 2] + var1[var6]:
            var3[var6] = var3[var6 + 1] + var1[var6]
            var4[var6] = [var6 + 1] + var4[var6 + 1]
        else:
            var3[var6] = var3[var6 + 2] + var1[var6]
            var4[var6] = [var6 + 2] + var4[var6 + 2]
    return (var3[0], var4[0])",Grasshopper
93,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0, 0]
    var4 = [[], []]
    var3[0] = var1[var2 - 1]
    var4[0] = [var2]
    var3[1] = var1[var2 - 2] + var1[var2 - 1]
    var4[1] = [var2 - 1, var2]
    for var5 in range(var2 - 3, -1, -1):
        if var3[0] + var1[var5] < var3[1] + var1[var5]:
            var3[1] = var3[0] + var1[var5]
            var4[1] = [var5 + 1] + var4[0]
        else:
            var3[0] = var3[1] + var1[var5]
            var4[0] = [var5 + 2] + var4[1]
    return (var3[0], var4[0])",Grasshopper
94,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = var1[:]
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + min(var3[var4 + 1], var3[var4 + 2])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
95,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = var2 - 1
    for var5 in range(var2 - 3, -1, -1):
        if var3[var5 + 1] + var1[var5] < var3[var5 + 2] + var1[var5]:
            var3[var5] = var3[var5 + 1] + var1[var5]
            var4[var5] = var5 + 1
        else:
            var3[var5] = var3[var5 + 2] + var1[var5]
            var4[var5] = var5 + 2
    var6 = []
    var7 = 0
    while var7 < var2:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[0], var6)",Grasshopper
96,"def var0(var1):
    var2 = len(var1)
    def var3(var4):
        if var4 >= var2:
            yield []
        else:
            for var5 in [var4 + 1, var4 + 2]:
                for var6 in var3(var5):
                    yield ([var5] + var6)
    var7 = float('inf')
    var8 = []
    for var9 in var3(0):
        var10 = sum((var1[var11 - 1] for var11 in var9))
        if var10 < var7:
            var7 = var10
            var8 = var9
    return (var7, var8)",Grasshopper
97,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = reduce(lambda var4, var5: [var1[var5] + min(var4[0], var4[1])] + var4, range(var2 - 2, -1, -1), [var1[var2 - 1], var1[var2 - 2] + var1[var2 - 1]])
    var6 = []
    var7 = 0
    while var7 < var2 - 1:
        if var3[0] < var3[1]:
            var6.append(var7 + 1)
            var7 += 1
        else:
            var6.append(var7 + 2)
            var7 += 2
    var6.append(var2)
    return (var3[0], [var8 + 1 for var8 in var6])",Grasshopper
98,"import numpy as np
def var0(var1):
    var2 = len(var1)
    var1 = np.array(var1)
    if var2 < 3:
        return (np.sum(var1), list(range(1, var2 + 1)))
    var3 = np.zeros(var2)
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + np.min([var3[var4 + 1], var3[var4 + 2]])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
99,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        if var3[var4 + 2] > var3[var4 + 1] + var1[var4]:
            var3[var4] = var3[var4 + 1] + var1[var4]
        else:
            var3[var4] = var3[var4 + 2] + var1[var4]
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
100,"import multiprocessing
def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    with multiprocessing.Pool(processes=2) as var4:
        var5 = var4.starmap(lambda var6: (var6, var1[var6] + min(var3[var6 + 1], var3[var6 + 2])), [(var6,) for var6 in range(var2 - 3, -1, -1)])
    for var6, var7 in var5:
        var3[var6] = var7
    var8 = []
    var9 = 0
    while var9 < var2 - 1:
        if var3[var9 + 1] < var3[var9 + 2]:
            var8.append(var9 + 1)
            var9 += 1
        else:
            var8.append(var9 + 2)
            var9 += 2
    var8.append(var2)
    return (var3[0], [var10 + 1 for var10 in var8])",Grasshopper
101,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = 0
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 >= 0:
    var5.append(var6)
    var6 = var3[var6]
var5.reverse()",Grasshopper
102,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]
var5.reverse()",Grasshopper
103,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]
var5.reverse()",Grasshopper
104,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 >= 2 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]
var5.reverse()",Grasshopper
105,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]
var5.reverse()",Grasshopper
106,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]
var5.reverse()",Grasshopper
107,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]
var5.reverse()",Grasshopper
108,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]
var5.reverse()",Grasshopper
109,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]
var5.reverse()",Grasshopper
110,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]
var5.reverse()",Grasshopper
111,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = 0
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 >= 0:
    var5.append(var6)
    var6 = var3[var6]",Grasshopper
112,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]",Grasshopper
113,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]",Grasshopper
114,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]",Grasshopper
115,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]",Grasshopper
116,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]",Grasshopper
117,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]",Grasshopper
118,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]",Grasshopper
119,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]",Grasshopper
120,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
var3[0] = -1
for var4 in range(1, var0):
    var2[var4] = var2[var4 - 1] + var1[var4]
    var3[var4] = var4 - 1
    if var4 > 1 and var2[var4 - 2] + var1[var4] < var2[var4]:
        var2[var4] = var2[var4 - 2] + var1[var4]
        var3[var4] = var4 - 2
var5 = []
var6 = var0 - 1
while var6 != -1:
    var5.append(var6)
    var6 = var3[var6]",Grasshopper
121,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
122,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [None] * var0
for var4 in range(1, var0):
    for var5 in range(var4):
        if var2[var5] + abs(var1[var4] - var1[var5]) < var2[var4]:
            var2[var4] = var2[var5] + abs(var1[var4] - var1[var5])
            var3[var4] = var5
var6 = var2[var0 - 1]
var7 = []
var8 = var0 - 1
while var8 is not None:
    var7.insert(0, var8)
    var8 = var3[var8]",Grasshopper
123,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
124,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [None] * var0
for var4 in range(1, var0):
    for var5 in range(var4):
        if var2[var5] + abs(var1[var4] - var1[var5]) < var2[var4]:
            var2[var4] = var2[var5] + abs(var1[var4] - var1[var5])
            var3[var4] = var5
var6 = var2[var0 - 1]
var7 = []
var8 = var0 - 1
while var8 is not None:
    var7.insert(0, var8)
    var8 = var3[var8]",Grasshopper
125,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
126,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
127,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
128,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
129,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
130,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
131,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var3[0] = var1[0]
for var4 in range(1, var0):
    var3[var4] = var3[var4 - 1] + var1[var4]
    if var4 > 1:
        var3[var4] = min(var3[var4], var3[var4 - 2] + var1[var4])
for var4 in range(var0 - 1, -1, -1):
    if var4 == 0:
        var2.append(0)
    elif var4 == 1:
        if var3[1] == var3[0] + var1[1]:
            var2.append(1)
        else:
            var2.append(0)
    elif var3[var4] == var3[var4 - 1] + var1[var4]:
        var2.append(var4)
    else:
        var2.append(var4 - 2)
var2.reverse()",Grasshopper
132,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = {}
def var4(var5):
    if var5 == 0:
        return var1[0]
    if var5 in var3:
        return var3[var5]
    var6 = var4(var5 - 1) + var1[var5]
    var7 = (var4(var5 - 2) if var5 > 1 else float('inf')) + var1[var5]
    var3[var5] = min(var6, var7)
    return var3[var5]
var8 = var4(var0 - 1)
var9 = var0 - 1
while var9 >= 0:
    var2[var9] = var9
    if var9 > 1 and var3.get(var9 - 2, float('inf')) + var1[var9] == var3[var9]:
        var9 -= 2
    else:
        var9 -= 1",Grasshopper
133,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var3[0] = var1[0]
if var0 > 1:
    var3[1] = var1[0] + var1[1]
for var4 in range(2, var0):
    var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
var4 = var0 - 1
while var4 >= 0:
    var2[var4] = var4
    if var4 > 1 and var3[var4 - 2] + var1[var4] == var3[var4]:
        var4 -= 2
    else:
        var4 -= 1",Grasshopper
134,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
if var0 > 1:
    var2[1] = var2[0] + var1[1]
for var4 in range(2, var0):
    var2[var4] = min(var2[var4 - 1], var2[var4 - 2]) + var1[var4]
var4 = var0 - 1
while var4 >= 0:
    var3[var4] = var4
    if var4 > 1 and var2[var4 - 2] + var1[var4] == var2[var4]:
        var4 -= 2
    else:
        var4 -= 1",Grasshopper
135,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
if var0 > 1:
    var2[1] = var1[0] + var1[1]
for var4 in range(2, var0):
    var2[var4] = min(var2[var4 - 1], var2[var4 - 2]) + var1[var4]
var4 = var0 - 1
while var4 >= 0:
    var3[var4] = var4
    if var4 > 1 and var2[var4 - 2] + var1[var4] == var2[var4]:
        var4 -= 2
    else:
        var4 -= 1",Grasshopper
136,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
if var0 > 1:
    var2[1] = var2[0] + var1[1]
for var4 in range(2, var0):
    var2[var4] = min(var2[var4 - 1], var2[var4 - 2]) + var1[var4]
var4 = var0 - 1
while var4 >= 0:
    var3[var4] = var4
    if var4 > 1 and var2[var4 - 2] + var1[var4] == var2[var4]:
        var4 -= 2
    else:
        var4 -= 1",Grasshopper
137,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = []
var2[0] = var1[0]
if var0 > 1:
    var2[1] = var2[0] + var1[1]
for var4 in range(2, var0):
    var2[var4] = min(var2[var4 - 1], var2[var4 - 2]) + var1[var4]
var4 = var0 - 1
while var4 >= 0:
    var3.append(var4)
    if var4 > 1 and var2[var4 - 2] + var1[var4] == var2[var4]:
        var4 -= 2
    else:
        var4 -= 1
var3.reverse()",Grasshopper
138,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
if var0 > 1:
    var2[1] = var2[0] + var1[1]
for var4 in range(2, var0):
    var2[var4] = min(var2[var4 - 1], var2[var4 - 2]) + var1[var4]
var4 = var0 - 1
while var4 >= 0:
    var3[var4] = var4
    if var4 > 1 and var2[var4 - 2] + var1[var4] == var2[var4]:
        var4 -= 2
    else:
        var4 -= 1",Grasshopper
139,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
if var0 > 1:
    var2[1] = var1[0] + var1[1]
for var4 in range(2, var0):
    var2[var4] = min(var2[var4 - 1], var2[var4 - 2]) + var1[var4]
var4 = var0 - 1
while var4 >= 0:
    var3[var4] = var4
    if var4 > 1 and var2[var4 - 2] + var1[var4] == var2[var4]:
        var4 -= 2
    else:
        var4 -= 1",Grasshopper
140,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [0] * var0
var2[0] = var1[0]
if var0 > 1:
    var2[1] = var1[0] + var1[1]
for var4 in range(2, var0):
    var2[var4] = min(var2[var4 - 1], var2[var4 - 2]) + var1[var4]
var4 = var0 - 1
while var4 >= 0:
    var3[var4] = var4
    if var4 > 1 and var2[var4 - 2] + var1[var4] == var2[var4]:
        var4 -= 2
    else:
        var4 -= 1",Grasshopper
141,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
142,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = {}
var3 = {}
def var4(var5):
    if var5 == 0:
        return 0
    if var5 in var2:
        return var2[var5]
    var6 = float('inf')
    var7 = []
    for var8 in range(var5):
        var9 = var4(var8) + abs(var1[var5] - var1[var8])
        if var9 < var6:
            var6 = var9
            var7 = var3[var8] + [var5]
    var2[var5] = var6
    var3[var5] = var7
    return var6
var10 = var4(var0 - 1)
var11 = var3[var0 - 1]",Grasshopper
143,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [0] * var0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    var2[var5] = float('inf')
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
144,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
145,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
146,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [None] * var0
for var4 in range(1, var0):
    for var5 in range(var4):
        if var2[var5] + abs(var1[var4] - var1[var5]) < var2[var4]:
            var2[var4] = var2[var5] + abs(var1[var4] - var1[var5])
            var3[var4] = var5
var6 = var2[var0 - 1]
var7 = []
var8 = var0 - 1
while var8 is not None:
    var7.append(var8)
    var8 = var3[var8]
var7.reverse()",Grasshopper
147,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
148,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
149,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
150,"var0 = int(input())
var1 = list(map(int, input().split()))
var2 = [float('inf')] * var0
var2[0] = 0
var3 = [[] for var4 in range(var0)]
var3[0] = [0]
for var5 in range(1, var0):
    for var6 in range(var5):
        if var2[var6] + abs(var1[var5] - var1[var6]) < var2[var5]:
            var2[var5] = var2[var6] + abs(var1[var5] - var1[var6])
            var3[var5] = var3[var6] + [var5]
var7 = var2[var0 - 1]
var8 = var3[var0 - 1]",Grasshopper
151,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = {}
    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var4[var6, var7] = (var1[var6][var7] + var8, 'D' + var9)
        else:
            var4[var6, var7] = (var1[var6][var7] + var10, 'R' + var11)
        return var4[var6, var7]
    return var5(0, 0)",Turtle
152,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 < var10:
                var4[var7][var8] = var1[var7][var8] + var9
                var6[var7][var8] = 'D'
            else:
                var4[var7][var8] = var1[var7][var8] + var10
                var6[var7][var8] = 'R'
    var11 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 > 0 or var8 > 0:
        var11 = var6[var7][var8] + var11
        if var6[var7][var8] == 'D':
            var7 -= 1
        else:
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var11)",Turtle
153,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [''] * var3
    for var6 in range(var2):
        var7 = 0
        var8 = ''
        for var9 in range(var3):
            var10 = var4[var9]
            var11 = var7 if var9 > 0 else float('inf')
            if var10 < var11:
                var4[var9] = var1[var6][var9] + var10
                var5[var9] = 'D'
            else:
                var4[var9] = var1[var6][var9] + var11
                var5[var9] = 'R'
            var7 = var4[var9]
            var8 = var5[var9]
    var12 = ''
    var9 = var3 - 1
    var6 = var2 - 1
    while var6 > 0 or var9 > 0:
        var12 = var5[var9] + var12
        if var5[var9] == 'D':
            var6 -= 1
        else:
            var9 -= 1
    return (var4[var3 - 1], var12)",Turtle
154,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 == 0 and var5 == 0:
                continue
            if var4 > 0 and var5 > 0:
                var1[var4][var5] += min(var1[var4 - 1][var5], var1[var4][var5 - 1])
            elif var4 > 0:
                var1[var4][var5] += var1[var4 - 1][var5]
            else:
                var1[var4][var5] += var1[var4][var5 - 1]
    var6 = ''
    var4, var5 = (var2 - 1, var3 - 1)
    while var4 > 0 or var5 > 0:
        if var4 > 0 and var5 > 0 and (var1[var4 - 1][var5] <= var1[var4][var5 - 1]):
            var6 = 'D' + var6
            var4 -= 1
        else:
            var6 = 'R' + var6
            var5 -= 1
    return (var1[var2 - 1][var3 - 1], var6)",Turtle
155,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            if var7 > 0 and var8 > 0:
                if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                    var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                    var6[var7][var8] = (var7 - 1, var8)
                else:
                    var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                    var6[var7][var8] = (var7, var8 - 1)
            elif var7 > 0:
                var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                var6[var7][var8] = (var7, var8 - 1)
    var9 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 != 0 or var8 != 0:
        if var6[var7][var8] == (var7 - 1, var8):
            var9 = 'D' + var9
            var7 -= 1
        else:
            var9 = 'R' + var9
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
156,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    def var4(var5, var6):
        if var5 == var2 - 1 and var6 == var3 - 1:
            yield ''
            return
        if var5 + 1 < var2:
            for var7 in var4(var5 + 1, var6):
                yield ('D' + var7)
        if var6 + 1 < var3:
            for var7 in var4(var5, var6 + 1):
                yield ('R' + var7)
    var8 = float('inf')
    var9 = ''
    for var7 in var4(0, 0):
        var10 = 0
        var11, var12 = (0, 0)
        for var13 in var7:
            var10 += var1[var11][var12]
            if var13 == 'D':
                var11 += 1
            else:
                var12 += 1
        var10 += var1[var11][var12]
        if var10 < var8:
            var8 = var10
            var9 = var7
    return (var8, var9)",Turtle
157,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = reduce(lambda var5, var6: var5 + [reduce(lambda var7, var8: var7 + [var1[var6][var8] + (var5[var6 - 1][var8] if var6 > 0 else 0) + (var5[var6][var8 - 1] if var8 > 0 else 0)], [0] * var3, 0)], [0] * var2, [])
    var9 = ''
    var6, var8 = (var2 - 1, var3 - 1)
    while var6 > 0 or var8 > 0:
        if var6 > 0 and (var8 == 0 or var4[var6 - 1][var8] <= var4[var6][var8 - 1]):
            var9 = 'D' + var9
            var6 -= 1
        else:
            var9 = 'R' + var9
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
158,"import numpy as np
def var0(var1):
    var1 = np.array(var1)
    var2, var3 = var1.shape
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = np.zeros((var2, var3), dtype=int)
    var4[0, 0] = var1[0, 0]
    for var5 in range(var2):
        for var6 in range(var3):
            if var5 == 0 and var6 == 0:
                continue
            var4[var5, var6] = var1[var5, var6] + min(var4[var5 - 1, var6] if var5 > 0 else float('inf'), var4[var5, var6 - 1] if var6 > 0 else float('inf'))
    var7 = ''
    var5, var6 = (var2 - 1, var3 - 1)
    while var5 > 0 or var6 > 0:
        if var5 > 0 and var4[var5 - 1, var6] <= var4[var5, var6 - 1]:
            var7 = 'D' + var7
            var5 -= 1
        else:
            var7 = 'R' + var7
            var6 -= 1
    return (var4[var2 - 1, var3 - 1], var7)",Turtle
159,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = [[float('inf')] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var4[var6][var7] == float('inf'):
                continue
            if var6 + 1 < var2:
                var4[var6 + 1][var7] = min(var4[var6 + 1][var7], var4[var6][var7] + var1[var6 + 1][var7])
            if var7 + 1 < var3:
                var4[var6][var7 + 1] = min(var4[var6][var7 + 1], var4[var6][var7] + var1[var6][var7 + 1])
    var8 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var4[var6 - 1][var7] <= var4[var6][var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
160,"import multiprocessing
def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    def var7(var6):
        for var8 in range(1, var3):
            var4[var6][var8] = var1[var6][var8] + min(var4[var6 - 1][var8], var4[var6][var8 - 1])
    with multiprocessing.Pool() as var9:
        var9.map(var7, range(1, var2))
    var10 = ''
    var6, var8 = (var2 - 1, var3 - 1)
    while var6 > 0 or var8 > 0:
        if var6 > 0 and (var8 == 0 or var4[var6 - 1][var8] <= var4[var6][var8 - 1]):
            var10 = 'D' + var10
            var6 -= 1
        else:
            var10 = 'R' + var10
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var10)",Turtle
161,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 <= var10:
                var4[var7][var8] = var9 + var1[var7][var8]
                var6[var7][var8] = var6[var7 - 1][var8] + 'D'
            else:
                var4[var7][var8] = var10 + var1[var7][var8]
                var6[var7][var8] = var6[var7][var8 - 1] + 'R'
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
162,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7] if var6 > 0 else float('inf'), var4[var6][var7 - 1] if var7 > 0 else float('inf'))
    var8 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var4[var6 - 1][var7] <= var4[var6][var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
163,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [0] * var3
    var4[0] = var1[0][0]
    for var6 in range(1, var3):
        var4[var6] = var4[var6 - 1] + var1[0][var6]
    for var7 in range(1, var2):
        var5[0] = var4[0] + var1[var7][0]
        for var6 in range(1, var3):
            var5[var6] = var1[var7][var6] + min(var4[var6], var5[var6 - 1])
        var4 = var5[:]
    var8 = ''
    var7, var6 = (var2 - 1, var3 - 1)
    while var7 > 0 or var6 > 0:
        if var7 > 0 and (var6 == 0 or var4[var6] <= var5[var6 - 1]):
            var8 = 'D' + var8
            var7 -= 1
        else:
            var8 = 'R' + var8
            var6 -= 1
    return (var4[var3 - 1], var8)",Turtle
164,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [0] * var3
    for var5 in range(var2):
        var6 = [0] * var3
        var6[0] = var4[0] + var1[var5][0]
        for var7 in range(1, var3):
            var6[var7] = var1[var5][var7] + min(var4[var7], var6[var7 - 1])
        var4 = var6
    var8 = ''
    var5, var7 = (var2 - 1, var3 - 1)
    while var5 > 0 or var7 > 0:
        if var5 > 0 and (var7 == 0 or var4[var7] <= var4[var7 - 1]):
            var8 = 'D' + var8
            var5 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var3 - 1], var8)",Turtle
165,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[(float('inf'), '') for var5 in range(var3)] for var5 in range(var2)]
    var4[0][0] = (var1[0][0], '')
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 > 0:
                var8, var9 = var4[var6 - 1][var7]
                if var8 + var1[var6][var7] < var4[var6][var7][0]:
                    var4[var6][var7] = (var8 + var1[var6][var7], var9 + 'D')
            if var7 > 0:
                var8, var9 = var4[var6][var7 - 1]
                if var8 + var1[var6][var7] < var4[var6][var7][0]:
                    var4[var6][var7] = (var8 + var1[var6][var7], var9 + 'R')
    return var4[var2 - 1][var3 - 1]",Turtle
166,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    def var4(var5, var6):
        if var5 == 0 and var6 == 0:
            return (var1[0][0], '')
        if var5 == 0:
            var7, var8 = var4(var5, var6 - 1)
            return (var7 + var1[var5][var6], var8 + 'R')
        if var6 == 0:
            var7, var8 = var4(var5 - 1, var6)
            return (var7 + var1[var5][var6], var8 + 'D')
        var9, var10 = var4(var5 - 1, var6)
        var11, var12 = var4(var5, var6 - 1)
        if var9 <= var11:
            return (var9 + var1[var5][var6], var10 + 'D')
        else:
            return (var11 + var1[var5][var6], var12 + 'R')
    return var4(var2 - 1, var3 - 1)",Turtle
167,"import functools
def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    @functools.lru_cache(maxsize=None)
    def var4(var5, var6):
        if var5 == 0 and var6 == 0:
            return (var1[0][0], '')
        if var5 < 0 or var6 < 0:
            return (float('inf'), '')
        var7, var8 = var4(var5 - 1, var6)
        var9, var10 = var4(var5, var6 - 1)
        if var7 <= var9:
            return (var7 + var1[var5][var6], var8 + 'D')
        else:
            return (var9 + var1[var5][var6], var10 + 'R')
    return var4(var2 - 1, var3 - 1)",Turtle
168,"import numpy as np
def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = np.zeros((var2, var3), dtype=np.int64)
    var5 = np.empty((var2, var3), dtype=object)
    var4[0, 0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1, var7] if var6 > 0 else np.inf
            var9 = var4[var6, var7 - 1] if var7 > 0 else np.inf
            if var8 <= var9:
                var4[var6, var7] = var8 + var1[var6][var7]
                var5[var6, var7] = (var6 - 1, var7)
            else:
                var4[var6, var7] = var9 + var1[var6][var7]
                var5[var6, var7] = (var6, var7 - 1)
    var10 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        var11, var12 = var5[var6, var7]
        if var11 == var6 - 1:
            var10 = 'D' + var10
        else:
            var10 = 'R' + var10
        var6, var7 = (var11, var12)
    return (var4[var2 - 1, var3 - 1], var10)",Turtle
169,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[(float('inf'), '') for var5 in range(var3)] for var5 in range(var2)]
    var4[0][0] = (var1[0][0], '')
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 > 0 and var4[var6 - 1][var7][0] + var1[var6][var7] < var4[var6][var7][0]:
                var4[var6][var7] = (var4[var6 - 1][var7][0] + var1[var6][var7], var4[var6 - 1][var7][1] + 'D')
            if var7 > 0 and var4[var6][var7 - 1][0] + var1[var6][var7] < var4[var6][var7][0]:
                var4[var6][var7] = (var4[var6][var7 - 1][0] + var1[var6][var7], var4[var6][var7 - 1][1] + 'R')
    return var4[var2 - 1][var3 - 1]",Turtle
170,"import multiprocessing
def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    def var4(var5):
        var6 = [0] * var3
        var6[0] = var1[var5][0] + (var7[0] if var5 > 0 else 0)
        for var8 in range(1, var3):
            var6[var8] = var1[var5][var8] + min(var6[var8 - 1], var7[var8])
        return var6
    with multiprocessing.Pool() as var9:
        var7 = [0] * var3
        for var10 in range(var2):
            var11 = var9.apply_async(var4, (var10,))
            var7 = var11.get()
    var12 = ''
    var10, var8 = (var2 - 1, var3 - 1)
    while var10 > 0 or var8 > 0:
        if var10 > 0 and (var8 == 0 or var7[var8] <= var11[var8 - 1] if var10 > 0 else True):
            var12 = 'D' + var12
            var10 -= 1
        else:
            var12 = 'R' + var12
            var8 -= 1
    return (var7[var3 - 1], var12)",Turtle
171,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    var4 = {}
    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        var12 = var1[var6][var7] + min(var8, var10)
        var13 = 'D' + var9 if var8 < var10 else 'R' + var11
        var4[var6, var7] = (var12, var13)
        return (var12, var13)
    if not var1:
        return (0, '')
    return var5(0, 0)",Turtle
172,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    for var6 in range(1, var2):
        for var7 in range(1, var3):
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7], var4[var6][var7 - 1])
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var10 > 0 and (var4[var9 - 1][var10] < var4[var9][var10 - 1]):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
173,"def var0(var1):
    if not var1:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [0] * var3
    var5 = [0] * var3
    var4[0] = var1[0][0]
    for var6 in range(1, var3):
        var4[var6] = var4[var6 - 1] + var1[0][var6]
    for var7 in range(1, var2):
        var5[0] = var4[0] + var1[var7][0]
        for var6 in range(1, var3):
            var5[var6] = var1[var7][var6] + min(var4[var6], var5[var6 - 1])
        var4, var5 = (var5, var4)
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var10 > 0 and (var4[var10] - var1[var9][var10] < var5[var10 - 1] - var1[var9][var10]):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var3 - 1], var8)",Turtle
174,"def var0(var1):
    if not var1:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    for var4 in range(1, var2):
        var1[var4][0] += var1[var4 - 1][0]
    for var5 in range(1, var3):
        var1[0][var5] += var1[0][var5 - 1]
    for var4 in range(1, var2):
        for var5 in range(1, var3):
            var1[var4][var5] += min(var1[var4 - 1][var5], var1[var4][var5 - 1])
    var6 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 > 0 or var8 > 0:
        if var7 > 0 and var8 > 0 and (var1[var7 - 1][var8] < var1[var7][var8 - 1]):
            var6 = 'D' + var6
            var7 -= 1
        else:
            var6 = 'R' + var6
            var8 -= 1
    return (var1[var2 - 1][var3 - 1], var6)",Turtle
175,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 > 0 and var8 > 0:
                if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                    var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                    var6[var7][var8] = (var7 - 1, var8)
                else:
                    var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                    var6[var7][var8] = (var7, var8 - 1)
            elif var7 == 0 and var8 > 0:
                var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                var6[var7][var8] = (var7, var8 - 1)
            elif var7 > 0 and var8 == 0:
                var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                var6[var7][var8] = (var7 - 1, var8)
    var9 = ''
    var10, var11 = (var2 - 1, var3 - 1)
    while var10 != 0 or var11 != 0:
        if var6[var10][var11] is None:
            break
        var12, var13 = var6[var10][var11]
        if var12 == var10 - 1:
            var9 = 'D' + var9
        else:
            var9 = 'R' + var9
        var10, var11 = (var12, var13)
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
176,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    var4 = (var1[var5][var6] + min(var7[var6], var4[var5 - 1][var6]) if var5 > 0 and var6 > 0 else var1[var5][var6] + var7[var6] if var5 == 0 and var6 > 0 else var1[var5][var6] + var4[var5 - 1][var6] if var5 > 0 and var6 == 0 else var1[var5][var6] for var5 in range(var2) for var6 in range(var3))
    var8 = list(var4)
    var9 = [var8[var5 * var3:(var5 + 1) * var3] for var5 in range(var2)]
    var10 = ''
    var11, var12 = (var2 - 1, var3 - 1)
    while var11 > 0 or var12 > 0:
        if var11 > 0 and var12 > 0 and (var9[var11 - 1][var12] < var9[var11][var12 - 1]):
            var10 = 'D' + var10
            var11 -= 1
        else:
            var10 = 'R' + var10
            var12 -= 1
    return (var9[var2 - 1][var3 - 1], var10)",Turtle
177,"from functools import reduce
def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    if not var1:
        return (0, '')
    var4 = reduce(lambda var5, var6: var5 + [var1[0][var6] + var5[-1] if var6 > 0 else var1[0][var6]], range(var3), [0])
    for var7 in range(1, var2):
        var4 = reduce(lambda var5, var6: var5 + [var1[var7][var6] + min(var4[var6], var5[-1]) if var6 > 0 else var1[var7][var6]], range(var3), [var4[0] + var1[var7][0]])
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var10 > 0 and (var4[var10] - var1[var9][var10] - 1 < var4[var10 - 1] - var1[var9][var10] - 1):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var3 - 1], var8)",Turtle
178,"import numpy as np
def var0(var1):
    var2 = np.array(var1)
    var3, var4 = var2.shape
    var5 = np.zeros((var3, var4), dtype=int)
    var5[0, 0] = var2[0, 0]
    for var6 in range(1, var3):
        var5[var6, 0] = var5[var6 - 1, 0] + var2[var6, 0]
    for var7 in range(1, var4):
        var5[0, var7] = var5[0, var7 - 1] + var2[0, var7]
    for var6 in range(1, var3):
        for var7 in range(1, var4):
            var5[var6, var7] = var2[var6, var7] + min(var5[var6 - 1, var7], var5[var6, var7 - 1])
    var8 = ''
    var9, var10 = (var3 - 1, var4 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var10 > 0 and (var5[var9 - 1, var10] < var5[var9, var10 - 1]):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var5[var3 - 1, var4 - 1], var8)",Turtle
179,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1][var7] if var6 > 0 else float('inf')
            var9 = var4[var6][var7 - 1] if var7 > 0 else float('inf')
            var4[var6][var7] = var1[var6][var7] + min(var8, var9)
            if var4[var6][var7] >= 10 ** 6:
                break
    var10 = ''
    var11, var12 = (var2 - 1, var3 - 1)
    while var11 > 0 or var12 > 0:
        if var11 > 0 and var12 > 0 and (var4[var11 - 1][var12] < var4[var11][var12 - 1]):
            var10 = 'D' + var10
            var11 -= 1
        else:
            var10 = 'R' + var10
            var12 -= 1
    return (var4[var2 - 1][var3 - 1], var10)",Turtle
180,"import multiprocessing
def var0(var1):
    if not var1:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    def var4(var5):
        var6 = [0] * var3
        var6[0] = var1[var5][0] + (var7[0] if var5 > 0 else 0)
        for var8 in range(1, var3):
            var6[var8] = var1[var5][var8] + min(var6[var8 - 1], var7[var8])
        return var6
    with multiprocessing.Pool() as var9:
        var10 = var9.map(var4, range(var2))
    var7 = var10[0]
    for var5 in range(1, len(var10)):
        var7 = var10[var5]
    var11 = ''
    var12, var13 = (var2 - 1, var3 - 1)
    while var12 > 0 or var13 > 0:
        if var12 > 0 and var13 > 0 and (var10[var12 - 1][var13] < var10[var12][var13 - 1]):
            var11 = 'D' + var11
            var12 -= 1
        else:
            var11 = 'R' + var11
            var13 -= 1
    return (var7[var3 - 1], var11)",Turtle
181,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = {}
    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var4[var6, var7] = (var1[var6][var7] + var8, 'D' + var9)
        else:
            var4[var6, var7] = (var1[var6][var7] + var10, 'R' + var11)
        return var4[var6, var7]
    if not var1:
        return (0, '')
    return var5(0, 0)",Turtle
182,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
183,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [''] * var3
    var4[0] = var1[0][0]
    var5[0] = ''
    for var6 in range(1, var3):
        var4[var6] = var4[var6 - 1] + var1[0][var6]
        var5[var6] = 'R' + var5[var6 - 1]
    for var7 in range(1, var2):
        var8 = [0] * var3
        var9 = [''] * var3
        var8[0] = var4[0] + var1[var7][0]
        var9[0] = 'D' + var5[0]
        for var6 in range(1, var3):
            if var4[var6] < var8[var6 - 1]:
                var8[var6] = var4[var6] + var1[var7][var6]
                var9[var6] = 'D' + var5[var6]
            else:
                var8[var6] = var8[var6 - 1] + var1[var7][var6]
                var9[var6] = 'R' + var9[var6 - 1]
        var4 = var8
        var5 = var9
    return (var4[var3 - 1], var5[var3 - 1])",Turtle
184,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 > 0 and var5 > 0:
                var1[var4][var5] += min(var1[var4 - 1][var5], var1[var4][var5 - 1])
            elif var4 > 0:
                var1[var4][var5] += var1[var4 - 1][var5]
            elif var5 > 0:
                var1[var4][var5] += var1[var4][var5 - 1]
    var6 = ''
    var4, var5 = (var2 - 1, var3 - 1)
    while var4 > 0 or var5 > 0:
        if var4 > 0 and var5 > 0 and (var1[var4 - 1][var5] <= var1[var4][var5 - 1]):
            var6 = 'D' + var6
            var4 -= 1
        else:
            var6 = 'R' + var6
            var5 -= 1
    return (var1[var2 - 1][var3 - 1], var6)",Turtle
185,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            if var7 > 0 and var8 > 0:
                if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                    var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                    var6[var7][var8] = (var7 - 1, var8)
                else:
                    var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                    var6[var7][var8] = (var7, var8 - 1)
            elif var7 > 0:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = (var7, var8 - 1)
    var9 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 != 0 or var8 != 0:
        if var6[var7][var8] is None:
            break
        var10, var11 = var6[var7][var8]
        if var10 == var7 - 1:
            var9 = 'D' + var9
        else:
            var9 = 'R' + var9
        var7, var8 = (var10, var11)
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
186,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[float('inf')] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    def var6(var7, var8):
        if var7 == 0 and var8 == 0:
            yield ''
        elif var7 > 0 and var4[var7 - 1][var8] < var4[var7][var8 - 1] if var8 > 0 else True:
            for var9 in var6(var7 - 1, var8):
                yield ('D' + var9)
        elif var8 > 0:
            for var9 in var6(var7, var8 - 1):
                yield ('R' + var9)
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 > 0:
                var4[var7][var8] = min(var4[var7][var8], var4[var7 - 1][var8] + var1[var7][var8])
            if var8 > 0:
                var4[var7][var8] = min(var4[var7][var8], var4[var7][var8 - 1] + var1[var7][var8])
    return (var4[var2 - 1][var3 - 1], next(var6(var2 - 1, var3 - 1)))",Turtle
187,"from functools import reduce
def turtle_dp_reduce(matrix):
    n = len(matrix)
    m = len(matrix[0]) if n > 0 else 0
    if n == 0:
        return 0, """"
    dp = reduce(lambda acc, i: acc + [reduce(lambda row_acc, j: row_acc + [row_acc[-1] + matrix[i][j] if j > 0 else matrix[i][j], []), range(m))], range(n), [[]])
    cost = dp[-1][-1]
    path = """"
    i, j = n - 1, m - 1
    while i > 0 or j > 0:
        if i > 0 and j > 0 and dp[i - 1][-1] <= dp[i][j - 1]:
            path = ""D"" + path
            i -= 1
        else:
            path = ""R"" + path
            j -= 1
    return cost, path",Turtle
188,"import numpy as np
def var0(var1):
    var2 = np.array(var1)
    var3, var4 = var2.shape
    var5 = np.zeros((var3, var4), dtype=int)
    var5[0, 0] = var2[0, 0]
    for var6 in range(var3):
        for var7 in range(var4):
            if var6 > 0 and var7 > 0:
                var5[var6, var7] = var2[var6, var7] + min(var5[var6 - 1, var7], var5[var6, var7 - 1])
            elif var6 > 0:
                var5[var6, var7] = var2[var6, var7] + var5[var6 - 1, var7]
            elif var7 > 0:
                var5[var6, var7] = var2[var6, var7] + var5[var6, var7 - 1]
    var8 = ''
    var6, var7 = (var3 - 1, var4 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and var7 > 0 and (var5[var6 - 1, var7] <= var5[var6, var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var5[var3 - 1, var4 - 1], var8)",Turtle
189,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
190,"import multiprocessing
def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    def var6(var7):
        for var8 in range(var3):
            if var7 > 0:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
            elif var8 > 0:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
    with multiprocessing.Pool() as var9:
        var9.map(var6, range(1, var2))
    for var10 in range(1, var2):
        for var8 in range(1, var3):
            var4[var10][var8] = min(var4[var10 - 1][var8], var4[var10][var8 - 1]) + var1[var10][var8]
    var11 = ''
    var10, var8 = (var2 - 1, var3 - 1)
    while var10 > 0 or var8 > 0:
        if var10 > 0 and var8 > 0 and (var4[var10 - 1][var8] <= var4[var10][var8 - 1]):
            var11 = 'D' + var11
            var10 -= 1
        else:
            var11 = 'R' + var11
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var11)",Turtle
191,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = {}
    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var12 = var1[var6][var7] + var8
            var13 = 'D' + var9
        else:
            var12 = var1[var6][var7] + var10
            var13 = 'R' + var11
        var4[var6, var7] = (var12, var13)
        return (var12, var13)
    if not var1:
        return (0, '')
    return var5(0, 0)",Turtle
192,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
193,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [0] * var3
    var6 = [''] * var3
    var7 = [''] * var3
    var4[0] = var1[0][0]
    var6[0] = ''
    for var8 in range(1, var3):
        var4[var8] = var4[var8 - 1] + var1[0][var8]
        var6[var8] = 'R' + var6[var8 - 1]
    for var9 in range(1, var2):
        var5[0] = var4[0] + var1[var9][0]
        var7[0] = 'D' + var6[0]
        for var8 in range(1, var3):
            if var4[var8] < var5[var8 - 1]:
                var5[var8] = var1[var9][var8] + var4[var8]
                var7[var8] = 'D' + var6[var8]
            else:
                var5[var8] = var1[var9][var8] + var5[var8 - 1]
                var7[var8] = 'R' + var7[var8 - 1]
        var4 = var5[:]
        var6 = var7[:]
    return (var4[var3 - 1], var6[var3 - 1])",Turtle
194,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 == 0 and var5 == 0:
                continue
            var6 = var1[var4 - 1][var5] if var4 > 0 else float('inf')
            var7 = var1[var4][var5 - 1] if var5 > 0 else float('inf')
            var1[var4][var5] += min(var6, var7)
    return (var1[var2 - 1][var3 - 1], '')",Turtle
195,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = (var7 - 1, 0)
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = (0, var8 - 1)
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                var6[var7][var8] = (var7, var8 - 1)
    var9 = ''
    var10 = (var2 - 1, var3 - 1)
    while var10 != (0, 0):
        var11 = var6[var10[0]][var10[1]]
        if var11[0] < var10[0]:
            var9 = 'D' + var9
        else:
            var9 = 'R' + var9
        var10 = var11
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
196,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[float('inf')] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    def var6(var7, var8, var9):
        if var7 == var2 - 1 and var8 == var3 - 1:
            yield (var4[var7][var8], var9)
        else:
            if var7 + 1 < var2:
                var4[var7 + 1][var8] = min(var4[var7 + 1][var8], var4[var7][var8] + var1[var7 + 1][var8])
                yield from var6(var7 + 1, var8, var9 + 'D')
            if var8 + 1 < var3:
                var4[var7][var8 + 1] = min(var4[var7][var8 + 1], var4[var7][var8] + var1[var7][var8 + 1])
                yield from var6(var7, var8 + 1, var9 + 'R')
    if var2 == 0 or var3 == 0:
        return (0, '')
    var10 = float('inf')
    var11 = ''
    for var12, var13 in var6(0, 0, ''):
        if var12 < var10:
            var10, var11 = (var12, var13)
    return (var10, var11)",Turtle
197,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7] if var6 > 0 else float('inf'), var4[var6][var7 - 1] if var7 > 0 else float('inf'))
    return (var4[var2 - 1][var3 - 1], '')",Turtle
198,"import numpy as np
def var0(var1):
    var1 = np.array(var1)
    var2, var3 = var1.shape
    var4 = np.zeros((var2, var3))
    var4[0, 0] = var1[0, 0]
    for var5 in range(1, var2):
        var4[var5, 0] = var4[var5 - 1, 0] + var1[var5, 0]
    for var6 in range(1, var3):
        var4[0, var6] = var4[0, var6 - 1] + var1[0, var6]
    for var5 in range(1, var2):
        for var6 in range(1, var3):
            var4[var5, var6] = var1[var5, var6] + min(var4[var5 - 1, var6], var4[var5, var6 - 1])
    return (int(var4[var2 - 1, var3 - 1]), '')",Turtle
199,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1][var7] if var6 > 0 else float('inf')
            var9 = var4[var6][var7 - 1] if var7 > 0 else float('inf')
            var4[var6][var7] = var1[var6][var7] + min(var8, var9)
            if var4[var6][var7] > 100000:
                return (float('inf'), '')
    return (var4[var2 - 1][var3 - 1], '')",Turtle
200,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0] = list(var7.cumsum(var1[0]))
    var6[0] = ['R' * var8 for var8 in range(var3)]
    for var9 in range(1, var2):
        var4[var9][0] = var4[var9 - 1][0] + var1[var9][0]
        var6[var9][0] = 'D' + var6[var9 - 1][0]
        for var8 in range(1, var3):
            if var4[var9 - 1][var8] < var4[var9][var8 - 1]:
                var4[var9][var8] = var1[var9][var8] + var4[var9 - 1][var8]
                var6[var9][var8] = 'D' + var6[var9 - 1][var8]
            else:
                var4[var9][var8] = var1[var9][var8] + var4[var9][var8 - 1]
                var6[var9][var8] = 'R' + var6[var9][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
201,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = {}
    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6, var7 + 1)
        var10, var11 = var5(var6 + 1, var7)
        var12 = var1[var6][var7] + min(var8, var10)
        var13 = 'R' + var9 if var8 <= var10 else 'D' + var11
        var4[var6, var7] = (var12, var13)
        return (var12, var13)
    return var5(0, 0)",Turtle
202,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 <= var10:
                var4[var7][var8] = var1[var7][var8] + var9
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var1[var7][var8] + var10
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
203,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [0] * var3
    var5 = [0] * var3
    var4[0] = var1[0][0]
    for var6 in range(1, var3):
        var4[var6] = var4[var6 - 1] + var1[0][var6]
    for var7 in range(1, var2):
        var5[0] = var4[0] + var1[var7][0]
        for var6 in range(1, var3):
            var5[var6] = var1[var7][var6] + min(var4[var6], var5[var6 - 1])
        var4 = var5[:]
    return (var4[var3 - 1], '')",Turtle
204,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 == 0 and var5 == 0:
                continue
            var6 = var1[var4 - 1][var5] if var4 > 0 else float('inf')
            var7 = var1[var4][var5 - 1] if var5 > 0 else float('inf')
            var1[var4][var5] += min(var6, var7)
    return (var1[var2 - 1][var3 - 1], '')",Turtle
205,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 <= var10:
                var4[var7][var8] = var1[var7][var8] + var9
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var1[var7][var8] + var10
                var6[var7][var8] = (var7, var8 - 1)
    var11 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 > 0 or var8 > 0:
        if var6[var7][var8] == (var7 - 1, var8):
            var11 = 'D' + var11
        else:
            var11 = 'R' + var11
        var7, var8 = var6[var7][var8]
    return (var4[var2 - 1][var3 - 1], var11)",Turtle
206,"def var0(var1):
    def var2(var3, var4):
        if var3 == 0 and var4 == 0:
            yield (var1[0][0], '')
        elif var3 == 0:
            var5, var6 = (yield from var2(var3, var4 - 1))
            yield (var1[var3][var4] + var5, 'R' + var6)
        elif var4 == 0:
            var5, var6 = (yield from var2(var3 - 1, var4))
            yield (var1[var3][var4] + var5, 'D' + var6)
        else:
            var7, var8 = (yield from var2(var3 - 1, var4))
            var9, var10 = (yield from var2(var3, var4 - 1))
            if var7 <= var9:
                yield (var1[var3][var4] + var7, 'D' + var8)
            else:
                yield (var1[var3][var4] + var9, 'R' + var10)
    if not var1 or not var1[0]:
        return (0, '')
    else:
        var11, var12 = next(var2(len(var1) - 1, len(var1[0]) - 1))
        return (var11, var12)",Turtle
207,"from functools import reduce
def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7] if var6 > 0 else float('inf'), var4[var6][var7 - 1] if var7 > 0 else float('inf'))
    var8 = [[''] * var3 for var5 in range(var2)]
    def var9(var10, var11):
        if var10 == 0 and var11 == 0:
            return ''
        elif var10 == 0:
            return 'R' + var9(var10, var11 - 1)
        elif var11 == 0:
            return 'D' + var9(var10 - 1, var11)
        elif var4[var10 - 1][var11] <= var4[var10][var11 - 1]:
            return 'D' + var9(var10 - 1, var11)
        else:
            return 'R' + var9(var10, var11 - 1)
    return (var4[var2 - 1][var3 - 1], var9(var2 - 1, var3 - 1))",Turtle
208,"import numpy as np
def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2 = np.array(var1)
    var3, var4 = var2.shape
    var5 = np.zeros((var3, var4))
    var5[0, 0] = var2[0, 0]
    for var6 in range(var3):
        for var7 in range(var4):
            if var6 == 0 and var7 == 0:
                continue
            var5[var6, var7] = var2[var6, var7] + np.min([var5[var6 - 1, var7] if var6 > 0 else np.inf, var5[var6, var7 - 1] if var7 > 0 else np.inf])
    return (var5[var3 - 1, var4 - 1], '')",Turtle
209,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1][var7] if var6 > 0 else float('inf')
            var9 = var4[var6][var7 - 1] if var7 > 0 else float('inf')
            if var8 < var9:
                var4[var6][var7] = var1[var6][var7] + var8
            else:
                var4[var6][var7] = var1[var6][var7] + var9
    return (var4[var2 - 1][var3 - 1], '')",Turtle
210,"import multiprocessing
def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1][var7] if var6 > 0 else float('inf')
            var9 = var4[var6][var7 - 1] if var7 > 0 else float('inf')
            var4[var6][var7] = var1[var6][var7] + min(var8, var9)
    return (var4[var2 - 1][var3 - 1], '')",Turtle
211,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = {}
    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var12 = (var1[var6][var7] + var8, 'D' + var9)
        else:
            var12 = (var1[var6][var7] + var10, 'R' + var11)
        var4[var6, var7] = var12
        return var12
    if var2 == 0 or var3 == 0:
        return (0, '')
    return var5(0, 0)",Turtle
212,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    for var6 in range(1, var2):
        for var7 in range(1, var3):
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7], var4[var6][var7 - 1])
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var4[var9 - 1][var10] <= var4[var9][var10 - 1] if var10 > 0 else True:
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
213,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [0] * var3
    var4[0] = var1[0][0]
    for var5 in range(1, var3):
        var4[var5] = var4[var5 - 1] + var1[0][var5]
    for var6 in range(1, var2):
        var7 = [0] * var3
        var7[0] = var4[0] + var1[var6][0]
        for var5 in range(1, var3):
            var7[var5] = var1[var6][var5] + min(var4[var5], var7[var5 - 1])
        var4 = var7
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and (var10 == 0 or var4[var10 - 1] >= var4[var10]):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var3 - 1], var8)",Turtle
214,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    for var4 in range(1, var2):
        var1[var4][0] += var1[var4 - 1][0]
    for var5 in range(1, var3):
        var1[0][var5] += var1[0][var5 - 1]
    for var4 in range(1, var2):
        for var5 in range(1, var3):
            var1[var4][var5] += min(var1[var4 - 1][var5], var1[var4][var5 - 1])
    var6 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 > 0 or var8 > 0:
        if var7 > 0 and var1[var7 - 1][var8] <= var1[var7][var8 - 1] if var8 > 0 else True:
            var6 = 'D' + var6
            var7 -= 1
        else:
            var6 = 'R' + var6
            var8 -= 1
    return (var1[var2 - 1][var3 - 1], var6)",Turtle
215,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 < var10:
                var4[var7][var8] = var1[var7][var8] + var9
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var1[var7][var8] + var10
                var6[var7][var8] = (var7, var8 - 1)
    var11 = ''
    var12, var13 = (var2 - 1, var3 - 1)
    while var12 != 0 or var13 != 0:
        var14, var15 = var6[var12][var13]
        if var14 == var12 - 1:
            var11 = 'D' + var11
        else:
            var11 = 'R' + var11
        var12, var13 = (var14, var15)
    return (var4[var2 - 1][var3 - 1], var11)",Turtle
216,"def var0(var1):
    def var2(var3, var4):
        if var3 == len(var1) - 1 and var4 == len(var1[0]) - 1:
            yield (var1[var3][var4], '')
        elif var3 >= len(var1) or var4 >= len(var1[0]):
            yield (float('inf'), '')
        else:
            var5, var6 = next(var2(var3 + 1, var4))
            var7, var8 = next(var2(var3, var4 + 1))
            if var5 < var7:
                yield (var1[var3][var4] + var5, 'D' + var6)
            else:
                yield (var1[var3][var4] + var7, 'R' + var8)
    if not var1 or var1[0] == []:
        return (0, '')
    return next(var2(0, 0))",Turtle
217,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = reduce(lambda var5, var6: var5 + [[0] * var3], range(var2), [])
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 > 0 and var7 > 0:
                var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7], var4[var6][var7 - 1])
            elif var6 > 0:
                var4[var6][var7] = var1[var6][var7] + var4[var6 - 1][var7]
            elif var7 > 0:
                var4[var6][var7] = var1[var6][var7] + var4[var6][var7 - 1]
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and (var10 == 0 or var4[var9 - 1][var10] <= var4[var9][var10 - 1]):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
218,"import numpy as np
def var0(var1):
    var1 = np.array(var1)
    var2, var3 = var1.shape
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = np.zeros((var2, var3), dtype=int)
    var4[0, 0] = var1[0, 0]
    for var5 in range(1, var2):
        var4[var5, 0] = var4[var5 - 1, 0] + var1[var5, 0]
    for var6 in range(1, var3):
        var4[0, var6] = var4[0, var6 - 1] + var1[0, var6]
    for var5 in range(1, var2):
        for var6 in range(1, var3):
            var4[var5, var6] = var1[var5, var6] + np.min([var4[var5 - 1, var6], var4[var5, var6 - 1]])
    var7 = ''
    var8, var9 = (var2 - 1, var3 - 1)
    while var8 > 0 or var9 > 0:
        if var8 > 0 and (var9 == 0 or var4[var8 - 1, var9] <= var4[var8, var9 - 1]):
            var7 = 'D' + var7
            var8 -= 1
        else:
            var7 = 'R' + var7
            var9 -= 1
    return (int(var4[var2 - 1, var3 - 1]), var7)",Turtle
219,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    for var6 in range(1, var2):
        for var7 in range(1, var3):
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7], var4[var6][var7 - 1])
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var4[var9 - 1][var10] <= var4[var9][var10 - 1] if var10 > 0 else True:
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
220,"import multiprocessing
def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    def var8(var6):
        var9 = [0] * var3
        var9[0] = var4[var6][0] + var1[var6][0]
        for var7 in range(1, var3):
            var9[var7] = var1[var6][var7] + min(var4[var6][var7 - 1], var4[var6 - 1][var7] if var6 > 0 else float('inf'))
        return var9
    with multiprocessing.Pool() as var10:
        var11 = var10.map(var8, range(1, var2))
    for var6, var12 in enumerate(var11):
        var4[var6 + 1] = var12
    var13 = ''
    var12, var14 = (var2 - 1, var3 - 1)
    while var12 > 0 or var14 > 0:
        if var12 > 0 and (var14 == 0 or var4[var12 - 1][var14] <= var4[var12][var14 - 1]):
            var13 = 'D' + var13
            var12 -= 1
        else:
            var13 = 'R' + var13
            var14 -= 1
    return (var4[var2 - 1][var3 - 1], var13)",Turtle
221,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = {}
    def var5(var6, var7):
        if (var6, var7) == (var2 - 1, var3 - 1):
            return (var1[var6][var7], '')
        if (var6, var7) in var4:
            return var4[var6, var7]
        var8 = float('inf')
        var9 = ''
        if var6 + 1 < var2:
            var10, var11 = var5(var6 + 1, var7)
            if var1[var6][var7] + var10 < var8:
                var8 = var1[var6][var7] + var10
                var9 = 'D' + var11
        if var7 + 1 < var3:
            var12, var13 = var5(var6, var7 + 1)
            if var1[var6][var7] + var12 < var8:
                var8 = var1[var6][var7] + var12
                var9 = 'R' + var13
        var4[var6, var7] = (var8, var9)
        return (var8, var9)
    return var5(0, 0)",Turtle
222,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1][var7] if var6 > 0 else float('inf')
            var9 = var4[var6][var7 - 1] if var7 > 0 else float('inf')
            var4[var6][var7] = var1[var6][var7] + min(var8, var9)
    var10 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var4[var6 - 1][var7] <= var4[var6][var7 - 1]):
            var10 = 'D' + var10
            var6 -= 1
        else:
            var10 = 'R' + var10
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var10)",Turtle
223,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [0] * var3
    for var5 in range(var2):
        var6 = [0] * var3
        for var7 in range(var3):
            if var5 == 0 and var7 == 0:
                var6[var7] = var1[var5][var7]
            elif var5 == 0:
                var6[var7] = var1[var5][var7] + var4[var7 - 1] if var7 > 0 else var1[var5][var7]
            elif var7 == 0:
                var6[var7] = var1[var5][var7] + var6[var7] if var5 > 0 else var1[var5][var7]
            else:
                var6[var7] = var1[var5][var7] + min(var4[var7], var6[var7 - 1])
        var4 = var6
    var8 = ''
    var5, var7 = (var2 - 1, var3 - 1)
    while var5 > 0 or var7 > 0:
        if var5 > 0 and (var7 == 0 or var4[var7] <= var4[var7 - 1] if var7 > 0 else True):
            var8 = 'D' + var8
            var5 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var3 - 1], var8)",Turtle
224,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[(float('inf'), '') for var5 in range(var3)] for var5 in range(var2)]
    var4[0][0] = (var1[0][0], '')
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 + 1 < var2:
                var8 = var4[var6][var7][0] + var1[var6 + 1][var7]
                if var8 < var4[var6 + 1][var7][0]:
                    var4[var6 + 1][var7] = (var8, var4[var6][var7][1] + 'D')
            if var7 + 1 < var3:
                var8 = var4[var6][var7][0] + var1[var6][var7 + 1]
                if var8 < var4[var6][var7 + 1][0]:
                    var4[var6][var7 + 1] = (var8, var4[var6][var7][1] + 'R')
    return var4[var2 - 1][var3 - 1]",Turtle
225,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0])
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            if var7 > 0 and var8 > 0:
                if var4[var7 - 1][var8] <= var4[var7][var8 - 1]:
                    var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                    var6[var7][var8] = 'D'
                else:
                    var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                    var6[var7][var8] = 'R'
            elif var7 > 0:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D'
            elif var8 > 0:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R'
    var9 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 > 0 or var8 > 0:
        var9 = var6[var7][var8] + var9
        if var6[var7][var8] == 'D':
            var7 -= 1
        else:
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
226,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0])
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var4[var6][var7] = float('inf')
            if var6 > 0:
                var4[var6][var7] = min(var4[var6][var7], var4[var6 - 1][var7] + var1[var6][var7])
            if var7 > 0:
                var4[var6][var7] = min(var4[var6][var7], var4[var6][var7 - 1] + var1[var6][var7])
    var8 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and var4[var6][var7] == var4[var6 - 1][var7] + var1[var6][var7]:
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
227,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]))
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [float('inf')] * var3
    var4[0] = var1[0][0]
    for var5 in range(1, var2):
        var6 = [float('inf')] * var3
        for var7 in range(var3):
            var6[var7] = var1[var5][var7] + min(var4[var7] if var7 == 0 else var4[var7 - 1], var4[var7])
        var4 = var6
    var8 = ''
    var5, var7 = (var2 - 1, var3 - 1)
    while var5 > 0 or var7 > 0:
        if var5 > 0 and var4[var7] == var1[var5][var7] + var4[var7]:
            var8 = 'D' + var8
            var5 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var3 - 1], var8)",Turtle
228,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0])
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [(0, '') for var5 in range(var3)]
    var4[0] = (var1[0][0], '')
    for var6 in range(1, var2):
        var7 = [(0, '') for var5 in range(var3)]
        var7[0] = (var1[var6][0] + var4[0][0], 'D' + var4[0][1])
        for var8 in range(1, var3):
            var9, var10 = var4[var8]
            var11, var12 = (var1[var6][var8] + var7[var8 - 1][0], 'R' + var7[var8 - 1][1])
            if var9 <= var11:
                var7[var8] = (var9, 'D' + var4[var8][1])
            else:
                var7[var8] = (var11, var12)
        var4 = var7
    return var4[var3 - 1]",Turtle
229,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0])
    var4 = [[0 for var5 in range(var3)] for var5 in range(var2)]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                var4[var6][var7] = var1[var6][var7]
            elif var6 == 0:
                var4[var6][var7] = var4[var6][var7 - 1] + var1[var6][var7]
            elif var7 == 0:
                var4[var6][var7] = var4[var6 - 1][var7] + var1[var6][var7]
            else:
                var4[var6][var7] = min(var4[var6 - 1][var7], var4[var6][var7 - 1]) + var1[var6][var7]
    var8 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and var7 > 0 and (var4[var6 - 1][var7] <= var4[var6][var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
230,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[(float('inf'), '') for var5 in range(var3)] for var5 in range(var2)]
    var4[0][0] = (var1[0][0], '')
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 + 1 < var2:
                if var4[var6 + 1][var7][0] > var4[var6][var7][0] + var1[var6 + 1][var7]:
                    var4[var6 + 1][var7] = (var4[var6][var7][0] + var1[var6 + 1][var7], var4[var6][var7][1] + 'D')
            if var7 + 1 < var3:
                if var4[var6][var7 + 1][0] > var4[var6][var7][0] + var1[var6][var7 + 1]:
                    var4[var6][var7 + 1] = (var4[var6][var7][0] + var1[var6][var7 + 1], var4[var6][var7][1] + 'R')
    return var4[var2 - 1][var3 - 1]",Turtle
231,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    var4 = {}
    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var4[var6, var7] = (var1[var6][var7] + var8, 'D' + var9)
            return (var1[var6][var7] + var8, 'D' + var9)
        else:
            var4[var6, var7] = (var1[var6][var7] + var10, 'R' + var11)
            return (var1[var6][var7] + var10, 'R' + var11)
    if not var1 or not var1[0]:
        return (0, '')
    return var5(0, 0)",Turtle
232,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
233,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [''] * var3
    for var6 in range(var3):
        var4[var6] = var1[0][var6]
        var5[var6] = 'R' * var6
    for var7 in range(1, var2):
        var8 = [0] * var3
        var9 = [''] * var3
        var8[0] = var4[0] + var1[var7][0]
        var9[0] = 'D' + var5[0]
        for var6 in range(1, var3):
            if var4[var6] < var8[var6 - 1]:
                var8[var6] = var4[var6] + var1[var7][var6]
                var9[var6] = 'D' + var5[var6]
            else:
                var8[var6] = var8[var6 - 1] + var1[var7][var6]
                var9[var6] = 'R' + var9[var6 - 1]
        var4 = var8
        var5 = var9
    return (var4[var3 - 1], var5[var3 - 1])",Turtle
234,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 == 0 and var5 == 0:
                continue
            var6 = var1[var4 - 1][var5] if var4 > 0 else float('inf')
            var7 = var1[var4][var5 - 1] if var5 > 0 else float('inf')
            var1[var4][var5] += min(var6, var7)
    var8 = ''
    var4, var5 = (var2 - 1, var3 - 1)
    while var4 > 0 or var5 > 0:
        if var4 > 0 and (var5 == 0 or var1[var4 - 1][var5] <= var1[var4][var5 - 1]):
            var8 = 'D' + var8
            var4 -= 1
        else:
            var8 = 'R' + var8
            var5 -= 1
    return (var1[var2 - 1][var3 - 1], var8)",Turtle
235,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[(None, None)] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = (var7 - 1, 0)
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = (0, var8 - 1)
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = (var7, var8 - 1)
    var9 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 != 0 or var8 != 0:
        var10, var11 = var6[var7][var8]
        if var10 == var7 - 1:
            var9 = 'D' + var9
        else:
            var9 = 'R' + var9
        var7, var8 = (var10, var11)
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
236,"def var0(var1):
    def var2(var3, var4):
        if var3 == len(var1) - 1 and var4 == len(var1[0]) - 1:
            yield ''
        elif var3 >= len(var1) or var4 >= len(var1[0]):
            return
        else:
            if var3 + 1 < len(var1) and (var4 == len(var1[0]) - 1 or var1[var3 + 1][var4] <= var1[var3][var4 + 1]):
                for var5 in var2(var3 + 1, var4):
                    yield ('D' + var5)
            if var4 + 1 < len(var1[0]):
                for var5 in var2(var3, var4 + 1):
                    yield ('R' + var5)
    def var6(var1):
        var7 = float('inf')
        var8 = None
        for var9 in var2(0, 0):
            var10 = sum((var1[var11][var12] for var11, var12 in zip(range(len(var1)), [0] * len(var1)) if 'R' not in var9 and 'D' not in var9))
            var10 = 0
            var13, var14 = (0, 0)
            for var15 in var9:
                var10 += var1[var13][var14]
                if var15 == 'D':
                    var13 += 1
                else:
                    var14 += 1
            var10 += var1[len(var1) - 1][len(var1[0]) - 1]
            if var10 < var7:
                var7 = var10
                var8 = var9
        return (var7, var8)
    if not var1 or not var1[0]:
        return (0, '')
    return var6(var1)",Turtle
237,"from functools import reduce
def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = reduce(lambda var5, var6: var5 + [[0] * var3], range(var2), [])
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7] if var6 > 0 else float('inf'), var4[var6][var7 - 1] if var7 > 0 else float('inf'))
    var8 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var4[var6 - 1][var7] <= var4[var6][var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
238,"import numpy as np
def var0(var1):
    var2 = np.array(var1)
    var3, var4 = var2.shape
    var5 = np.zeros((var3, var4), dtype=int)
    var5[0, 0] = var2[0, 0]
    for var6 in range(1, var3):
        var5[var6, 0] = var5[var6 - 1, 0] + var2[var6, 0]
    for var7 in range(1, var4):
        var5[0, var7] = var5[0, var7 - 1] + var2[0, var7]
    for var6 in range(1, var3):
        for var7 in range(1, var4):
            var5[var6, var7] = var2[var6, var7] + min(var5[var6 - 1, var7], var5[var6, var7 - 1])
    var8 = ''
    var6, var7 = (var3 - 1, var4 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var5[var6 - 1, var7] <= var5[var6, var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var5[var3 - 1, var4 - 1], var8)",Turtle
239,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    for var6 in range(1, var2):
        for var7 in range(1, var3):
            var4[var6][var7] = min(var4[var6 - 1][var7], var4[var6][var7 - 1]) + var1[var6][var7]
    var8 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and var4[var6 - 1][var7] <= var4[var6][var7 - 1]:
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
240,"import concurrent.futures
def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    with concurrent.futures.ThreadPoolExecutor() as var8:
        var9 = []
        for var6 in range(1, var2):
            for var7 in range(1, var3):
                var9.append(var8.submit(var10, var1, var4, var6, var7))
        concurrent.futures.wait(var9)
    var11 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var4[var6 - 1][var7] <= var4[var6][var7 - 1]):
            var11 = 'D' + var11
            var6 -= 1
        else:
            var11 = 'R' + var11
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var11)
def var10(var1, var4, var6, var7):
    var4[var6][var7] = min(var4[var6 - 1][var7], var4[var6][var7 - 1]) + var1[var6][var7]",Turtle
241,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = {}
    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var4[var6, var7] = (var1[var6][var7] + var8, 'D' + var9)
        else:
            var4[var6, var7] = (var1[var6][var7] + var10, 'R' + var11)
        return var4[var6, var7]
    if not var1:
        return (0, '')
    return var5(0, 0)",Turtle
242,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
243,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [''] * var3
    var4[0] = var1[0][0]
    for var6 in range(1, var3):
        var4[var6] = var4[var6 - 1] + var1[0][var6]
        var5[var6] = 'R' + var5[var6 - 1]
    for var7 in range(1, var2):
        var8 = [0] * var3
        var9 = [''] * var3
        var8[0] = var4[0] + var1[var7][0]
        var9[0] = 'D' + var5[0]
        for var6 in range(1, var3):
            if var4[var6] < var8[var6 - 1]:
                var8[var6] = var4[var6] + var1[var7][var6]
                var9[var6] = 'D' + var5[var6]
            else:
                var8[var6] = var8[var6 - 1] + var1[var7][var6]
                var9[var6] = 'R' + var9[var6 - 1]
        var4 = var8
        var5 = var9
    return (var4[var3 - 1], var5[var3 - 1])",Turtle
244,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 == 0 and var5 == 0:
                continue
            var6 = var1[var4 - 1][var5] if var4 > 0 else float('inf')
            var7 = var1[var4][var5 - 1] if var5 > 0 else float('inf')
            var1[var4][var5] += min(var6, var7)
    var8 = var1[var2 - 1][var3 - 1]
    var9 = ''
    var4, var5 = (var2 - 1, var3 - 1)
    while var4 > 0 or var5 > 0:
        if var4 > 0 and var5 > 0:
            if var1[var4 - 1][var5] < var1[var4][var5 - 1]:
                var9 = 'D' + var9
                var4 -= 1
            else:
                var9 = 'R' + var9
                var5 -= 1
        elif var4 > 0:
            var9 = 'D' + var9
            var4 -= 1
        else:
            var9 = 'R' + var9
            var5 -= 1
    return (var8, var9)",Turtle
245,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 < var10:
                var4[var7][var8] = var9 + var1[var7][var8]
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var10 + var1[var7][var8]
                var6[var7][var8] = (var7, var8 - 1)
    var11 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 != 0 or var8 != 0:
        if var6[var7][var8] is None:
            break
        var12, var13 = var6[var7][var8]
        if var12 == var7 - 1:
            var11 = 'D' + var11
        else:
            var11 = 'R' + var11
        var7, var8 = (var12, var13)
    return (var4[var2 - 1][var3 - 1], var11)",Turtle
246,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    def var4(var5, var6):
        if var5 == var2 - 1 and var6 == var3 - 1:
            yield ''
        elif var5 + 1 < var2 and var6 + 1 < var3:
            if var1[var5 + 1][var6] < var1[var5][var6 + 1]:
                yield 'D'
                for var7 in var4(var5 + 1, var6):
                    yield ('D' + var7)
            else:
                yield 'R'
                for var7 in var4(var5, var6 + 1):
                    yield ('R' + var7)
        elif var5 + 1 < var2:
            yield 'D'
            for var7 in var4(var5 + 1, var6):
                yield ('D' + var7)
        elif var6 + 1 < var3:
            yield 'R'
            for var7 in var4(var5, var6 + 1):
                yield ('R' + var7)
    if not var1:
        return (0, '')
    var8 = float('inf')
    var9 = ''
    for var10 in var4(0, 0):
        var11 = 0
        var12, var13 = (0, 0)
        for var14 in var10:
            var11 += var1[var12][var13]
            if var14 == 'D':
                var12 += 1
            else:
                var13 += 1
        var11 += var1[var2 - 1][var3 - 1]
        if var11 < var8:
            var8 = var11
            var9 = var10
    return (var8, var9)",Turtle
247,"from functools import reduce
def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    var4 = reduce(lambda var5, var6: var5 + [reduce(lambda var7, var8: var7 + [var1[var6][var8] + (var5[var8 - 1] if var8 > 0 else 0) if var6 == 0 else var1[var6][var8] + min(var5[var8] if var8 > 0 else float('inf'), var5[var8 - 1] if var8 > 0 else float('inf'))], [], range(var3))], [], range(var2))
    var9 = var4[-1][-1]
    var10 = ''
    var6, var8 = (var2 - 1, var3 - 1)
    while var6 > 0 or var8 > 0:
        if var6 > 0 and var8 > 0:
            if var1[var6 - 1][var8] < var1[var6][var8 - 1]:
                var10 = 'D' + var10
                var6 -= 1
            else:
                var10 = 'R' + var10
                var8 -= 1
        elif var6 > 0:
            var10 = 'D' + var10
            var6 -= 1
        else:
            var10 = 'R' + var10
            var8 -= 1
    return (var9, var10)",Turtle
248,"import numpy as np
def var0(var1):
    var2 = np.array(var1)
    var3, var4 = var2.shape
    var5 = np.zeros((var3, var4), dtype=int)
    var5[0, 0] = var2[0, 0]
    for var6 in range(1, var3):
        var5[var6, 0] = var5[var6 - 1, 0] + var2[var6, 0]
    for var7 in range(1, var4):
        var5[0, var7] = var5[0, var7 - 1] + var2[0, var7]
    for var6 in range(1, var3):
        for var7 in range(1, var4):
            var5[var6, var7] = var2[var6, var7] + min(var5[var6 - 1, var7], var5[var6, var7 - 1])
    var8 = ''
    var6, var7 = (var3 - 1, var4 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and var7 > 0:
            if var5[var6 - 1, var7] < var5[var6, var7 - 1]:
                var8 = 'D' + var8
                var6 -= 1
            else:
                var8 = 'R' + var8
                var7 -= 1
        elif var6 > 0:
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var5[var3 - 1, var4 - 1], var8)",Turtle
249,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
250,"import multiprocessing
def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
        var6[0][var7] = 'R' + var6[0][var7 - 1]
    def var8(var9):
        var4[var9][0] = var4[var9 - 1][0] + var1[var9][0]
        var6[var9][0] = 'D' + var6[var9 - 1][0]
        for var7 in range(1, var3):
            if var4[var9 - 1][var7] < var4[var9][var7 - 1]:
                var4[var9][var7] = var4[var9 - 1][var7] + var1[var9][var7]
                var6[var9][var7] = 'D' + var6[var9 - 1][var7]
            else:
                var4[var9][var7] = var4[var9][var7 - 1] + var1[var9][var7]
                var6[var9][var7] = 'R' + var6[var9][var7 - 1]
    with multiprocessing.Pool() as var10:
        var10.map(var8, range(1, var2))
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
251,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
252,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = {}
var5 = {}
def var6(var7, var8):
    if (var7, var8) in var4:
        return var4[var7, var8]
    if var7 == 0 and var8 == 0:
        return var2[0][0]
    if var7 < 0 or var8 < 0:
        return float('-inf')
    var9 = var6(var7 - 1, var8)
    var10 = var6(var7, var8 - 1)
    if var9 > var10:
        var4[var7, var8] = var9 + var2[var7][var8]
        var5[var7, var8] = 'D'
    else:
        var4[var7, var8] = var10 + var2[var7][var8]
        var5[var7, var8] = 'R'
    return var4[var7, var8]
var11 = var6(var0 - 1, var1 - 1)
var12 = ''
var13, var14 = (var0 - 1, var1 - 1)
while var13 > 0 or var14 > 0:
    var12 = var5[var13, var14] + var12
    if var5[var13, var14] == 'D':
        var13 -= 1
    else:
        var14 -= 1",Turtle
253,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = 'D'
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = 'R'
var10 = ''
var6, var7 = (var0 - 1, var1 - 1)
while var6 > 0 or var7 > 0:
    var10 = var5[var6][var7] + var10
    if var5[var6][var7] == 'D':
        var6 -= 1
    else:
        var7 -= 1",Turtle
254,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var1)]
var4 = [[0] * var0 for var3 in range(var1)]
var5 = [[''] * var0 for var3 in range(var1)]
var4[0][0] = var2[0][0]
for var6 in range(1, var1):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var0):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var1):
    for var7 in range(1, var0):
        if var4[var6 - 1][var7] >= var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
255,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = 'R'
var8 = ''
var6, var7 = (var0 - 1, var1 - 1)
while var6 > 0 or var7 > 0:
    var8 = var5[var6][var7] + var8
    if var5[var6][var7] == 'D':
        var6 -= 1
    else:
        var7 -= 1",Turtle
256,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
257,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
258,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
259,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
260,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
261,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
262,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = {}
def var5(var6, var7):
    if (var6, var7) in var4:
        return var4[var6, var7]
    if var6 == 0 and var7 == 0:
        return var2[var6][var7]
    if var6 < 0 or var7 < 0:
        return float('-inf')
    var8 = var5(var6 - 1, var7)
    var9 = var5(var6, var7 - 1)
    var4[var6, var7] = var2[var6][var7] + max(var8, var9)
    return var4[var6, var7]
var10 = var5(var0 - 1, var1 - 1)",Turtle
263,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var5 in range(var0):
    for var6 in range(var1):
        if var5 == 0 and var6 == 0:
            continue
        var7 = float('-inf')
        if var5 > 0:
            var7 = max(var7, var4[var5 - 1][var6])
        if var6 > 0:
            var7 = max(var7, var4[var5][var6 - 1])
        var4[var5][var6] = var2[var5][var6] + var7",Turtle
264,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0 for var3 in range(var1)] for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var5 in range(var0):
    for var6 in range(var1):
        if var5 == 0 and var6 == 0:
            continue
        var7 = var4[var5 - 1][var6] if var5 > 0 else float('-inf')
        var8 = var4[var5][var6 - 1] if var6 > 0 else float('-inf')
        var4[var5][var6] = var2[var5][var6] + max(var7, var8)",Turtle
265,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0 for var3 in range(var1)] for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var5 in range(var0):
    for var6 in range(var1):
        if var5 == 0 and var6 == 0:
            continue
        var7 = var4[var5 - 1][var6] if var5 > 0 else float('-inf')
        var8 = var4[var5][var6 - 1] if var6 > 0 else float('-inf')
        var4[var5][var6] = var2[var5][var6] + max(var7, var8)",Turtle
266,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var5 in range(var0):
    for var6 in range(var1):
        if var5 == 0 and var6 == 0:
            continue
        var7 = var4[var5 - 1][var6] if var5 > 0 else float('-inf')
        var8 = var4[var5][var6 - 1] if var6 > 0 else float('-inf')
        var4[var5][var6] = var2[var5][var6] + max(var7, var8)",Turtle
267,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var5 in range(var0):
    for var6 in range(var1):
        if var5 == 0 and var6 == 0:
            continue
        var7 = var4[var5 - 1][var6] if var5 > 0 else float('-inf')
        var8 = var4[var5][var6 - 1] if var6 > 0 else float('-inf')
        var4[var5][var6] = var2[var5][var6] + max(var7, var8)",Turtle
268,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = {}
def var5(var6, var7):
    if (var6, var7) in var4:
        return var4[var6, var7]
    if var6 == 0 and var7 == 0:
        return var2[var6][var7]
    if var6 < 0 or var7 < 0:
        return float('-inf')
    var8 = var5(var6 - 1, var7)
    var9 = var5(var6, var7 - 1)
    var4[var6, var7] = var2[var6][var7] + max(var8, var9)
    return var4[var6, var7]
var10 = var5(var0 - 1, var1 - 1)",Turtle
269,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0 for var3 in range(var1)] for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var5 in range(var0):
    for var6 in range(var1):
        if var5 == 0 and var6 == 0:
            continue
        var7 = float('-inf')
        if var5 > 0:
            var7 = max(var7, var4[var5 - 1][var6])
        if var6 > 0:
            var7 = max(var7, var4[var5][var6 - 1])
        var4[var5][var6] = var2[var5][var6] + var7",Turtle
270,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var5 in range(var0):
    for var6 in range(var1):
        if var5 == 0 and var6 == 0:
            continue
        var7 = var4[var5 - 1][var6] if var5 > 0 else float('-inf')
        var8 = var4[var5][var6 - 1] if var6 > 0 else float('-inf')
        var4[var5][var6] = var2[var5][var6] + max(var7, var8)",Turtle
271,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
272,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 >= var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
273,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else -float('inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else -float('inf')
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
274,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 >= var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
275,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
276,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
277,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 >= var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
278,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else -float('inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else -float('inf')
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
279,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
280,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = '0,0'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + '->' + str(var6) + ',' + str(var7)
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + '->' + str(var6) + ',' + str(var7)",Turtle
281,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
282,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = {}
var5 = {}
def var6(var7, var8):
    if (var7, var8) in var4:
        return var4[var7, var8]
    if var7 == 0 and var8 == 0:
        return var2[var7][var8]
    var9 = 0
    var10 = 0
    if var7 > 0:
        var9 = var6(var7 - 1, var8)
    if var8 > 0:
        var10 = var6(var7, var8 - 1)
    if var9 > var10:
        var4[var7, var8] = var2[var7][var8] + var9
        var5[var7, var8] = 'D'
    else:
        var4[var7, var8] = var2[var7][var8] + var10
        var5[var7, var8] = 'R'
    return var4[var7, var8]
var11 = var6(var0 - 1, var1 - 1)
var12 = ''
var7, var8 = (var0 - 1, var1 - 1)
while var7 > 0 or var8 > 0:
    var12 = var5[var7, var8] + var12
    if var5[var7, var8] == 'D':
        var7 -= 1
    else:
        var8 -= 1",Turtle
283,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] >= var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
284,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
285,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0 for var3 in range(var1)] for var3 in range(var0)]
var5 = [['' for var3 in range(var1)] for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] >= var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
286,"var0, var1 = map(int, input().split())
var2 = [[int(var3) for var3 in input().split()] for var4 in range(var0)]
var5 = [[0] * var1 for var4 in range(var0)]
var6 = [[''] * var1 for var4 in range(var0)]
var5[0][0] = var2[0][0]
for var7 in range(1, var0):
    var5[var7][0] = var5[var7 - 1][0] + var2[var7][0]
    var6[var7][0] = var6[var7 - 1][0] + 'D'
for var8 in range(1, var1):
    var5[0][var8] = var5[0][var8 - 1] + var2[0][var8]
    var6[0][var8] = var6[0][var8 - 1] + 'R'
for var7 in range(1, var0):
    for var8 in range(1, var1):
        if var5[var7 - 1][var8] > var5[var7][var8 - 1]:
            var5[var7][var8] = var5[var7 - 1][var8] + var2[var7][var8]
            var6[var7][var8] = var6[var7 - 1][var8] + 'D'
        else:
            var5[var7][var8] = var5[var7][var8 - 1] + var2[var7][var8]
            var6[var7][var8] = var6[var7][var8 - 1] + 'R'",Turtle
287,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
288,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] >= var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
289,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] > var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
290,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
for var6 in range(1, var0):
    var4[var6][0] = var4[var6 - 1][0] + var2[var6][0]
    var5[var6][0] = var5[var6 - 1][0] + 'D'
for var7 in range(1, var1):
    var4[0][var7] = var4[0][var7 - 1] + var2[0][var7]
    var5[0][var7] = var5[0][var7 - 1] + 'R'
for var6 in range(1, var0):
    for var7 in range(1, var1):
        if var4[var6 - 1][var7] >= var4[var6][var7 - 1]:
            var4[var6][var7] = var4[var6 - 1][var7] + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + 'D'
        else:
            var4[var6][var7] = var4[var6][var7 - 1] + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + 'R'",Turtle
291,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = 'A00'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
        var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var5[var6 - 1][var7] + f'D{var6}{var7}'
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var5[var6][var7 - 1] + f'R{var6}{var7}'",Turtle
292,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = {}
def var5(var6, var7):
    if (var6, var7) in var4:
        return var4[var6, var7]
    if var6 == 0 and var7 == 0:
        return (var2[var6][var7], 'A00')
    var8 = float('-inf')
    var9 = ''
    if var6 > 0:
        var10, var11 = var5(var6 - 1, var7)
        if var10 + var2[var6][var7] > var8:
            var8 = var10 + var2[var6][var7]
            var9 = var11 + f'D{var6}{var7}'
    if var7 > 0:
        var12, var13 = var5(var6, var7 - 1)
        if var12 + var2[var6][var7] > var8:
            var8 = var12 + var2[var6][var7]
            var9 = var13 + f'R{var6}{var7}'
    var4[var6, var7] = (var8, var9)
    return (var8, var9)
var14, var15 = var5(var0 - 1, var1 - 1)",Turtle
293,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0 for var3 in range(var1)] for var3 in range(var0)]
var5 = [['' for var3 in range(var1)] for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = 'A00'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = float('-inf')
        var9 = float('-inf')
        var10 = ''
        var11 = ''
        if var6 > 0:
            var8 = var4[var6 - 1][var7]
            var10 = var5[var6 - 1][var7]
        if var7 > 0:
            var9 = var4[var6][var7 - 1]
            var11 = var5[var6][var7 - 1]
        if var8 >= var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var10 + f'D{var6}{var7}'
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var11 + f'R{var6}{var7}'",Turtle
294,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            var4[var6][var7] = var2[var6][var7]
            var5[var6][var7] = 'A00'
        else:
            var8 = var4[var6 - 1][var7] if var6 > 0 else float('-inf')
            var9 = var4[var6][var7 - 1] if var7 > 0 else float('-inf')
            if var8 > var9:
                var4[var6][var7] = var8 + var2[var6][var7]
                var5[var6][var7] = var5[var6 - 1][var7] + f'D{var6}{var7}'
            else:
                var4[var6][var7] = var9 + var2[var6][var7]
                var5[var6][var7] = var5[var6][var7 - 1] + f'R{var6}{var7}'",Turtle
295,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = 'A00'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = float('-inf')
        var9 = ''
        if var6 > 0:
            if var4[var6 - 1][var7] + var2[var6][var7] > var8:
                var8 = var4[var6 - 1][var7] + var2[var6][var7]
                var9 = var5[var6 - 1][var7] + f'D{var6}{var7}'
        if var7 > 0:
            if var4[var6][var7 - 1] + var2[var6][var7] > var8:
                var8 = var4[var6][var7 - 1] + var2[var6][var7]
                var9 = var5[var6][var7 - 1] + f'R{var6}{var7}'
        var4[var6][var7] = var8
        var5[var6][var7] = var9",Turtle
296,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = 'A00'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = float('-inf')
        var9 = float('-inf')
        var10 = ''
        var11 = ''
        if var6 > 0:
            var8 = var4[var6 - 1][var7]
            var10 = var5[var6 - 1][var7]
        if var7 > 0:
            var9 = var4[var6][var7 - 1]
            var11 = var5[var6][var7 - 1]
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var10 + f'D{var6}{var7}'
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var11 + f'R{var6}{var7}'",Turtle
297,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0 for var3 in range(var1)] for var3 in range(var0)]
var5 = [['' for var3 in range(var1)] for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = 'A00'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = float('-inf')
        var9 = ''
        if var6 > 0:
            if var4[var6 - 1][var7] + var2[var6][var7] > var8:
                var8 = var4[var6 - 1][var7] + var2[var6][var7]
                var9 = var5[var6 - 1][var7] + f'D{var6}{var7}'
        if var7 > 0:
            if var4[var6][var7 - 1] + var2[var6][var7] > var8:
                var8 = var4[var6][var7 - 1] + var2[var6][var7]
                var9 = var5[var6][var7 - 1] + f'R{var6}{var7}'
        var4[var6][var7] = var8
        var5[var6][var7] = var9",Turtle
298,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = 'A00'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = float('-inf')
        var9 = float('-inf')
        var10 = ''
        var11 = ''
        if var6 > 0:
            var8 = var4[var6 - 1][var7]
            var10 = var5[var6 - 1][var7]
        if var7 > 0:
            var9 = var4[var6][var7 - 1]
            var11 = var5[var6][var7 - 1]
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var10 + f'D{var6}{var7}'
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var11 + f'R{var6}{var7}'",Turtle
299,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0 for var3 in range(var1)] for var3 in range(var0)]
var5 = [['' for var3 in range(var1)] for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = 'A00'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = float('-inf')
        var9 = float('-inf')
        var10 = ''
        var11 = ''
        if var6 > 0:
            var8 = var4[var6 - 1][var7]
            var10 = var5[var6 - 1][var7]
        if var7 > 0:
            var9 = var4[var6][var7 - 1]
            var11 = var5[var6][var7 - 1]
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var10 + f'D{var6}{var7}'
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var11 + f'R{var6}{var7}'",Turtle
300,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var0)]
var4 = [[0] * var1 for var3 in range(var0)]
var5 = [[''] * var1 for var3 in range(var0)]
var4[0][0] = var2[0][0]
var5[0][0] = 'A00'
for var6 in range(var0):
    for var7 in range(var1):
        if var6 == 0 and var7 == 0:
            continue
        var8 = float('-inf')
        var9 = float('-inf')
        var10 = ''
        var11 = ''
        if var6 > 0:
            var8 = var4[var6 - 1][var7]
            var10 = var5[var6 - 1][var7]
        if var7 > 0:
            var9 = var4[var6][var7 - 1]
            var11 = var5[var6][var7 - 1]
        if var8 > var9:
            var4[var6][var7] = var8 + var2[var6][var7]
            var5[var6][var7] = var10 + f'D{var6}{var7}'
        else:
            var4[var6][var7] = var9 + var2[var6][var7]
            var5[var6][var7] = var11 + f'R{var6}{var7}'",Turtle
301,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
302,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
303,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            yield from var0(var1, (var6 for var6 in var1[var5] if var6 not in var3))",DFS
304,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
305,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
306,"from functools import reduce
def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = var1[var2]
    var5 = [var6 for var6 in var4 if var6 not in var3]
    return reduce(lambda var7, var6: var0(var1, var6, var7), var5, var3)",DFS
307,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3 and var4 in var1:
            var0(var1, var4, var3)",DFS
308,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
309,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
310,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in reversed(var1[var2]):
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
311,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
312,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
313,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
314,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    if var2 in var3:
        return
    var3.add(var2)
    for var4 in var1[var2]:
        var0(var1, var4, var3)",DFS
315,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
316,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    while var5:
        var6 = var5.pop()
        if not var4[var6]:
            var4[var6] = True
            for var7 in range(var3):
                if var1[var6][var7] == 1 and (not var4[var7]):
                    var5.append(var7)",DFS
317,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return []
    var3 = set()
    var4 = [var2]
    var5 = []
    while var4:
        var6 = var4.pop()
        if var6 not in var3:
            var3.add(var6)
            var5.append(var6)
            if var6 in var1:
                var4.extend((var7 for var7 in var1[var6] if var7 not in var3))
    return var5",DFS
318,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return []
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var6 = []
    while var5:
        var7 = var5.pop()
        if not var4[var7]:
            var4[var7] = True
            var6.append(var7)
            for var8 in range(var3):
                if var1[var7][var8] == 1 and (not var4[var8]):
                    var5.append(var8)
    return var6",DFS
319,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = []
    if var2 in var3:
        return
    var3.append(var2)
    if var2 in var1:
        for var4 in var1[var2]:
            var0(var1, var4, var3)
    return var3",DFS
320,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var6 = []
    while var5:
        var7 = var5.pop()
        if not var4[var7]:
            var4[var7] = True
            var6.append(var7)
            for var8 in range(var3):
                if var1[var7][var8] == 1 and (not var4[var8]):
                    var5.append(var8)
    return var6",DFS
321,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
322,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
323,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
324,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = [var5 for var5 in var1[var2] if var5 not in var3]
    return [var2] + sum([var0(var1, var5, var3) for var5 in var4], [])",DFS
325,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
326,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
327,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
328,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
329,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
330,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    var4 = [var5 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5])]
    return [var2] + sum([var0(var1, var6, var3) for var6 in var4], [])",DFS
331,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
332,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
333,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
334,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = [var5 for var5 in var1[var2] if var5 not in var3]
    return (var2, [var0(var1, var5, var3)[0] for var5 in var4])",DFS
335,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
336,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
337,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
338,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
339,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    var4 = [var5 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5])]
    return (var2, [var0(var1, var6, var3)[0] for var6 in var4])",DFS
340,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
341,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
342,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
343,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
344,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = [var5 for var5 in var1[var2] if var5 not in var3]
    return [var2] + sum([var0(var1, var5, var3) for var5 in var4], [])",DFS
345,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
346,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
347,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
348,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
349,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
350,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    var4 = [var5 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5])]
    return [var2] + sum([var0(var1, var6, var3) for var6 in var4], [])",DFS
351,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
352,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            for var6 in reversed(var1[var5]):
                var4.append(var6)",DFS
353,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            for var6 in reversed(var1[var5]):
                var4.append(var6)",DFS
354,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    if var2 not in var3:
        var3.add(var2)
        return [var2] + sum([var0(var1, var4, var3) for var4 in var1[var2]], [])
    return []",DFS
355,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
356,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
357,"def var0(var1, var2, var3=None):
    if not var1:
        return
    if var3 is None:
        var3 = set()
    if var2 not in var1:
        return
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
358,"def var0(var1, var2):
    var3 = set()
    var4 = [var2] if var1 else []
    while var4:
        var5 = var4.pop()
        if var5 not in var3 and var5 in var1:
            var3.add(var5)
            for var6 in reversed(var1[var5]):
                var4.append(var6)
    return var3",DFS
359,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    if not var3[var2]:
        var3[var2] = True
        return [var2] + [var4 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5]) for var4 in var0(var1, var5, var3)]
    return []",DFS
360,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
361,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
362,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
363,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
364,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = [var5 for var5 in var1[var2] if var5 not in var3]
    return (var2, *sum((var0(var1, var5, var3) for var5 in var4), ()))",DFS
365,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
366,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
367,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
368,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
369,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
370,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    if var3[var2]:
        return ()
    var3[var2] = True
    var4 = [var5 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5])]
    return (var2, *sum((var0(var1, var5, var3) for var5 in var4), ()))",DFS
371,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
372,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
373,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
374,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
375,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
376,"from functools import reduce
def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = var1[var2]
    var5 = [var6 for var6 in var4 if var6 not in var3]
    return reduce(lambda var7, var6: var0(var1, var6, var7), var5, var3)",DFS
377,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
378,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
379,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
380,"def var0(var1, var2, var3, var4=None):
    if var4 is None:
        var4 = []
    var4 = var4 + [var2]
    if var2 == var3:
        return var4
    if var2 not in var1:
        return None
    for var5 in var1[var2]:
        if var5 not in var4:
            var6 = var0(var1, var5, var3, var4)
            if var6:
                return var6
    return None",DFS
381,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
382,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
383,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
384,"def var0(var1, var2, var3=None):
    var4 = len(var1)
    if var3 is None:
        var3 = [False] * var4
    var3[var2] = True
    for var5 in range(var4):
        if var1[var2][var5] == 1 and (not var3[var5]):
            var0(var1, var5, var3)",DFS
385,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    while var5:
        var6 = var5.pop()
        if not var4[var6]:
            var4[var6] = True
            for var7 in range(var3):
                if var1[var6][var7] == 1 and (not var4[var7]):
                    var5.append(var7)",DFS
386,"from functools import reduce
def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = var1[var2]
    var5 = [var6 for var6 in var4 if var6 not in var3]
    return reduce(lambda var7, var6: var0(var1, var6, var7) or var7, var5, var3)",DFS
387,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1.get(var2, []):
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
388,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    while var5:
        var6 = var5.pop()
        if not var4[var6]:
            var4[var6] = True
            for var7 in range(var3):
                if var1[var6][var7] == 1 and (not var4[var7]):
                    var5.append(var7)",DFS
389,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = []
    var3.append(var2)
    for var4 in var1.get(var2, []):
        if var4 not in var3:
            var0(var1, var4, var3)
    return var3",DFS
390,"def var0(var1, var2):
    var3 = set()
    var4 = [(var2, [var2])]
    var5 = []
    while var4:
        var6, var7 = var4.pop()
        if var6 not in var3:
            var3.add(var6)
            var5 = var7
            for var8 in var1.get(var6, []):
                if var8 not in var3:
                    var4.append((var8, var7 + [var8]))
    return var5",DFS
391,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
392,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            for var6 in var1[var5]:
                var4.append(var6)",DFS
393,"def var0(var1, var2):
    var3 = set()
    def var4(var5):
        var3.add(var5)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                yield from var4(var6)
    return var4(var2)",DFS
394,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    if var2 in var3:
        return []
    var3.add(var2)
    var4 = var1[var2]
    return [var2] + sum([var0(var1, var5, var3) for var5 in var4], [])",DFS
395,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
396,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
397,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1.get(var2, []):
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
398,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
399,"def var0(var1, var2):
    var3 = [False] * len(var1)
    def var4(var5):
        var3[var5] = True
        yield var5
        for var6 in range(len(var1)):
            if var1[var5][var6] == 1 and (not var3[var6]):
                yield from var4(var6)
    return var4(var2)",DFS
400,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    if var3[var2]:
        return []
    var3[var2] = True
    var4 = [var5 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5])]
    return [var2] + sum([var0(var1, var6, var3) for var6 in var4], [])",DFS
401,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var6 -= 1
var7 -= 1
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6):",DFS
402,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var6 -= 1
var7 -= 1
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6):",DFS
403,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var6 -= 1
var7 -= 1
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6):",DFS
404,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var6 -= 1
var7 -= 1
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6):",DFS
405,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var6 -= 1
var7 -= 1
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6):",DFS
406,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var6 -= 1
var7 -= 1
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6):",DFS
407,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var6 -= 1
var7 -= 1
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6):",DFS
408,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var6 -= 1
var7 -= 1
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6):",DFS
409,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var6 -= 1
var7 -= 1
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6):",DFS
410,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var6 -= 1
var7 -= 1
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6):",DFS
411,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
var6, var7 = map(int, input().split())
var8 = [False] * (var0 + 1)
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11)
    if var11 == var12:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6, var7):",DFS
412,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
var6, var7 = map(int, input().split())
var8 = [False] * (var0 + 1)
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11)
    if var11 == var12:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6, var7):",DFS
413,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
var6, var7 = map(int, input().split())
var8 = [False] * (var0 + 1)
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11)
    if var11 == var12:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6, var7):",DFS
414,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
var6, var7 = map(int, input().split())
var8 = [False] * (var0 + 1)
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11)
    if var11 == var12:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6, var7):",DFS
415,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
var6, var7 = map(int, input().split())
var8 = [False] * (var0 + 1)
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11)
    if var11 == var12:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6, var7):",DFS
416,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
var6, var7 = map(int, input().split())
var8 = [False] * (var0 + 1)
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11)
    if var11 == var12:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6, var7):",DFS
417,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
var6, var7 = map(int, input().split())
var8 = [False] * (var0 + 1)
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11)
    if var11 == var12:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6, var7):",DFS
418,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
var6, var7 = map(int, input().split())
var8 = [False] * (var0 + 1)
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11)
    if var11 == var12:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6, var7):",DFS
419,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
var6, var7 = map(int, input().split())
var8 = [False] * (var0 + 1)
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11)
    if var11 == var12:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6, var7):",DFS
420,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
var6, var7 = map(int, input().split())
var8 = [False] * (var0 + 1)
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11)
    if var11 == var12:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6, var7):",DFS
421,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = []
var9 = [False] * var0
def var10(var11):
    var9[var11] = True
    var8.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var9[var12]:
            if var10(var12):
                return True
    var8.pop()
    return False
if var10(var6 - 1):",DFS
422,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
423,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
424,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
425,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
426,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
427,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
428,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var5):
    var8[var5] = True
    var9.append(var5 + 1)
    if var5 == var7 - 1:
        return True
    for var11 in var2[var5]:
        if not var8[var11]:
            if var10(var11):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
429,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
430,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
431,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var11 = [False] * var0
var12 = []
if var8(var6 - 1, var7 - 1, var11, var12):",DFS
432,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var12[var9] = True
    var11.append(var9 + 1)
    if var9 == var10:
        return True
    for var13 in var2[var9]:
        if not var12[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var11.pop()
    return False
var12 = [False] * var0
var14 = []
if var8(var6 - 1, var7 - 1, var14, var12):",DFS
433,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var11 = [False] * var0
var12 = []
if var8(var6 - 1, var7 - 1, var11, var12):",DFS
434,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var11 = [False] * var0
var12 = []
if var8(var6 - 1, var7 - 1, var11, var12):",DFS
435,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var11 = [False] * var0
var12 = []
if var8(var6 - 1, var7 - 1, var11, var12):",DFS
436,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var11 = [False] * var0
var12 = []
if var8(var6 - 1, var7 - 1, var11, var12):",DFS
437,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var11 = [False] * var0
var12 = []
if var8(var6 - 1, var7 - 1, var11, var12):",DFS
438,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var11 = [False] * var0
var12 = []
if var8(var6 - 1, var7 - 1, var11, var12):",DFS
439,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var11 = [False] * var0
var12 = []
if var8(var6 - 1, var7 - 1, var11, var12):",DFS
440,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var11 = [False] * var0
var12 = []
if var8(var6 - 1, var7 - 1, var11, var12):",DFS
441,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
442,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10 - 1:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var14 = [False] * var0
var15 = []
if var8(var6 - 1, var7, var14, var15):",DFS
443,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var12 - 1:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1, var7):",DFS
444,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var11[var9] = True
    var12.append(var9 + 1)
    if var9 == var10 - 1:
        return True
    for var13 in var2[var9]:
        if not var11[var13]:
            if var8(var13, var10, var11, var12):
                return True
    var12.pop()
    return False
var14 = [False] * var0
var15 = []
if var8(var6 - 1, var7, var14, var15):",DFS
445,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11, var12):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var12 - 1:
        return True
    for var13 in var2[var11]:
        if not var8[var13]:
            if var10(var13, var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1, var7):",DFS
446,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
447,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
448,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
449,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
450,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4 - 1].append(var5 - 1)
var6, var7 = map(int, input().split())
var8 = [False] * var0
var9 = []
def var10(var11):
    var8[var11] = True
    var9.append(var11 + 1)
    if var11 == var7 - 1:
        return True
    for var12 in var2[var11]:
        if not var8[var12]:
            if var10(var12):
                return True
    var9.pop()
    return False
if var10(var6 - 1):",DFS
451,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
452,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
453,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
454,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
455,"from collections import deque
def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
456,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        for var7 in var6:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
457,"def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
458,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    var6 = []
    while var5:
        var7 = var5.pop(0)
        var6.append(var7)
        for var8 in range(var3):
            if var1[var7][var8] == 1 and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)
    return var6",BFS
459,"from collections import deque
def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 is not None and var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
460,"def var0(var1, var2):
    if not var1:
        return []
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
461,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
462,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
463,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
464,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1[var6]:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
465,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
466,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    return list(iter((lambda: next((var5 for var5 in var1[var6] if var5 not in var3 and (var3.add(var5) or True)), None) for var6 in var4)))",BFS
467,"def var0(var1, var2):
    if not var1:
        return []
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        var7 = var1.get(var6, [])
        var4.extend([var8 for var8 in var7 if var8 not in var3 and (not var3.add(var8))])
    return var5",BFS
468,"def var0(var1, var2):
    if var2 not in var1:
        return []
    var3 = {var2}
    var4 = [var2]
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1[var6]:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
469,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    var6 = []
    while var5:
        var7 = var5.pop(0)
        var6.append(var7)
        for var8 in range(var3):
            if var1[var7][var8] == 1 and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)
    return var6",BFS
470,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return []
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1[var6]:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
471,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
472,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
473,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        if var5 in var1:
            for var6 in var1[var5]:
                if var6 not in var3:
                    var3.add(var6)
                    var4.append(var6)",BFS
474,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    if var2 not in var3:
        var3.add(var2)
        yield var2
        for var4 in var1[var2]:
            yield from var0(var1, var4, var3)",BFS
475,"from collections import deque
def var0(var1, var2, var3):
    var4 = set()
    var5 = deque([(var2, 0)])
    var4.add(var2)
    while var5:
        var6, var7 = var5.popleft()
        yield var6
        if var7 < var3:
            for var8 in var1[var6]:
                if var8 not in var4:
                    var4.add(var8)
                    var5.append((var8, var7 + 1))",BFS
476,"def var0(var1, var2):
    var3 = [(var2, 0)]
    var4 = {var2}
    while var3:
        var5, var6 = min(var3, key=lambda var7: var7[1])
        var3.remove(var5)
        yield var5
        for var8 in var1.get(var5, []):
            if var8 not in var4:
                var4.add(var8)
                var3.append((var8, len([var9 for var9, var10 in var3])))",BFS
477,"from collections import deque
def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        if var5 in var1:
            for var6 in var1[var5]:
                if var6 not in var3:
                    var3.add(var6)
                    var4.append(var6)",BFS
478,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    var6 = 0
    while var6 < len(var5):
        var7 = var5[var6]
        var6 += 1
        yield var7
        for var8 in range(var3):
            if var1[var7][var8] and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)",BFS
479,"from collections import deque
def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
480,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        for var7 in var6:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
481,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
482,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
483,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
484,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
485,"from collections import deque
def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
486,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        for var7 in var6:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
487,"def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
488,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    var6 = []
    while var5:
        var7 = var5.pop(0)
        var6.append(var7)
        for var8 in range(var3):
            if var1[var7][var8] == 1 and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)
    return var6",BFS
489,"from collections import deque
def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 is not None and var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
490,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
491,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
492,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
493,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
494,"import queue
def var0(var1, var2):
    var3 = queue.Queue()
    var4 = set()
    var3.put(var2)
    var4.add(var2)
    while not var3.empty():
        var5 = var3.get()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var4:
                var4.add(var6)
                var3.put(var6)",BFS
495,"def var0(var1, var2):
    if not var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
496,"def var0(var1, var2):
    var3 = set()
    var4 = [var2] if var2 is not None else []
    if not var4:
        return
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        var4.extend([var7 for var7 in var6 if var7 not in var3])
        var3.update(var6)",BFS
497,"from collections import deque
def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = deque([var2])
    var4 = {var2}
    while var3:
        var5 = var3.popleft()
        yield var5
        for var6 in var1[var5]:
            if var6 not in var4:
                var4.add(var6)
                var3.append(var6)",BFS
498,"def var0(var1, var2):
    var3 = var4()
    var5 = set()
    if var2 is not None and var2 in var1:
        var3.append(var2)
        var5.add(var2)
    while var3:
        var6 = var3.popleft()
        yield var6
        for var7 in var1.get(var6, []):
            if var7 not in var5:
                var3.append(var7)
                var5.add(var7)",BFS
499,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = []
    if var2 < 0 or var2 >= var3:
        return
    var4[var2] = True
    var5.append(var2)
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
500,"def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while True:
        if not var4:
            break
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
501,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
502,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
503,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
504,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
505,"from collections import deque
def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
506,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        for var7 in var6:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
507,"def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
508,"from collections import deque
def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = deque([var2])
    var4[var2] = True
    while var5:
        var6 = var5.popleft()
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
509,"def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
510,"def var0(var1, var2):
    var3 = set()
    var4 = var5([var2])
    var3.add(var2)
    var6 = []
    while var4:
        var7 = var4.popleft()
        var6.append(var7)
        for var8 in var1.get(var7, []):
            if var8 not in var3:
                var3.add(var8)
                var4.append(var8)
    return var6",BFS
511,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
512,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
513,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield from var6(var1, var5, var3)
def var6(var1, var5, var3):
    yield var5
    for var7 in var1.get(var5, []):
        if var7 not in var3:
            var3.add(var7)
            yield from var6(var1, var7, var3)",BFS
514,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
515,"from collections import deque
def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = deque([var2])
    var4[var2] = True
    while var5:
        var6 = var5.popleft()
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
516,"def var0(var1, var2):
    var3 = {var2}
    var4 = [var2]
    def var5(var6):
        if not var6:
            return []
        var7 = var6.pop(0)
        var8 = [var9 for var9 in var1.get(var7, []) if var9 not in var3]
        var3.update(var8)
        return [var7] + var5(var6 + var8)
    return var5(var4)",BFS
517,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return []
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
518,"def var0(var1, var2):
    if not var1:
        return []
    var3 = len(var1)
    if var2 < 0 or var2 >= var3:
        return []
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
519,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    yield var2
    for var4 in var1.get(var2, []):
        if var4 not in var3:
            yield from var0(var1, var4, var3)",BFS
520,"def var0(var1, var2):
    var3 = set()
    var4 = list(var2)
    for var5 in var2:
        var3.add(var5)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
521,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
522,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
523,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
524,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
525,"from collections import deque
def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    while var4:
        var5 = var4.popleft()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            for var6 in var1.get(var5, []):
                var4.append(var6)",BFS
526,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        if var5 not in var3:
            var3.add(var5)
            yield var5
            for var6 in var1.get(var5, []):
                var4.append(var6)",BFS
527,"def var0(var1, var2):
    var3 = set()
    var4 = var5([var2])
    var3.add(var2)
    while var4:
        var6 = var4.popleft()
        yield var6
        var7 = var1.get(var6, [])
        for var8 in var7:
            if var8 not in var3:
                var3.add(var8)
                var4.append(var8)",BFS
528,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = var6([var2])
    var4[var2] = True
    while var5:
        var7 = var5.popleft()
        yield var7
        for var8 in range(var3):
            if var1[var7][var8] == 1 and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)",BFS
529,"def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
530,"def var0(var1, var2):
    var3 = set()
    var4 = var5([var2])
    var3.add(var2)
    while var4:
        var6 = var4.popleft()
        yield var6
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
531,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
532,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
533,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
534,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
535,"from collections import deque
def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
536,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        for var7 in var6:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
537,"def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
538,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    var6 = []
    while var5:
        var7 = var5.pop(0)
        var6.append(var7)
        for var8 in range(var3):
            if var1[var7][var8] == 1 and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)
    return var6",BFS
539,"from collections import deque
def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 is not None and var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
540,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
541,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
542,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
543,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
544,"def bfs_functional(graph, start_node):
    visited = set()
    queue = [start_node]
    visited.add(start_node)
    return list(filter(lambda x: True,\
                      (node for node in queue for _ in [0]\
                       if (node not in visited or node == start_node)\
                       and not (node in visited and node != start_node)\
                       and (visited.add(node) or True)\
                       and yield node\
                       and (neighbor for neighbor in graph.get(node, []) if neighbor not in visited))))",BFS
545,"from collections import deque
def var0(var1, var2):
    if not var1:
        return []
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
546,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
547,"from collections import deque
def var0(var1, var2):
    if var2 not in var1:
        return []
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
548,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = var6([var2])
    var4[var2] = True
    var7 = []
    while var5:
        var8 = var5.popleft()
        var7.append(var8)
        for var9 in range(var3):
            if var1[var8][var9] and (not var4[var9]):
                var4[var9] = True
                var5.append(var9)
    return var7",BFS
549,"from collections import deque
def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6, var7 in var1.get(var5, {}).items():
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
550,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    if var2 not in var1:
        return []
    var3.add(var2)
    var4 = [var2]
    for var5 in var1[var2]:
        if var5 not in var3:
            var4.extend(var0(var1, var5, var3))
    return var4",BFS
551,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var16 in var9.get(var14, []):
            if var16 not in var13:
                var13.add(var16)
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var17 = {}
for var4, var5 in var2:
    var17.setdefault(var4, []).append(var5)
    var17.setdefault(var5, []).append(var4)
var18, var15 = var8(var17, var6, var7)
if var18 == -1:",BFS
552,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [var10]
    var13 = {var10}
    var14 = {var10: None}
    while var12:
        var4 = var12.pop(0)
        if var4 == var11:
            break
        for var5 in var9.get(var4, []):
            if var5 not in var13:
                var13.add(var5)
                var12.append(var5)
                var14[var5] = var4
    if var11 not in var14:
        return (-1, [])
    var15 = []
    var16 = var11
    while var16 is not None:
        var15.insert(0, var16)
        var16 = var14[var16]
    return (len(var15) - 1, var15)
var17 = {}
for var4, var5 in var2:
    var17.setdefault(var4, []).append(var5)
    var17.setdefault(var5, []).append(var4)
var18, var19 = var8(var17, var6, var7)
if var18 == -1:",BFS
553,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, 0)]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (var15, [var10])
        for var16 in var9[var14]:
            if var16 not in var13:
                var13.add(var16)
                var12.append((var16, var15 + 1))
    return (-1, [])
var17 = {var18: [] for var18 in range(1, var0 + 1)}
for var4, var5 in var2:
    var17[var4].append(var5)
    var17[var5].append(var4)
var19, var20 = var8(var17, var6, var7)
if var19 == -1:",BFS
554,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = set()
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        var13.add(var14)
        for var16 in var9[var14]:
            if var16 not in var13:
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var9 = {var17: [] for var17 in range(1, var0 + 1)}
for var4, var5 in var2:
    var9[var4].append(var5)
    var9[var5].append(var4)
var18, var19 = var8(var9, var6, var7)
if var18 == -1:",BFS
555,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var16 in var9[var14]:
            if var16 not in var13:
                var13.add(var16)
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var17 = {var18: [] for var18 in range(1, var0 + 1)}
for var4, var5 in var2:
    var17[var4].append(var5)
    var17[var5].append(var4)
var19, var20 = var8(var17, var6, var7)
if var19 == -1:",BFS
556,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = {}
    var13 = [var10]
    var12[var10] = 0
    while var13:
        var14 = var13.pop(0)
        if var14 == var11:
            break
        for var15 in var9[var14]:
            if var15 not in var12:
                var12[var15] = var12[var14] + 1
                var13.append(var15)
    if var11 not in var12:
        return (-1, [])
    var16 = []
    var17 = var11
    while var17 is not None:
        var16.insert(0, var17)
        if var17 == var10:
            break
        var18 = False
        for var15 in var9:
            if var17 in var9[var15] and var15 in var12 and (var12[var15] == var12[var17] - 1):
                var17 = var15
                var18 = True
                break
        if not var18:
            var17 = None
    return (var12[var11], var16)
var19 = {var20: [] for var20 in range(1, var0 + 1)}
for var4, var5 in var2:
    var19[var4].append(var5)
    var19[var5].append(var4)
var21, var22 = var8(var19, var6, var7)
if var21 == -1:",BFS
557,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = set()
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        var13.add(var14)
        for var16 in var9.get(var14, []):
            if var16 not in var13:
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var17 = {}
for var4, var5 in var2:
    var17.setdefault(var4, []).append(var5)
    var17.setdefault(var5, []).append(var4)
var18, var19 = var8(var17, var6, var7)
if var18 == -1:",BFS
558,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, 0)]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (var15, [var10])
        for var16 in var9[var14]:
            if var16 not in var13:
                var13.add(var16)
                var12.append((var16, var15 + 1))
    return (-1, [])
var17 = {var18: [] for var18 in range(1, var0 + 1)}
for var4, var5 in var2:
    var17[var4].append(var5)
    var17[var5].append(var4)
var19, var20 = var8(var17, var6, var7)
if var19 == -1:",BFS
559,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = set()
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        var13.add(var14)
        for var16 in var9[var14]:
            if var16 not in var13:
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var17 = {var18: [] for var18 in range(1, var0 + 1)}
for var4, var5 in var2:
    var17[var4].append(var5)
    var17[var5].append(var4)
var19, var15 = var8(var17, var6, var7)
if var19 == -1:",BFS
560,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, 0, [var10])]
    var13 = {var10}
    while var12:
        var14, var15, var16 = var12.pop(0)
        if var14 == var11:
            return (var15, var16)
        for var17 in var9[var14]:
            if var17 not in var13:
                var13.add(var17)
                var12.append((var17, var15 + 1, var16 + [var17]))
    return (-1, [])
var18 = {var19: [] for var19 in range(1, var0 + 1)}
for var4, var5 in var2:
    var18[var4].append(var5)
    var18[var5].append(var4)
var20, var21 = var8(var18, var6, var7)
if var20 == -1:",BFS
561,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var4, var5 in var9:
            if var4 == var14 and var5 not in var13:
                var13.add(var5)
                var12.append((var5, var15 + [var5]))
            elif var5 == var14 and var4 not in var13:
                var13.add(var4)
                var12.append((var4, var15 + [var4]))
    return (-1, [])
var16, var15 = var8(var2, var6, var7)
if var16 == -1:",BFS
562,"var0, var1 = map(int, input().split())
var2 = [list(map(int, input().split())) for var3 in range(var1)]
var4, var5 = map(int, input().split())
def var6(var7, var8, var9):
    var10 = [(var8, [var8])]
    var11 = {var8}
    while var10:
        var12, var13 = var10.pop(0)
        if var12 == var9:
            return (len(var13) - 1, var13)
        for var14 in var2:
            if var14[0] == var12 and var14[1] not in var11:
                var10.append((var14[1], var13 + [var14[1]]))
                var11.add(var14[1])
            elif var14[1] == var12 and var14[0] not in var11:
                var10.append((var14[0], var13 + [var14[0]]))
                var11.add(var14[0])
    return (-1, [])
var15, var13 = var6(var2, var4, var5)
if var15 == -1:",BFS
563,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var4, var5 in var9:
            if var4 == var14 and var5 not in var13:
                var12.append((var5, var15 + [var5]))
                var13.add(var5)
            if var5 == var14 and var4 not in var13:
                var12.append((var4, var15 + [var4]))
                var13.add(var4)
    return (-1, [])
var16, var17 = var8(var2, var6, var7)
if var16 == -1:",BFS
564,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = set()
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        var13.add(var14)
        for var16, var17 in var9:
            if var16 == var14 and var17 not in var13:
                var12.append((var17, var15 + [var17]))
            if var17 == var14 and var16 not in var13:
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var18, var19 = var8(var2, var6, var7)
if var18 == -1:",BFS
565,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append([var4, var5])
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var4, var5 in var9:
            if var4 == var14 and var5 not in var13:
                var12.append((var5, var15 + [var5]))
                var13.add(var5)
            if var5 == var14 and var4 not in var13:
                var12.append((var4, var15 + [var4]))
                var13.add(var4)
    return (-1, [])
var16, var15 = var8(var2, var6, var7)
if var16 == -1:",BFS
566,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = set()
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        var13.add(var14)
        for var16, var17 in var9:
            if var16 == var14 and var17 not in var13:
                var12.append((var17, var15 + [var17]))
            if var17 == var14 and var16 not in var13:
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var18, var19 = var8(var2, var6, var7)
if var18 == -1:",BFS
567,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = set()
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        var13.add(var14)
        for var16, var17 in var9:
            if var16 == var14 and var17 not in var13:
                var12.append((var17, var15 + [var17]))
            if var17 == var14 and var16 not in var13:
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var18, var19 = var8(var2, var6, var7)
if var18 == -1:",BFS
568,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var4, var5 in var9:
            if var4 == var14 and var5 not in var13:
                var12.append((var5, var15 + [var5]))
                var13.add(var5)
            if var5 == var14 and var4 not in var13:
                var12.append((var4, var15 + [var4]))
                var13.add(var4)
    return (-1, [])
var16, var17 = var8(var2, var6, var7)
if var16 == -1:",BFS
569,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = set()
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        var13.add(var14)
        for var4, var5 in var9:
            if var4 == var14 and var5 not in var13:
                var12.append((var5, var15 + [var5]))
            if var5 == var14 and var4 not in var13:
                var12.append((var4, var15 + [var4]))
    return (-1, [])
var16, var17 = var8(var2, var6, var7)
if var16 == -1:",BFS
570,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var4, var5 in var9:
            if var4 == var14 and var5 not in var13:
                var12.append((var5, var15 + [var5]))
                var13.add(var5)
            if var5 == var14 and var4 not in var13:
                var12.append((var4, var15 + [var4]))
                var13.add(var4)
    return (-1, [])
var16, var17 = var8(var2, var6, var7)
if var16 == -1:",BFS
571,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var4, var5 in var9:
            if var4 == var14 and var5 not in var13:
                var13.add(var5)
                var12.append((var5, var15 + [var5]))
    return (-1, [])
var16, var15 = var8(var2, var6, var7)
if var16 == -1:",BFS
572,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
    var2[var5].append(var4)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var16 in var9[var14]:
            if var16 not in var13:
                var13.add(var16)
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var17, var15 = var8(var2, var6, var7)
if var17 == -1:",BFS
573,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
    var2[var5].append(var4)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, 0, [var10])]
    var13 = {var10}
    while var12:
        var14, var15, var16 = var12.pop(0)
        if var14 == var11:
            return (var15, var16)
        for var17 in var9[var14]:
            if var17 not in var13:
                var13.add(var17)
                var12.append((var17, var15 + 1, var16 + [var17]))
    return (-1, [])
var15, var16 = var8(var2, var6, var7)
if var15 == -1:",BFS
574,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var4, var5 in var9:
            if var4 == var14 and var5 not in var13:
                var13.add(var5)
                var12.append((var5, var15 + [var5]))
            elif var5 == var14 and var4 not in var13:
                var13.add(var4)
                var12.append((var4, var15 + [var4]))
    return (-1, [])
var16, var15 = var8(var2, var6, var7)
if var16 == -1:",BFS
575,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = set()
    var13.add(var10)
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var4, var5 in var9:
            if var4 == var14 and var5 not in var13:
                var13.add(var5)
                var12.append((var5, var15 + [var5]))
            elif var5 == var14 and var4 not in var13:
                var13.add(var4)
                var12.append((var4, var15 + [var4]))
    return (-1, [])
var16, var15 = var8(var2, var6, var7)
if var16 == -1:",BFS
576,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
    var2[var5].append(var4)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, 0)]
    var13 = {var10}
    var14 = {}
    while var12:
        var15, var16 = var12.pop(0)
        if var15 == var11:
            var17 = []
            var18 = var11
            while var18 != var10:
                var17.append(var18)
                var18 = var14[var18]
            var17.append(var10)
            var17.reverse()
            return (var16, var17)
        for var19 in var9[var15]:
            if var19 not in var13:
                var13.add(var19)
                var12.append((var19, var16 + 1))
                var14[var19] = var15
    return (-1, [])
var16, var17 = var8(var2, var6, var7)
if var16 == -1:",BFS
577,"var0, var1 = map(int, input().split())
var2 = {}
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    if var4 not in var2:
        var2[var4] = []
    if var5 not in var2:
        var2[var5] = []
    var2[var4].append(var5)
    var2[var5].append(var4)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = set()
    var13.add(var10)
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        if var14 in var9:
            for var16 in var9[var14]:
                if var16 not in var13:
                    var13.add(var16)
                    var12.append((var16, var15 + [var16]))
    return (-1, [])
var17, var18 = var8(var2, var6, var7)
if var17 == -1:",BFS
578,"var0, var1 = map(int, input().split())
var2 = [[0] * (var0 + 1) for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4][var5] = 1
    var2[var5][var4] = 1
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = [False] * (var0 + 1)
    var13[var10] = True
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var16 in range(1, var0 + 1):
            if var9[var14][var16] == 1 and (not var13[var16]):
                var13[var16] = True
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var17, var15 = var8(var2, var6, var7)
if var17 == -1:",BFS
579,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, [var10])]
    var13 = {var10}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var11:
            return (len(var15) - 1, var15)
        for var4, var5 in var9:
            if var4 == var14 and var5 not in var13:
                var13.add(var5)
                var12.append((var5, var15 + [var5]))
            elif var5 == var14 and var4 not in var13:
                var13.add(var4)
                var12.append((var4, var15 + [var4]))
    return (-1, [])
var16, var17 = var8(var2, var6, var7)
if var16 == -1:",BFS
580,"var0, var1 = map(int, input().split())
var2 = {}
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    if var4 not in var2:
        var2[var4] = []
    if var5 not in var2:
        var2[var5] = []
    var2[var4].append(var5)
    var2[var5].append(var4)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var10, 0, [var10])]
    var13 = {var10}
    while var12:
        var14, var15, var16 = var12.pop(0)
        if var14 == var11:
            return (var15, var16)
        if var14 in var9:
            for var17 in var9[var14]:
                if var17 not in var13:
                    var13.add(var17)
                    var12.append((var17, var15 + 1, var16 + [var17]))
    return (-1, [])
var18, var19 = var8(var2, var6, var7)
if var18 == -1:",BFS
581,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var9, [var9])]
    var13 = set()
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var10:
            return (len(var15) - 1, var15)
        if var14 not in var13:
            var13.add(var14)
            for var16 in var11[var14]:
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var11 = {var17: [] for var17 in range(1, var0 + 1)}
for var4, var5 in var2:
    var11[var4].append(var5)
    var11[var5].append(var4)
var18, var15 = var8(var6, var7, var11)
if var18 == -1:",BFS
582,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
    var2[var5].append(var4)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var9, [var9])]
    var13 = {var9}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var10:
            return (len(var15) - 1, var15)
        for var16 in var11[var14]:
            if var16 not in var13:
                var13.add(var16)
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var17, var18 = var8(var6, var7, var2)
if var17 == -1:",BFS
583,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var13 = [(var9, [var9])]
    var14 = set()
    while var13:
        var15, var16 = var13.pop(0)
        if var15 == var10:
            return (len(var16) - 1, var16)
        if var15 not in var14:
            var14.add(var15)
            for var4, var5 in var11:
                if var4 == var15:
                    var13.append((var5, var16 + [var5]))
                elif var5 == var15:
                    var13.append((var4, var16 + [var4]))
    return (-1, [])
var17 = var2
var18, var16 = var8(var6, var7, var17, var0)
if var18 == -1:",BFS
584,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var13 = [(var9, [var9])]
    var14 = {var9}
    while var13:
        var15, var16 = var13.pop(0)
        if var15 == var10:
            return (len(var16) - 1, var16)
        for var4, var5 in var11:
            if var4 == var15 and var5 not in var14:
                var14.add(var5)
                var13.append((var5, var16 + [var5]))
            elif var5 == var15 and var4 not in var14:
                var14.add(var4)
                var13.append((var4, var16 + [var4]))
    return (-1, [])
var17, var18 = var8(var6, var7, var2, var0)
if var17 == -1:",BFS
585,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var9, [var9])]
    var13 = set()
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var10:
            return (len(var15) - 1, var15)
        if var14 not in var13:
            var13.add(var14)
            for var4, var5 in var11:
                if var4 == var14:
                    var12.append((var5, var15 + [var5]))
                elif var5 == var14:
                    var12.append((var4, var15 + [var4]))
    return (-1, [])
var16, var17 = var8(var6, var7, var2)
if var16 == -1:",BFS
586,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var13 = [(var9, [var9])]
    var14 = set()
    while var13:
        var15, var16 = var13.pop(0)
        if var15 == var10:
            return (len(var16) - 1, var16)
        if var15 not in var14:
            var14.add(var15)
            var17 = []
            for var4, var5 in var11:
                if var4 == var15:
                    var17.append(var5)
                elif var5 == var15:
                    var17.append(var4)
            for var18 in var17:
                var13.append((var18, var16 + [var18]))
    return (-1, [])
var19, var16 = var8(var6, var7, var2, var0)
if var19 == -1:",BFS
587,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var13 = [(var9, [var9])]
    var14 = {var9}
    while var13:
        var15, var16 = var13.pop(0)
        if var15 == var10:
            return (len(var16) - 1, var16)
        for var4, var5 in var11:
            if var4 == var15 and var5 not in var14:
                var14.add(var5)
                var13.append((var5, var16 + [var5]))
            elif var5 == var15 and var4 not in var14:
                var14.add(var4)
                var13.append((var4, var16 + [var4]))
    return (-1, [])
var17, var18 = var8(var6, var7, var2, var0)
if var17 == -1:",BFS
588,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
def var8(var9, var10, var11, var12):
    var13 = [(var9, [var9])]
    var14 = set()
    while var13:
        var15, var16 = var13.pop(0)
        if var15 == var10:
            return (len(var16) - 1, var16)
        if var15 not in var14:
            var14.add(var15)
            for var4, var5 in var11:
                if var4 == var15:
                    var13.append((var5, var16 + [var5]))
                elif var5 == var15:
                    var13.append((var4, var16 + [var4]))
    return (-1, [])
var17, var18 = var8(var6, var7, var2, var0)
if var17 == -1:",BFS
589,"var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2[var4].append(var5)
    var2[var5].append(var4)
var6, var7 = map(int, input().split())
def var8(var9, var10, var11):
    var12 = [(var9, [var9])]
    var13 = {var9}
    while var12:
        var14, var15 = var12.pop(0)
        if var14 == var10:
            return (len(var15) - 1, var15)
        for var16 in var11[var14]:
            if var16 not in var13:
                var13.add(var16)
                var12.append((var16, var15 + [var16]))
    return (-1, [])
var17, var18 = var8(var6, var7, var2)
if var17 == -1:",BFS
590,"var0, var1 = map(int, input().split())
var2 = {}
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    if var4 not in var2:
        var2[var4] = []
    if var5 not in var2:
        var2[var5] = []
    var2[var4].append(var5)
    var2[var5].append(var4)
var6, var7 = map(int, input().split())
def var8(var9, var10, var2):
    var11 = [(var9, [var9])]
    var12 = set()
    while var11:
        var13, var14 = var11.pop(0)
        if var13 == var10:
            return (len(var14) - 1, var14)
        if var13 not in var12:
            var12.add(var13)
            if var13 in var2:
                for var15 in var2[var13]:
                    var11.append((var15, var14 + [var15]))
    return (-1, [])
var16, var14 = var8(var6, var7, var2)
if var16 == -1:",BFS
591,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
var8 = {var9: [] for var9 in range(1, var0 + 1)}
for var4, var5 in var2:
    var8[var4].append(var5)
    var8[var5].append(var4)
def var10(var11, var12):
    var13 = [(var11, 0, [var11])]
    var14 = {var11}
    while var13:
        var15, var16, var17 = var13.pop(0)
        if var15 == var12:
            return (var16, var17)
        for var18 in var8[var15]:
            if var18 not in var14:
                var14.add(var18)
                var13.append((var18, var16 + 1, var17 + [var18]))
    return (-1, [])
var16, var17 = var10(var6, var7)
if var16 == -1:",BFS
592,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
var8 = [[] for var3 in range(var0 + 1)]
for var4, var5 in var2:
    var8[var4].append(var5)
    var8[var5].append(var4)
def var9(var10, var11):
    var12 = [(var10, 0, [var10])]
    var13 = [False] * (var0 + 1)
    var13[var10] = True
    while var12:
        var5, var14, var15 = var12.pop(0)
        if var5 == var11:
            return (var14, var15)
        for var16 in var8[var5]:
            if not var13[var16]:
                var13[var16] = True
                var12.append((var16, var14 + 1, var15 + [var16]))
    return (-1, [])
var17, var18 = var9(var6, var7)
if var17 == -1:",BFS
593,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
var8 = {}
for var9 in range(1, var0 + 1):
    var8[var9] = []
for var4, var5 in var2:
    var8[var4].append(var5)
    var8[var5].append(var4)
def var10(var11, var12):
    var13 = [(var11, [var11])]
    var14 = set()
    while var13:
        var15, var16 = var13.pop(0)
        if var15 == var12:
            return (len(var16) - 1, var16)
        if var15 not in var14:
            var14.add(var15)
            for var17 in var8[var15]:
                var13.append((var17, var16 + [var17]))
    return (-1, [])
var18, var19 = var10(var6, var7)
if var18 == -1:",BFS
594,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
var8 = {var9: [] for var9 in range(1, var0 + 1)}
for var4, var5 in var2:
    var8[var4].append(var5)
    var8[var5].append(var4)
def var10(var11, var12):
    var13 = [(var11, [var11])]
    var14 = set()
    while var13:
        var15, var16 = var13.pop(0)
        if var15 == var12:
            return (len(var16) - 1, var16)
        var14.add(var15)
        for var17 in var8[var15]:
            if var17 not in var14:
                var13.append((var17, var16 + [var17]))
    return (-1, [])
var18, var19 = var10(var6, var7)
if var18 == -1:",BFS
595,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
var8 = [[] for var3 in range(var0 + 1)]
for var9, var10 in var2:
    var8[var9].append(var10)
    var8[var10].append(var9)
def var11(var12, var13):
    var14 = [(var12, 0, [var12])]
    var15 = [False] * (var0 + 1)
    var15[var12] = True
    while var14:
        var16, var17, var18 = var14.pop(0)
        if var16 == var13:
            return (var17, var18)
        for var19 in var8[var16]:
            if not var15[var19]:
                var15[var19] = True
                var14.append((var19, var17 + 1, var18 + [var19]))
    return (-1, [])
var20, var21 = var11(var6, var7)
if var20 == -1:",BFS
596,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
var8 = {var9: [] for var9 in range(1, var0 + 1)}
for var4, var5 in var2:
    var8[var4].append(var5)
    var8[var5].append(var4)
def var10(var11, var12):
    var13 = [(var11, 0, [var11])]
    var14 = {var11}
    while var13:
        var15, var16, var17 = var13.pop(0)
        if var15 == var12:
            return (var16, var17)
        for var18 in var8[var15]:
            if var18 not in var14:
                var14.add(var18)
                var13.append((var18, var16 + 1, var17 + [var18]))
    return (-1, [])
var19, var17 = var10(var6, var7)
if var19 == -1:",BFS
597,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
var8 = {var9: [] for var9 in range(1, var0 + 1)}
for var4, var5 in var2:
    var8[var4].append(var5)
    var8[var5].append(var4)
def var10(var11, var12):
    var13 = [(var11, [var11])]
    var14 = set()
    while var13:
        var15, var16 = var13.pop(0)
        if var15 == var12:
            return (len(var16) - 1, var16)
        if var15 not in var14:
            var14.add(var15)
            for var17 in var8[var15]:
                var13.append((var17, var16 + [var17]))
    return (-1, [])
var18, var19 = var10(var6, var7)
if var18 == -1:",BFS
598,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
var8 = [[] for var3 in range(var0 + 1)]
for var4, var5 in var2:
    var8[var4].append(var5)
    var8[var5].append(var4)
def var9(var10, var11):
    var12 = [(var10, 0, [var10])]
    var13 = [False] * (var0 + 1)
    var13[var10] = True
    while var12:
        var14, var15, var16 = var12.pop(0)
        if var14 == var11:
            return (var15, var16)
        for var17 in var8[var14]:
            if not var13[var17]:
                var13[var17] = True
                var12.append((var17, var15 + 1, var16 + [var17]))
    return (-1, [])
var15, var16 = var9(var6, var7)
if var15 == -1:",BFS
599,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
var8 = {}
for var9 in range(1, var0 + 1):
    var8[var9] = []
for var4, var5 in var2:
    var8[var4].append(var5)
    var8[var5].append(var4)
def var10(var11, var12):
    var13 = [(var11, [var11])]
    var14 = set()
    while var13:
        var15, var16 = var13.pop(0)
        if var15 == var12:
            return (len(var16) - 1, var16)
        if var15 not in var14:
            var14.add(var15)
            for var17 in var8[var15]:
                var13.append((var17, var16 + [var17]))
    return (-1, [])
var18, var19 = var10(var6, var7)
if var18 == -1:",BFS
600,"var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5 = map(int, input().split())
    var2.append((var4, var5))
var6, var7 = map(int, input().split())
var8 = {var9: [] for var9 in range(1, var0 + 1)}
for var10, var11 in var2:
    var8[var10].append(var11)
    var8[var11].append(var10)
def var12(var13, var14):
    var15 = [(var13, [var13])]
    var16 = set()
    while var15:
        var17, var18 = var15.pop(0)
        if var17 == var14:
            return (len(var18) - 1, var18)
        if var17 not in var16:
            var16.add(var17)
            for var19 in var8[var17]:
                var15.append((var19, var18 + [var19]))
    return (-1, [])
var20, var21 = var12(var6, var7)
if var20 == -1:",BFS
601,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var7] > var3[var4] + var8:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
602,"import heapq
class var0:
    def var1(var2):
        var2.heap = []
    def var3(var2, var4):
        heapq.heappush(var2.heap, var4)
    def var5(var2):
        return heapq.heappop(var2.heap)
    def var6(var2):
        return len(var2.heap)
def var7(var8, var9):
    var10 = {var11: float('inf') for var11 in var8}
    var10[var9] = 0
    var12 = var0()
    var12.push((0, var9))
    while len(var12) > 0:
        var13, var11 = var12.pop()
        if var13 > var10[var11]:
            continue
        for var14, var15 in var8[var11].items():
            if var10[var14] > var10[var11] + var15:
                var10[var14] = var10[var11] + var15
                var12.push((var10[var14], var14))
    return var10",Dijkstra
603,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = min(var5)
        var5.remove((var6, var4))
        if var6 > var3[var4]:
            continue
        yield from ((var7, var3[var4] + var8) for var7, var8 in var1[var4].items() if var3[var7] > var3[var4] + var8)
        for var7, var8 in var1[var4].items():
            if var3[var7] > var3[var4] + var8:
                var3[var7] = var3[var4] + var8
                var5.append((var3[var7], var7))",Dijkstra
604,"from functools import reduce
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
605,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [False] * var3
    for var6 in range(var3):
        var7 = float('inf')
        var8 = -1
        for var9 in range(var3):
            if not var5[var9] and var4[var9] < var7:
                var7 = var4[var9]
                var8 = var9
        if var8 == -1:
            break
        var5[var8] = True
        for var9 in range(var3):
            if var1[var8][var9] != 0 and var4[var9] > var4[var8] + var1[var8][var9]:
                var4[var9] = var4[var8] + var1[var8][var9]
    return var4",Dijkstra
606,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    while var5:
        var6 = min(var5, key=var3.get)
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            var9 = var3[var6] + var8
            if var9 < var3[var7]:
                var3[var7] = var9
    return var3",Dijkstra
607,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var8 < 0:
                raise ValueError('Negative edge weights found')
            if var3[var7] > var3[var4] + var8:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
608,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = min(var5)
        var5.remove((var6, var4))
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var7] > var3[var4] + var8:
                var3[var7] = var3[var4] + var8
                var5.append((var3[var7], var7))
    var9 = {var4 for var4, var6 in var3.items() if var6 != float('inf')}
    return var3",Dijkstra
609,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2, 0)]
    var6 = set()
    while var5:
        var7, var4, var8 = heapq.heappop(var5)
        if (var4, var8) in var6:
            continue
        var6.add((var4, var8))
        if var7 > var3[var4]:
            continue
        for var9, var10 in var1[var4].items():
            if var3[var9] > var3[var4] + var10:
                var3[var9] = var3[var4] + var10
                heapq.heappush(var5, (var3[var9], var9, var8 + 1))
    return var3",Dijkstra
610,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    while True:
        var6 = float('inf')
        var7 = None
        for var4 in var5:
            if var3[var4] < var6:
                var6 = var3[var4]
                var7 = var4
        if var7 is None:
            break
        for var8, var9 in var1[var7].items():
            if var3[var8] > var3[var7] + var9:
                var3[var8] = var3[var7] + var9
    return var3",Dijkstra
611,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
612,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
613,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
614,"from functools import reduce
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
615,"import heapq
def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
616,"class var0:
    def var1(var2):
        var2.heap = []
    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)
    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6
    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break
    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break
def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
617,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
618,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
619,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
620,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {}
    for var4 in var1:
        if var3[var4] == float('inf'):
            var10[var4] = None
        else:
            var10[var4] = var3[var4]
    return var10",Dijkstra
621,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
622,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
623,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
624,"from functools import reduce
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
625,"import heapq
def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
626,"class var0:
    def var1(var2):
        var2.heap = []
    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)
    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6
    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break
    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break
def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
627,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
628,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
629,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
630,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {}
    for var4 in var1:
        if var3[var4] == float('inf'):
            var10[var4] = None
        else:
            var10[var4] = var3[var4]
    return var10",Dijkstra
631,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
632,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
633,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
634,"from functools import reduce
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
635,"import heapq
def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
636,"class var0:
    def var1(var2):
        var2.heap = []
    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)
    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6
    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break
    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break
def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
637,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
638,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
639,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
640,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {}
    for var4 in var1:
        if var3[var4] == float('inf'):
            var10[var4] = None
        else:
            var10[var4] = var3[var4]
    return var10",Dijkstra
641,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
642,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
643,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
644,"from functools import reduce
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
645,"import heapq
def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
646,"class var0:
    def var1(var2):
        var2.heap = []
    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)
    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6
    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break
    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break
def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
647,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
648,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
649,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
650,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {var4: var6 for var4, var6 in var3.items() if var6 != float('inf')}
    return var10",Dijkstra
651,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var7] > var6 + var8:
                var3[var7] = var6 + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
652,"import heapq
def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            if var1[var7][var8] != 0:
                var9 = var1[var7][var8]
                if var4[var8] > var6 + var9:
                    var4[var8] = var6 + var9
                    heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
653,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = min(var5)
        var5.remove((var6, var4))
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var7] > var6 + var8:
                var3[var7] = var6 + var8
                var5.append((var3[var7], var7))
        yield var3",Dijkstra
654,"from functools import reduce
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    def var6(var7, var4):
        for var8, var9 in var1[var4].items():
            if var7[var8] > var7[var4] + var9:
                var7[var8] = var7[var4] + var9
        return var7
    return reduce(var6, var5, var3)",Dijkstra
655,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var8 < 0:
                raise ValueError('Negative edge weights not allowed')
            if var3[var7] > var6 + var8:
                var3[var7] = var6 + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
656,"class var0:
    def var1(var2):
        var2.heap = []
    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up()
    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down()
        return var6
    def var7(var2):
        pass
    def var8(var2):
        pass
def var9(var10, var11):
    var12 = {var13: float('inf') for var13 in var10}
    var12[var11] = 0
    var14 = var0()
    var14.push((0, var11))
    while var14.heap:
        var15, var13 = var14.pop()
        if var15 > var12[var13]:
            continue
        for var16, var17 in var10[var13].items():
            if var12[var16] > var15 + var17:
                var12[var16] = var15 + var17
                var14.push((var12[var16], var16))
    return var12",Dijkstra
657,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var8] > var6 + var9:
                var3[var8] = var6 + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {var4 for var4, var6 in var3.items() if var6 != float('inf')}
    return (var3, var10)",Dijkstra
658,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = var8.heappop(var5)
        if var6 > var3[var7]:
            continue
        for var9, var10 in var1[var7]:
            if var3[var9] > var6 + var10:
                var3[var9] = var6 + var10
                var8.heappush(var5, (var3[var9], var9))
    return var3",Dijkstra
659,"def var0(var1, var2):
    if not var1:
        return {}
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var8] > var6 + var9:
                var3[var8] = var6 + var9
                var7.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
660,"def var0(var1, var2):
    if var2 not in var1:
        return {var2: float('inf')}
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var8] > var6 + var9:
                var3[var8] = var6 + var9
                var7.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
661,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var3[var7]:
            continue
        for var8, var9 in var1[var7].items():
            if var3[var8] > var3[var7] + var9:
                var3[var8] = var3[var7] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
662,"import heapq
def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            if var1[var7][var8] != 0:
                if var4[var8] > var4[var7] + var1[var7][var8]:
                    var4[var8] = var4[var7] + var1[var7][var8]
                    heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
663,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = []
    for var7 in var5:
        var6.append(var7)
        var8 = len(var6) - 1
        while var8 > 0 and var6[var8][0] < var6[(var8 - 1) // 2][0]:
            var6[var8], var6[(var8 - 1) // 2] = (var6[(var8 - 1) // 2], var6[var8])
            var8 = (var8 - 1) // 2
    while var6:
        var9, var10 = var6[0]
        var6[0] = var6[-1]
        var6.pop()
        var11(var6, 0)
        if var9 > var3[var10]:
            continue
        for var12, var13 in var1[var10].items():
            if var3[var12] > var3[var10] + var13:
                var3[var12] = var3[var10] + var13
                var6.append((var3[var12], var12))
                var8 = len(var6) - 1
                while var8 > 0 and var6[var8][0] < var6[(var8 - 1) // 2][0]:
                    var6[var8], var6[(var8 - 1) // 2] = (var6[(var8 - 1) // 2], var6[var8])
                    var8 = (var8 - 1) // 2
    return var3
def var11(var6, var8):
    var14 = len(var6)
    var15 = var8
    var16 = 2 * var8 + 1
    var17 = 2 * var8 + 2
    if var16 < var14 and var6[var16][0] < var6[var15][0]:
        var15 = var16
    if var17 < var14 and var6[var17][0] < var6[var15][0]:
        var15 = var17
    if var15 != var8:
        var6[var8], var6[var15] = (var6[var15], var6[var8])
        var11(var6, var15)",Dijkstra
664,"def var0(var1, var2):
    def var3(var4):
        for var5, var6 in var1[var4].items():
            yield (var5, var6)
    var7 = {var4: float('inf') for var4 in var1}
    var7[var2] = 0
    var8 = [(0, var2)]
    while var8:
        var9, var10 = var11.heappop(var8)
        if var9 > var7[var10]:
            continue
        for var12, var6 in var3(var10):
            if var7[var12] > var7[var10] + var6:
                var7[var12] = var7[var10] + var6
                var11.heappush(var8, (var7[var12], var12))
    return var7",Dijkstra
665,"from functools import reduce
def dijkstra_functional(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    nodes = list(graph.keys())
    pq = [(0, start)]
    return reduce(lambda acc, (dist, u):\
                  {**acc, **{v: min(acc[v], acc[u] + weight)\
                                 for v, weight in graph[u].items()}}\
                  if dist <= acc[u] else acc, pq)",Dijkstra
666,"def var0(var1, var2):
    if any((var3 < 0 for var4 in var1 for var3 in var1[var4].values())):
        return 'Negative edge weights detected'
    return var5(var1, var2)",Dijkstra
667,"def var0(var1, var2):
    var3 = var4(var1, var2)
    var5 = [var6 for var6, var7 in var3.items() if var7 == float('inf')]
    return (var3, var5)",Dijkstra
668,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = var8.heappop(var5)
        if var6 > var3[var7]:
            continue
        for var9, var10 in var1[var7]:
            if var3[var9] > var3[var7] + var10:
                var3[var9] = var3[var7] + var10
                var8.heappush(var5, (var3[var9], var9))
    return var3",Dijkstra
669,"def var0(var1, var2):
    if not var1:
        return {}
    return var3(var1, var2)",Dijkstra
670,"def var0(var1, var2):
    if var2 not in var1:
        return {var2: 0}
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    return var3",Dijkstra
671,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
672,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
673,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
674,"from functools import reduce
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var6}, var5, var3)",Dijkstra
675,"import heapq
def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
676,"class var0:
    def var1(var2):
        var2.heap = []
    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)
    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6
    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break
    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break
def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
677,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
678,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
679,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
680,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {}
    for var4 in var1:
        if var3[var4] == float('inf'):
            var10[var4] = None
        else:
            var10[var4] = var3[var4]
    return var10",Dijkstra
681,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
682,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
683,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
684,"from functools import reduce
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
685,"import heapq
def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
686,"class var0:
    def var1(var2):
        var2.heap = []
    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)
    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6
    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break
    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break
def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
687,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
688,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
689,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
690,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {}
    for var4 in var1:
        if var3[var4] == float('inf'):
            var10[var4] = None
        else:
            var10[var4] = var3[var4]
    return var10",Dijkstra
691,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
692,"import heapq
def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            if var1[var7][var8] != 0:
                var9 = var1[var7][var8]
                if var4[var7] + var9 < var4[var8]:
                    var4[var8] = var4[var7] + var9
                    heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
693,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = []
    var6.heappush(var5, (0, var2))
    while var5:
        var7, var4 = var6.heappop(var5)
        if var7 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var6.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
694,"def var0(var1, var2):
    def var3(var4):
        for var5, var6 in var1[var4].items():
            yield (var5, var6)
    var7 = {var4: float('inf') for var4 in var1}
    var7[var2] = 0
    var8 = [(0, var2)]
    while var8:
        var9, var4 = var10.heappop(var8)
        if var9 > var7[var4]:
            continue
        for var5, var6 in var3(var4):
            if var7[var4] + var6 < var7[var5]:
                var7[var5] = var7[var4] + var6
                var10.heappush(var8, (var7[var5], var5))
    return var7",Dijkstra
695,"from functools import reduce
def dijkstra_functional(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    pq = [(0, start)]
    return reduce(lambda dists, (dist, node): dists if dist > dists[node] else (dists[node], dists[node] + weight) for neighbor, weight in graph[node].items() if distances[node] + weight < dists[neighbor] for _, dists in [(neighbor, dists)] if dists is not None, distances, pq)",Dijkstra
696,"import heapq
def var0(var1, var2):
    for var3 in var1:
        for var4, var5 in var1[var3].items():
            if var5 < 0:
                raise ValueError('Negative edge weights not allowed')
    return var6(var1, var2)",Dijkstra
697,"import heapq
def var0(var1, var2):
    var3 = var4(var1, var2)
    var5 = [var6 for var6, var7 in var3.items() if var7 == float('inf')]
    return (var3, var5)",Dijkstra
698,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4]:
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
699,"import heapq
def var0(var1, var2, var3):
    var4 = {var5: float('inf') for var5 in var1}
    var4[var2] = 0
    var6 = {var5: None for var5 in var1}
    var7 = [(0, var2)]
    while var7:
        var8, var5 = heapq.heappop(var7)
        if var8 > var4[var5]:
            continue
        for var9, var10 in var1[var5].items():
            if var4[var5] + var10 < var4[var9]:
                var4[var9] = var4[var5] + var10
                var6[var9] = var5
                heapq.heappush(var7, (var4[var9], var9))
    var11 = []
    var12 = var3
    while var12 is not None:
        var11.append(var12)
        var12 = var6[var12]
    return (var4, var11[::-1])",Dijkstra
700,"import heapq
def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var3[var7]:
            continue
        if var7 in var1:
            for var8, var9 in var1[var7].items():
                if var3[var7] + var9 < var3[var8]:
                    var3[var8] = var3[var7] + var9
                    heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
701,"import heapq
var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2.append((var4, var5, var6))
var7 = int(input())
var8 = {var9: float('inf') for var9 in range(1, var0 + 1)}
var8[var7] = 0
var10 = [(0, var7)]
var11 = {var9: [] for var9 in range(1, var0 + 1)}
var11[var7] = [var7]
while var10:
    var12, var4 = heapq.heappop(var10)
    if var12 > var8[var4]:
        continue
    for var5, var6 in [(var13[1], var13[2]) for var13 in var2 if var13[0] == var4]:
        if var8[var4] + var6 < var8[var5]:
            var8[var5] = var8[var4] + var6
            var11[var5] = var11[var4] + [var5]
            heapq.heappush(var10, (var8[var5], var5))
for var9 in range(1, var0 + 1):",Dijkstra
702,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * (var0 + 1)
var8[var7] = 0
var9 = [None] * (var0 + 1)
var10 = [(0, var7)]
while var10:
    var11, var4 = heapq.heappop(var10)
    if var11 > var8[var4]:
        continue
    for var12, var13 in var2[var4]:
        if var8[var4] + var13 < var8[var12]:
            var8[var12] = var8[var4] + var13
            var9[var12] = var4
            heapq.heappush(var10, (var8[var12], var12))
for var14 in range(1, var0 + 1):
    var15 = []
    var16 = var14
    while var16 is not None:
        var15.insert(0, var16)
        var16 = var9[var16]",Dijkstra
703,"import heapq
var0, var1 = map(int, input().split())
var2 = {}
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    if var4 not in var2:
        var2[var4] = []
    if var5 not in var2:
        var2[var5] = []
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = {var9: float('inf') for var9 in var2}
var8[var7] = 0
var10 = {var9: None for var9 in var2}
var11 = [(0, var7)]
while var11:
    var12, var9 = heapq.heappop(var11)
    if var12 > var8[var9]:
        continue
    if var9 in var2:
        for var13, var14 in var2[var9]:
            if var8[var9] + var14 < var8[var13]:
                var8[var13] = var8[var9] + var14
                var10[var13] = var9
                heapq.heappush(var11, (var8[var13], var13))
for var9 in var2:
    var15 = []
    var16 = var9
    while var16 is not None:
        var15.insert(0, var16)
        var16 = var10[var16]",Dijkstra
704,"import heapq
var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2.append((var4, var5, var6))
var7 = int(input())
var8 = {var9: float('inf') for var9 in range(1, var0 + 1)}
var8[var7] = 0
var10 = {var9: None for var9 in range(1, var0 + 1)}
var11 = [(0, var7)]
while var11:
    var12, var13 = heapq.heappop(var11)
    if var12 > var8[var13]:
        continue
    for var4, var5, var6 in var2:
        if var4 == var13:
            if var8[var4] + var6 < var8[var5]:
                var8[var5] = var8[var4] + var6
                var10[var5] = var4
                heapq.heappush(var11, (var8[var5], var5))
for var9 in range(1, var0 + 1):
    var14 = []
    var15 = var9
    while var15 is not None:
        var14.insert(0, var15)
        var15 = var10[var15]",Dijkstra
705,"import heapq
var0, var1 = map(int, input().split())
var2 = [[0] * (var0 + 1) for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4][var5] = var6
var7 = int(input())
var8 = [float('inf')] * (var0 + 1)
var8[var7] = 0
var9 = [False] * (var0 + 1)
var10 = [(0, var7)]
var11 = {var12: [var7] if var12 == var7 else [] for var12 in range(1, var0 + 1)}
while var10:
    var13, var4 = heapq.heappop(var10)
    if var9[var4]:
        continue
    var9[var4] = True
    for var5 in range(1, var0 + 1):
        if var2[var4][var5] != 0:
            if var8[var4] + var2[var4][var5] < var8[var5]:
                var8[var5] = var8[var4] + var2[var4][var5]
                var11[var5] = var11[var4] + [var5]
                heapq.heappush(var10, (var8[var5], var5))
for var12 in range(1, var0 + 1):",Dijkstra
706,"import heapq
var0, var1 = map(int, input().split())
var2 = {}
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    if var4 not in var2:
        var2[var4] = []
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = {var9: float('inf') for var9 in var2}
var8[var7] = 0
var10 = {var9: None for var9 in var2}
var11 = [(0, var7)]
while var11:
    var12, var4 = heapq.heappop(var11)
    if var12 > var8[var4]:
        continue
    if var4 in var2:
        for var5, var13 in var2[var4]:
            if var8[var4] + var13 < var8[var5]:
                var8[var5] = var8[var4] + var13
                var10[var5] = var4
                heapq.heappush(var11, (var8[var5], var5))
for var9 in var2:
    var14 = []
    var15 = var9
    while var15 is not None:
        var14.insert(0, var15)
        var15 = var10[var15]",Dijkstra
707,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * (var0 + 1)
var8[var7] = 0
var9 = [None] * (var0 + 1)
var10 = [(0, var7)]
while var10:
    var11, var12 = heapq.heappop(var10)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var12] + var14 < var8[var13]:
            var8[var13] = var8[var12] + var14
            var9[var13] = var12
            heapq.heappush(var10, (var8[var13], var13))
for var15 in range(1, var0 + 1):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.insert(0, var17)
        var17 = var9[var17]",Dijkstra
708,"import heapq
var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2.append((var4, var5, var6))
var7 = int(input())
var8 = {var9: float('inf') for var9 in range(1, var0 + 1)}
var8[var7] = 0
var10 = {var9: None for var9 in range(1, var0 + 1)}
var11 = [(0, var7)]
while var11:
    var12, var13 = heapq.heappop(var11)
    if var12 > var8[var13]:
        continue
    for var4, var5, var6 in var2:
        if var4 == var13:
            if var8[var4] + var6 < var8[var5]:
                var8[var5] = var8[var4] + var6
                var10[var5] = var4
                heapq.heappush(var11, (var8[var5], var5))
for var9 in range(1, var0 + 1):
    var14 = []
    var15 = var9
    while var15 is not None:
        var14.insert(0, var15)
        var15 = var10[var15]",Dijkstra
709,"import heapq
var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2.append((var4, var5, var6))
var7 = int(input())
var8 = {var9: float('inf') for var9 in range(1, var0 + 1)}
var8[var7] = 0
var10 = {var9: None for var9 in range(1, var0 + 1)}
var11 = [(0, var7)]
while var11:
    var12, var4 = heapq.heappop(var11)
    if var12 > var8[var4]:
        continue
    for var5, var6 in [(var13[1], var13[2]) for var13 in var2 if var13[0] == var4]:
        if var8[var4] + var6 < var8[var5]:
            var8[var5] = var8[var4] + var6
            var10[var5] = var4
            heapq.heappush(var11, (var8[var5], var5))
for var9 in range(1, var0 + 1):
    var14 = []
    var15 = var9
    while var15 is not None:
        var14.insert(0, var15)
        var15 = var10[var15]",Dijkstra
710,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0 + 1)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * (var0 + 1)
var8[var7] = 0
var9 = [None] * (var0 + 1)
var10 = [(0, var7)]
while var10:
    var11, var4 = heapq.heappop(var10)
    if var11 > var8[var4]:
        continue
    for var5, var6 in var2[var4]:
        if var8[var4] + var6 < var8[var5]:
            var8[var5] = var8[var4] + var6
            var9[var5] = var4
            heapq.heappush(var10, (var8[var5], var5))
for var12 in range(1, var0 + 1):
    var13 = []
    var14 = var12
    while var14 is not None:
        var13.insert(0, var14)
        var14 = var9[var14]",Dijkstra
711,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
712,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        var15 = var8[var12] + var14
        if var15 < var8[var13]:
            var8[var13] = var15
            var10[var13] = var12
            heapq.heappush(var9, (var15, var13))
for var16 in range(var0):
def var17(var18):
    var19 = []
    var20 = var18
    while var20 is not None:
        var19.append(var20)
        var20 = var10[var20]
    return var19[::-1]
for var16 in range(var0):
    var19 = var17(var16)",Dijkstra
713,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var13] > var8[var12] + var14:
            var8[var13] = var8[var12] + var14
            var10[var13] = var12
            heapq.heappush(var9, (var8[var13], var13))
for var15 in range(var0):
def var16(var17):
    var18 = []
    var19 = var17
    while var19 is not None:
        var18.append(var19)
        var19 = var10[var19]
    return var18[::-1]
for var15 in range(var0):
    var18 = var16(var15)",Dijkstra
714,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
715,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var13] > var8[var12] + var14:
            var8[var13] = var8[var12] + var14
            var10[var13] = var12
            heapq.heappush(var9, (var8[var13], var13))
for var15 in range(var0):
def var16(var17):
    var18 = []
    var19 = var17
    while var19 is not None:
        var18.append(var19)
        var19 = var10[var19]
    return var18[::-1]
for var15 in range(var0):
    var20 = var16(var15)",Dijkstra
716,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
717,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
718,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
719,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        var15 = var8[var12] + var14
        if var15 < var8[var13]:
            var8[var13] = var15
            var10[var13] = var12
            heapq.heappush(var9, (var15, var13))
for var16 in range(var0):
def var17(var18):
    var19 = []
    var20 = var18
    while var20 is not None:
        var19.append(var20)
        var20 = var10[var20]
    return var19[::-1]
for var16 in range(var0):
    var21 = var17(var16)",Dijkstra
720,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var18 = var14(var13)",Dijkstra
721,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
722,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var13] > var8[var12] + var14:
            var8[var13] = var8[var12] + var14
            var10[var13] = var12
            heapq.heappush(var9, (var8[var13], var13))
for var15 in range(var0):
def var16(var17):
    var18 = []
    var19 = var17
    while var19 is not None:
        var18.append(var19)
        var19 = var10[var19]
    return var18[::-1]
for var15 in range(var0):
    var18 = var16(var15)",Dijkstra
723,"import heapq
var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2.append((var4, var5, var6))
var7 = int(input())
var8 = [[] for var3 in range(var0)]
for var4, var5, var6 in var2:
    var8[var4].append((var5, var6))
var9 = [float('inf')] * var0
var9[var7] = 0
var10 = [(0, var7)]
var11 = [None] * var0
while var10:
    var12, var4 = heapq.heappop(var10)
    if var12 > var9[var4]:
        continue
    for var5, var13 in var8[var4]:
        if var9[var5] > var9[var4] + var13:
            var9[var5] = var9[var4] + var13
            var11[var5] = var4
            heapq.heappush(var10, (var9[var5], var5))
for var14 in range(var0):
def var15(var16):
    var17 = []
    var18 = var16
    while var18 is not None:
        var17.append(var18)
        var18 = var11[var18]
    return var17[::-1]
for var14 in range(var0):
    var17 = var15(var14)",Dijkstra
724,"import heapq
var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2.append((var4, var5, var6))
var7 = int(input())
var8 = [[] for var3 in range(var0)]
for var9, var10, var11 in var2:
    var8[var9].append((var10, var11))
var12 = [float('inf')] * var0
var12[var7] = 0
var13 = [(0, var7)]
var14 = [None] * var0
while var13:
    var15, var16 = heapq.heappop(var13)
    if var15 > var12[var16]:
        continue
    for var17, var18 in var8[var16]:
        var19 = var15 + var18
        if var19 < var12[var17]:
            var12[var17] = var19
            var14[var17] = var16
            heapq.heappush(var13, (var19, var17))
for var20 in range(var0):
def var21(var22):
    var23 = []
    var24 = var22
    while var24 is not None:
        var23.append(var24)
        var24 = var14[var24]
    return var23[::-1]
for var20 in range(var0):
    var23 = var21(var20)",Dijkstra
725,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
726,"import heapq
var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2.append((var4, var5, var6))
var7 = int(input())
var8 = [[] for var3 in range(var0)]
for var9, var10, var11 in var2:
    var8[var9].append((var10, var11))
var12 = [float('inf')] * var0
var12[var7] = 0
var13 = [(0, var7)]
var14 = [None] * var0
while var13:
    var15, var16 = heapq.heappop(var13)
    if var15 > var12[var16]:
        continue
    for var17, var6 in var8[var16]:
        var18 = var15 + var6
        if var18 < var12[var17]:
            var12[var17] = var18
            var14[var17] = var16
            heapq.heappush(var13, (var18, var17))
for var19 in range(var0):
def var20(var21):
    var22 = []
    var23 = var21
    while var23 is not None:
        var22.append(var23)
        var23 = var14[var23]
    return var22[::-1]
for var19 in range(var0):
    var22 = var20(var19)",Dijkstra
727,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var18 = var14(var13)",Dijkstra
728,"import heapq
var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2.append((var4, var5, var6))
var7 = int(input())
var8 = [[] for var3 in range(var0)]
for var4, var5, var6 in var2:
    var8[var4].append((var5, var6))
var9 = [float('inf')] * var0
var9[var7] = 0
var10 = [(0, var7)]
var11 = [None] * var0
while var10:
    var12, var4 = heapq.heappop(var10)
    if var12 > var9[var4]:
        continue
    for var5, var13 in var8[var4]:
        if var9[var5] > var9[var4] + var13:
            var9[var5] = var9[var4] + var13
            var11[var5] = var4
            heapq.heappush(var10, (var9[var5], var5))
for var14 in range(var0):
def var15(var16):
    var17 = []
    var18 = var16
    while var18 is not None:
        var17.append(var18)
        var18 = var11[var18]
    return var17[::-1]
for var14 in range(var0):
    var17 = var15(var14)",Dijkstra
729,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        var15 = var11 + var14
        if var15 < var8[var13]:
            var8[var13] = var15
            var10[var13] = var12
            heapq.heappush(var9, (var15, var13))
for var16 in range(var0):
def var17(var18):
    var19 = []
    var20 = var18
    while var20 is not None:
        var19.append(var20)
        var20 = var10[var20]
    return var19[::-1]
for var16 in range(var0):
    var19 = var17(var16)",Dijkstra
730,"import heapq
var0, var1 = map(int, input().split())
var2 = []
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2.append((var4, var5, var6))
var7 = int(input())
var8 = [[] for var3 in range(var0)]
for var4, var5, var6 in var2:
    var8[var4].append((var5, var6))
var9 = [float('inf')] * var0
var9[var7] = 0
var10 = [(0, var7)]
var11 = [None] * var0
while var10:
    var12, var4 = heapq.heappop(var10)
    if var12 > var9[var4]:
        continue
    for var5, var13 in var8[var4]:
        if var9[var5] > var9[var4] + var13:
            var9[var5] = var9[var4] + var13
            var11[var5] = var4
            heapq.heappush(var10, (var9[var5], var5))
for var14 in range(var0):
def var15(var16):
    var17 = []
    var18 = var16
    while var18 is not None:
        var17.append(var18)
        var18 = var11[var18]
    return var17[::-1]
for var14 in range(var0):
    var17 = var15(var14)",Dijkstra
731,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
732,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var13] > var8[var12] + var14:
            var8[var13] = var8[var12] + var14
            var10[var13] = var12
            heapq.heappush(var9, (var8[var13], var13))
for var15 in range(var0):
def var16(var17):
    var18 = []
    var19 = var17
    while var19 is not None:
        var18.append(var19)
        var19 = var10[var19]
    return var18[::-1]
for var15 in range(var0):
    var18 = var16(var15)",Dijkstra
733,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var13] > var8[var12] + var14:
            var8[var13] = var8[var12] + var14
            var10[var13] = var12
            heapq.heappush(var9, (var8[var13], var13))
for var15 in range(var0):
def var16(var17):
    var18 = []
    var19 = var17
    while var19 is not None:
        var18.append(var19)
        var19 = var10[var19]
    return var18[::-1]
for var15 in range(var0):
    var20 = var16(var15)",Dijkstra
734,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
735,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var13] > var8[var12] + var14:
            var8[var13] = var8[var12] + var14
            var10[var13] = var12
            heapq.heappush(var9, (var8[var13], var13))
for var15 in range(var0):
def var16(var17):
    var18 = []
    var19 = var17
    while var19 is not None:
        var18.append(var19)
        var19 = var10[var19]
    return var18[::-1]
for var15 in range(var0):
    var20 = var16(var15)",Dijkstra
736,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var13] > var8[var12] + var14:
            var8[var13] = var8[var12] + var14
            var10[var13] = var12
            heapq.heappush(var9, (var8[var13], var13))
for var15 in range(var0):
def var16(var17):
    var18 = []
    var19 = var17
    while var19 is not None:
        var18.append(var19)
        var19 = var10[var19]
    return var18[::-1]
for var15 in range(var0):
    var20 = var16(var15)",Dijkstra
737,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var13] > var8[var12] + var14:
            var8[var13] = var8[var12] + var14
            var10[var13] = var12
            heapq.heappush(var9, (var8[var13], var13))
for var15 in range(var0):
def var16(var17):
    var18 = []
    var19 = var17
    while var19 is not None:
        var18.append(var19)
        var19 = var10[var19]
    return var18[::-1]
for var15 in range(var0):
    var18 = var16(var15)",Dijkstra
738,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
739,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var13] > var8[var12] + var14:
            var8[var13] = var8[var12] + var14
            var10[var13] = var12
            heapq.heappush(var9, (var8[var13], var13))
for var15 in range(var0):
def var16(var17):
    var18 = []
    var19 = var17
    while var19 is not None:
        var18.append(var19)
        var19 = var10[var19]
    return var18[::-1]
for var15 in range(var0):
    var18 = var16(var15)",Dijkstra
740,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.append(var17)
        var17 = var10[var17]
    return var16[::-1]
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
741,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.insert(0, var17)
        var17 = var10[var17]
    return var16
for var13 in range(var0):
    var16 = var14(var13)",Dijkstra
742,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        var15 = var11 + var14
        if var15 < var8[var13]:
            var8[var13] = var15
            var10[var13] = var12
            heapq.heappush(var9, (var15, var13))
for var16 in range(var0):
def var17(var18):
    var19 = []
    var20 = var18
    while var20 is not None:
        var19.insert(0, var20)
        var20 = var10[var20]
    return var19
for var16 in range(var0):",Dijkstra
743,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.insert(0, var17)
        var17 = var10[var17]
    return var16
for var13 in range(var0):",Dijkstra
744,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var12 = heapq.heappop(var9)
    if var11 > var8[var12]:
        continue
    for var13, var14 in var2[var12]:
        if var8[var13] > var8[var12] + var14:
            var8[var13] = var8[var12] + var14
            var10[var13] = var12
            heapq.heappush(var9, (var8[var13], var13))
for var15 in range(var0):
def var16(var17):
    var18 = []
    var19 = var17
    while var19 is not None:
        var18.insert(0, var19)
        var19 = var10[var19]
    return var18
for var15 in range(var0):",Dijkstra
745,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.insert(0, var17)
        var17 = var10[var17]
    return var16
for var13 in range(var0):",Dijkstra
746,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.insert(0, var17)
        var17 = var10[var17]
    return var16
for var13 in range(var0):",Dijkstra
747,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var6 in var2[var4]:
        if var8[var5] > var8[var4] + var6:
            var8[var5] = var8[var4] + var6
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var12 in range(var0):
def var13(var14):
    var15 = []
    var16 = var14
    while var16 is not None:
        var15.insert(0, var16)
        var16 = var10[var16]
    return var15
for var12 in range(var0):",Dijkstra
748,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.insert(0, var17)
        var17 = var10[var17]
    return var16
for var13 in range(var0):",Dijkstra
749,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.insert(0, var17)
        var17 = var10[var17]
    return var16
for var13 in range(var0):",Dijkstra
750,"import heapq
var0, var1 = map(int, input().split())
var2 = [[] for var3 in range(var0)]
for var3 in range(var1):
    var4, var5, var6 = map(int, input().split())
    var2[var4].append((var5, var6))
var7 = int(input())
var8 = [float('inf')] * var0
var8[var7] = 0
var9 = [(0, var7)]
var10 = [None] * var0
while var9:
    var11, var4 = heapq.heappop(var9)
    if var11 > var8[var4]:
        continue
    for var5, var12 in var2[var4]:
        if var8[var5] > var8[var4] + var12:
            var8[var5] = var8[var4] + var12
            var10[var5] = var4
            heapq.heappush(var9, (var8[var5], var5))
for var13 in range(var0):
def var14(var15):
    var16 = []
    var17 = var15
    while var17 is not None:
        var16.insert(0, var17)
        var17 = var10[var17]
    return var16
for var13 in range(var0):",Dijkstra
751,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
752,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(var2 - var4):
            if var1[var5:var5 + var4] == var1[0:var4]:
                var3[var4] = var4
                break
    return var3",ZFunc
753,"def var0(var1):
    var2 = len(var1)
    yield 0
    for var3 in range(1, var2):
        yield max((var4 for var4 in range(1, var2 - var3 + 1) if var1[var3:var3 + var4] == var1[:var4]))",ZFunc
754,"def var0(var1, var2, var3, var4, var5):
    var6 = len(var1)
    if var2 == var6:
        return var5
    if var2 > var4:
        var3 = var4 = var2
        while var4 < var6 and var1[var4 - var3] == var1[var4]:
            var4 += 1
        var5[var2] = var4 - var3
        var4 -= 1
    else:
        var7 = var2 - var3
        if var5[var7] < var4 - var2 + 1:
            var5[var2] = var5[var7]
        else:
            var3 = var2
            while var4 < var6 and var1[var4 - var3] == var1[var4]:
                var4 += 1
            var5[var2] = var4 - var3
            var4 -= 1
    return var0(var1, var2 + 1, var3, var4, var5)",ZFunc
755,"def var0(var1):
    var2 = len(var1)
    return [max((var3 for var3 in range(1, var2 - var4 + 1) if var1[var4:var4 + var3] == var1[:var3])) for var4 in range(var2)]",ZFunc
756,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3",ZFunc
757,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    def var4(var5, var6, var7):
        if var5 > var7:
            var8 = var9 = var5
            while var9 < var2 and var1[var9 - var8] == var1[var9]:
                var9 += 1
            return (var8, var9, var9 - var8)
        else:
            var10 = var5 - var6
            if var3[var10] < var7 - var5 + 1:
                return (var6, var7, var3[var10])
            else:
                var8 = var5
                while var7 < var2 and var1[var7 - var8] == var1[var7]:
                    var7 += 1
                return (var8, var7, var7 - var8)
    var6, var7 = (0, 0)
    for var11 in range(1, var2):
        var6, var7, var3[var11] = var4(var11, var6, var7)
    return var3",ZFunc
758,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3",ZFunc
759,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var7 = 0
            while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                var7 += 1
            var3[var6] = var7
            var4 = var6
            var5 = var6 + var7 - 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var7 = var5 - var6 + 1
                while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                    var7 += 1
                var3[var6] = var7
                var4 = var6
                var5 = var6 + var7 - 1
    return var3",ZFunc
760,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
761,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
762,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(var2 - var4):
            if var1[var5:var5 + var4] == var1[0:var4]:
                var3[var4] = var4
                break
    return var3",ZFunc
763,"def var0(var1):
    var2 = len(var1)
    yield 0
    for var3 in range(1, var2):
        yield max((var4 for var4 in range(1, var2 - var3 + 1) if var1[var3:var3 + var4] == var1[:var4]))",ZFunc
764,"def var0(var1, var2, var3, var4, var5):
    var6 = len(var1)
    if var2 == var6:
        return var5
    if var2 > var4:
        var3 = var4 = var2
        while var4 < var6 and var1[var4 - var3] == var1[var4]:
            var4 += 1
        var5[var2] = var4 - var3
        var4 -= 1
    else:
        var7 = var2 - var3
        if var5[var7] < var4 - var2 + 1:
            var5[var2] = var5[var7]
        else:
            var3 = var2
            while var4 < var6 and var1[var4 - var3] == var1[var4]:
                var4 += 1
            var5[var2] = var4 - var3
            var4 -= 1
    return var0(var1, var2 + 1, var3, var4, var5)",ZFunc
765,"def var0(var1):
    var2 = len(var1)
    return [max((var3 for var3 in range(1, var2 - var4 + 1) if var1[var4:var4 + var3] == var1[:var3])) for var4 in range(var2)]",ZFunc
766,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3",ZFunc
767,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    def var4(var5, var6, var7):
        if var5 > var7:
            var8 = var9 = var5
            while var9 < var2 and var1[var9 - var8] == var1[var9]:
                var9 += 1
            return (var8, var9, var9 - var8)
        else:
            var10 = var5 - var6
            if var3[var10] < var7 - var5 + 1:
                return (var6, var7, var3[var10])
            else:
                var8 = var5
                while var7 < var2 and var1[var7 - var8] == var1[var7]:
                    var7 += 1
                return (var8, var7, var7 - var8)
    var6, var7 = (0, 0)
    for var11 in range(1, var2):
        var6, var7, var3[var11] = var4(var11, var6, var7)
    return var3",ZFunc
768,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    var6 = 1
    while var6 < var2:
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
        var6 += 1
    return var3",ZFunc
769,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var7 = 0
            while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                var7 += 1
            var3[var6] = var7
            var4 = var6
            var5 = var6 + var7 - 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var7 = var5 - var6 + 1
                while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                    var7 += 1
                var3[var6] = var7
                var4 = var6
                var5 = var6 + var7 - 1
    return var3",ZFunc
770,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3",ZFunc
771,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
772,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(var2 - var4):
            if var1[var5:var5 + var4] == var1[0:var4]:
                var3[var4] = var4
                break
    return var3",ZFunc
773,"def var0(var1):
    var2 = len(var1)
    yield 0
    for var3 in range(1, var2):
        yield max((var4 for var4 in range(1, var2 - var3 + 1) if var1[var3:var3 + var4] == var1[:var4]))",ZFunc
774,"def var0(var1):
    var2 = len(var1)
    def var3(var4):
        if var4 == 0:
            return 0
        var5 = 0
        for var6 in range(1, var2 - var4 + 1):
            if var1[var4:var4 + var6] == var1[:var6]:
                var5 = var6
        return var5
    return [var3(var7) for var7 in range(var2)]",ZFunc
775,"def var0(var1):
    var2 = len(var1)
    return [len(var3(lambda var4: var1[var4] == var1[var5], range(var2 - var5))) for var5 in range(var2)]
def var3(var6, var7):
    var8 = []
    for var9 in var7:
        if var6(var9):
            var8.append(var9)
        else:
            break
    return var8",ZFunc
776,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
777,"def var0(var1):
    var2 = len(var1)
    return [max((len(var4(var1, var1[var3:])) for var3 in range(var2))) if var3 > 0 else 0 for var3 in range(var2)]
def var4(var5, var6):
    var3 = 0
    while var3 < len(var5) and var3 < len(var6) and (var5[var3] == var6[var3]):
        var3 += 1
    return var5[:var3]",ZFunc
778,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var8 = var5 + 1
                while var8 < var2 and var1[var8] == var1[var8 - var6]:
                    var8 += 1
                var3[var6] = var8 - var6
                var4 = var6
                var5 = var8 - 1
        else:
            var8 = 0
            while var8 < var2 - var6 and var1[var8] == var1[var8 + var6]:
                var8 += 1
            var3[var6] = var8
            if var8 > 0:
                var4 = var6
                var5 = var6 + var8 - 1
    return var3",ZFunc
779,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = 0
        while var4 + var5 < var2 and var1[var5] == var1[var4 + var5]:
            var5 += 1
        var3[var4] = var5
    return var3",ZFunc
780,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
781,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
782,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(var2 - var4):
            if var1[var5:var5 + var4] == var1[0:var4]:
                var3[var4] = var4
                break
    return var3",ZFunc
783,"def var0(var1):
    var2 = len(var1)
    yield 0
    for var3 in range(1, var2):
        yield max((var4 for var4 in range(1, var2 - var3 + 1) if var1[var3:var3 + var4] == var1[:var4]))",ZFunc
784,"def var0(var1, var2, var3, var4, var5):
    var6 = len(var1)
    if var2 == var6:
        return var5
    if var2 > var4:
        var3 = var4 = var2
        while var4 < var6 and var1[var4 - var3] == var1[var4]:
            var4 += 1
        var5[var2] = var4 - var3
        var4 -= 1
    else:
        var7 = var2 - var3
        if var5[var7] < var4 - var2 + 1:
            var5[var2] = var5[var7]
        else:
            var3 = var2
            while var4 < var6 and var1[var4 - var3] == var1[var4]:
                var4 += 1
            var5[var2] = var4 - var3
            var4 -= 1
    return var0(var1, var2 + 1, var3, var4, var5)",ZFunc
785,"def var0(var1):
    var2 = len(var1)
    return [max((var3 for var3 in range(1, var2 - var4 + 1) if var1[var4:var4 + var3] == var1[:var3])) for var4 in range(var2)]",ZFunc
786,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3",ZFunc
787,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    def var4(var5, var6, var7):
        if var5 > var7:
            var8 = var9 = var5
            while var9 < var2 and var1[var9 - var8] == var1[var9]:
                var9 += 1
            return (var8, var9, var9 - var8)
        else:
            var10 = var5 - var6
            if var3[var10] < var7 - var5 + 1:
                return (var6, var7, var3[var10])
            else:
                var8 = var5
                while var7 < var2 and var1[var7 - var8] == var1[var7]:
                    var7 += 1
                return (var8, var7, var7 - var8)
    for var11 in range(1, var2):
        var6, var7, var12 = var4(var11, var6, var7)
        var3[var11] = var12
    return var3",ZFunc
788,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3",ZFunc
789,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var7 = 0
            while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                var7 += 1
            var3[var6] = var7
            var4 = var6
            var5 = var6 + var7 - 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var7 = var5 - var6 + 1
                while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                    var7 += 1
                var3[var6] = var7
                var4 = var6
                var5 = var6 + var7 - 1
    return var3",ZFunc
790,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3",ZFunc
791,"def var0(var1):
    var2, var3 = (0, 0)
    var4 = len(var1)
    var5 = [0] * var4
    for var6 in range(1, var4):
        if var6 > var3:
            var7, var8 = (var6, var4 - 1)
            while var7 < var4 and var1[var7] == var1[var7 - var6]:
                var7 += 1
            var5[var6] = var7 - var6
            var3 = var7 - 1
        else:
            var9 = var6 - var2
            if var5[var9] < var3 - var6 + 1:
                var5[var6] = var5[var9]
            else:
                var7, var8 = (var3 + 1, var4 - 1)
                while var7 < var4 and var1[var7] == var1[var7 - var6]:
                    var7 += 1
                var5[var6] = var7 - var6
                var2 = var6
                var3 = var7 - 1
    return var5",ZFunc
792,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3",ZFunc
793,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [0, 0]
    for var5 in range(1, var2):
        if var5 <= var4[1]:
            var6 = var5 - var4[0]
            var3[var5] = min(var4[1] - var5 + 1, var3[var6])
        while var5 + var3[var5] < var2 and var1[var3[var5]] == var1[var5 + var3[var5]]:
            var3[var5] += 1
        if var5 + var3[var5] - 1 > var4[1]:
            var4[0] = var5
            var4[1] = var5 + var3[var5] - 1
    return var3",ZFunc
794,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var7 = 0
            while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                var7 += 1
            var3[var6] = var7
            var4 = var6
            var5 = var6 + var7 - 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var7 = var5 - var6 + 1
                while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                    var7 += 1
                var3[var6] = var7
                var4 = var6
                var5 = var6 + var7 - 1
    return var3",ZFunc
795,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3",ZFunc
796,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var7 = 0
            while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                var7 += 1
            var3[var6] = var7
            var4 = var6
            var5 = var6 + var7 - 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var7 = var5 - var6 + 1
                while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                    var7 += 1
                var3[var6] = var7
                var4 = var6
                var5 = var6 + var7 - 1
    return var3",ZFunc
797,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var7 = 0
            var8 = 0
            while var6 + var8 < var2 and var1[var8] == var1[var6 + var8]:
                var8 += 1
            var3[var6] = var8
            var4 = var6
            var5 = var6 + var8 - 1
        else:
            var9 = var6 - var4
            if var3[var9] < var5 - var6 + 1:
                var3[var6] = var3[var9]
            else:
                var7 = var5 - var6 + 1
                var8 = 0
                while var6 + var8 < var2 and var1[var7 + var8] == var1[var6 + var8]:
                    var8 += 1
                var3[var6] = var8
                var4 = var6
                var5 = var6 + var8 - 1
    return var3",ZFunc
798,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var7 = 0
            while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                var7 += 1
            var3[var6] = var7
            var4 = var6
            var5 = var6 + var7 - 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var7 = var5 - var6 + 1
                while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                    var7 += 1
                var3[var6] = var7
                var4 = var6
                var5 = var6 + var7 - 1
    return var3",ZFunc
799,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var7 = 0
            while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                var7 += 1
            var3[var6] = var7
            var4 = var6
            var5 = var6 + var7 - 1
        else:
            var8 = var6 - var4
            if var3[var8] < var5 - var6 + 1:
                var3[var6] = var3[var8]
            else:
                var7 = var5 - var6 + 1
                while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
                    var7 += 1
                var3[var6] = var7
                var4 = var6
                var5 = var6 + var7 - 1
    return var3",ZFunc
800,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        var8 = 0
        while var6 + var8 < var2 and var1[var8] == var1[var6 + var8]:
            var8 += 1
        var3[var6] = var8
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3",ZFunc
801,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
802,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(var2 - var4):
            if var1[var5:var5 + var4] == var1[0:var4]:
                var3[var4] = var4
                break
    return var3",ZFunc
803,"def var0(var1):
    var2 = len(var1)
    yield 0
    for var3 in range(1, var2):
        yield max((var4 for var4 in range(1, var2 - var3 + 1) if var1[var3:var3 + var4] == var1[:var4]))",ZFunc
804,"def var0(var1):
    var2 = len(var1)
    def var3(var4):
        if var4 == 0:
            return 0
        var5 = 0
        for var6 in range(1, var2 - var4 + 1):
            if var1[:var6] == var1[var4:var4 + var6]:
                var5 = var6
        return var5
    return [var3(var7) for var7 in range(var2)]",ZFunc
805,"def var0(var1):
    var2 = len(var1)
    return [max((var3 for var3 in range(1, var2 - var4 + 1) if var1[var4:var4 + var3] == var1[:var3])) for var4 in range(var2)]",ZFunc
806,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
807,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    def var4(var5):
        return max((var6 for var6 in range(1, var2 - var5 + 1) if var1[var5:var5 + var6] == var1[:var6]))
    return list(map(var4, range(var2)))",ZFunc
808,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = 0
        while var4 + var5 < var2 and var1[var5] == var1[var4 + var5]:
            var5 += 1
        var3[var4] = var5
    return var3",ZFunc
809,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var8 = var5 - var6 + 1
                while var6 + var8 < var2 and var1[var8] == var1[var6 + var8]:
                    var8 += 1
                var3[var6] = var8
                var4 = var6
                var5 = var6 + var8 - 1
        else:
            var8 = 0
            while var6 + var8 < var2 and var1[var8] == var1[var6 + var8]:
                var8 += 1
            var3[var6] = var8
            if var8 > 0:
                var4 = var6
                var5 = var6 + var8 - 1
    return var3",ZFunc
810,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
811,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
812,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = 0
        for var6 in range(var2 - var4):
            if var1[var6:var6 + var4] == var1[var4:var4 + var4]:
                var5 = var4
        var3[var4] = var5
    return var3",ZFunc
813,"def var0(var1):
    def var2(var3):
        var4 = 0
        while var3 + var4 < len(var1) and var1[var4] == var1[var3 + var4]:
            var4 += 1
        return var4
    return [var2(var5) for var5 in range(len(var1))]",ZFunc
814,"def var0(var1):
    def var2(var3, var4, var5, var6):
        if var3 > var5:
            var4 = var5 = var3
            while var5 < len(var1) and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var6[var3] = var5 - var4
            var5 -= 1
            return (var4, var5)
        var7 = var3 - var4
        if var6[var7] < var5 - var3 + 1:
            var6[var3] = var6[var7]
            return (var4, var5)
        else:
            var4 = var3
            while var5 < len(var1) and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var6[var3] = var5 - var4
            var5 -= 1
            return (var4, var5)
    var6 = [0] * len(var1)
    var4, var5 = (0, 0)
    for var8 in range(1, len(var1)):
        var4, var5 = var2(var8, var4, var5, var6)
    return var6",ZFunc
815,"def var0(var1):
    var2 = len(var1)
    return [max(0, len(var1) - var4 - var3) if var1[var3:] == var1[var4:var4 + len(var1) - var4] else 0 for var4 in range(1, var2) for var3 in range(var4)]",ZFunc
816,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3",ZFunc
817,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    def var4(var5):
        var6 = 0
        while var5 + var6 < var2 and var1[var6] == var1[var5 + var6]:
            var6 += 1
        return var6
    return [var4(var7) for var7 in range(var2)]",ZFunc
818,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 - 1 and var1[var5 - var4 + 1] == var1[var5 + 1]:
                    var5 += 1
                var3[var6] = var5 - var4 + 1
        else:
            var4 = var6
            while var5 < var2 - 1 and var1[var5 - var4 + 1] == var1[var5 + 1]:
                var5 += 1
            var3[var6] = var5 - var4 + 1
    return var3",ZFunc
819,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    for var4 in range(1, var2):
        var5 = 0
        for var6 in range(var4):
            if var1[var6:var6 + var4] == var1[var4:var4 + var4]:
                var5 = var4
        var3[var4] = var5
    return [var3.get(var4, 0) for var4 in range(var2)]",ZFunc
820,"def var0(var1):
    var2 = len(var1)
    def var3(var4):
        var5 = 0
        for var6 in range(var2 - var4):
            if var1[:var6 + 1] == var1[var4:var4 + var6 + 1]:
                var5 = var6 + 1
        return var5
    return list(map(var3, range(1, var2)))",ZFunc
821,"var0 = input()
var1 = len(var0)
var2 = [0] * var1
var3 = 0
var4 = 0
for var5 in range(1, var1):
    if var5 > var4:
        var3 = var4 = var5
        while var4 < var1 and var0[var4 - var3] == var0[var4]:
            var4 += 1
        var2[var5] = var4 - var3
        var4 -= 1
    else:
        var6 = var5 - var3
        if var2[var6] < var4 - var5 + 1:
            var2[var5] = var2[var6]
        else:
            var3 = var5
            while var4 < var1 and var0[var4 - var3] == var0[var4]:
                var4 += 1
            var2[var5] = var4 - var3
            var4 -= 1",ZFunc
822,"var0 = input()
var1 = len(var0)
var2 = [0] * var1
var3 = 0
var4 = 0
var5 = 1
while var5 < var1:
    if var5 > var4:
        var3 = var4 = var5
        while var4 < var1 and var0[var4 - var3] == var0[var4]:
            var4 += 1
        var2[var5] = var4 - var3
        var4 -= 1
    else:
        var6 = var5 - var3
        if var2[var6] < var4 - var5 + 1:
            var2[var5] = var2[var6]
        else:
            var3 = var5
            while var4 < var1 and var0[var4 - var3] == var0[var4]:
                var4 += 1
            var2[var5] = var4 - var3
            var4 -= 1
    var5 += 1",ZFunc
823,"var0 = input()
var1 = len(var0)
var2 = [0] * var1
var3 = 0
var4 = 0
for var5 in range(1, var1):
    if var5 <= var3:
        var2[var5] = min(var3 - var5 + 1, var2[var5 - var3])
    while var5 + var2[var5] < var1 and var0[var2[var5]] == var0[var5 + var2[var5]]:
        var2[var5] += 1
    if var5 + var2[var5] - 1 > var3:
        var3 = var5 + var2[var5] - 1",ZFunc
824,"var0 = input()
var1 = len(var0)
var2 = [0] * var1
var3 = 0
var4 = 0
for var5 in range(1, var1):
    if var5 > var4:
        var3 = var4 = var5
        while var4 < var1 and var0[var4 - var3] == var0[var4]:
            var4 += 1
        var2[var5] = var4 - var3
        var4 -= 1
    else:
        var6 = var5 - var3
        if var2[var6] < var4 - var5 + 1:
            var2[var5] = var2[var6]
        else:
            var3 = var5
            while var4 < var1 and var0[var4 - var3] == var0[var4]:
                var4 += 1
            var2[var5] = var4 - var3
            var4 -= 1",ZFunc
825,"var0 = input()
var1 = len(var0)
var2 = [0] * var1
var3 = 0
var4 = 0
for var5 in range(1, var1):
    if var5 <= var4:
        var6 = var5 - var3
        var2[var5] = min(var4 - var5 + 1, var2[var6])
    while var5 + var2[var5] < var1 and var0[var2[var5]] == var0[var5 + var2[var5]]:
        var2[var5] += 1
    if var5 + var2[var5] - 1 > var4:
        var3 = var5
        var4 = var5 + var2[var5] - 1",ZFunc
826,"var0 = input()
var1 = len(var0)
var2 = [0] * var1
var3 = 0
var4 = 0
for var5 in range(1, var1):
    if var5 > var4:
        var3 = var5
        var4 = var5
        while var4 < var1 and var0[var4 - var3] == var0[var4]:
            var4 += 1
        var2[var5] = var4 - var3
        var4 -= 1
    else:
        var6 = var5 - var3
        if var2[var6] < var4 - var5 + 1:
            var2[var5] = var2[var6]
        else:
            var3 = var5
            while var4 < var1 and var0[var4 - var3] == var0[var4]:
                var4 += 1
            var2[var5] = var4 - var3
            var4 -= 1",ZFunc
827,"var0 = input()
var1 = len(var0)
var2 = [0] * var1
var3 = 0
var4 = 0
for var5 in range(1, var1):
    if var5 > var4:
        var3 = var4 = var5
        while var4 < var1 and var0[var4 - var3] == var0[var4]:
            var4 += 1
        var2[var5] = var4 - var3
        var4 -= 1
    else:
        var6 = var5 - var3
        if var2[var6] < var4 - var5 + 1:
            var2[var5] = var2[var6]
        else:
            var3 = var5
            while var4 < var1 and var0[var4 - var3] == var0[var4]:
                var4 += 1
            var2[var5] = var4 - var3
            var4 -= 1",ZFunc
828,"var0 = input()
var1 = len(var0)
var2 = [0] * var1
def var3(var4, var5):
    var6 = 0
    var7 = 0
    for var8 in range(1, var5):
        if var8 > var7:
            var6 = var7 = var8
            while var7 < var5 and var4[var7 - var6] == var4[var7]:
                var7 += 1
            var2[var8] = var7 - var6
            var7 -= 1
        else:
            var9 = var8 - var6
            if var2[var9] < var7 - var8 + 1:
                var2[var8] = var2[var9]
            else:
                var6 = var8
                while var7 < var5 and var4[var7 - var6] == var4[var7]:
                    var7 += 1
                var2[var8] = var7 - var6
                var7 -= 1
    return var2
var10 = var3(var0, var1)",ZFunc
829,"var0 = input()
var1 = len(var0)
var2 = [0] * var1
var3 = 0
var4 = 0
for var5 in range(1, var1):
    if var5 > var4:
        var3 = var4 = var5
        while var4 < var1 and var0[var4 - var3] == var0[var4]:
            var4 += 1
        var2[var5] = var4 - var3
        var4 -= 1
    else:
        var6 = var5 - var3
        if var2[var6] < var4 - var5 + 1:
            var2[var5] = var2[var6]
        else:
            var3 = var5
            while var4 < var1 and var0[var4 - var3] == var0[var4]:
                var4 += 1
            var2[var5] = var4 - var3
            var4 -= 1",ZFunc
830,"var0 = input()
var1 = len(var0)
var2 = [0] * var1
var3 = 0
var4 = 0
for var5 in range(1, var1):
    if var5 > var4:
        var3 = var4 = var5
        while var4 < var1 and var0[var4 - var3] == var0[var4]:
            var4 += 1
        var2[var5] = var4 - var3
        var4 -= 1
    else:
        var6 = var5 - var3
        if var2[var6] < var4 - var5 + 1:
            var2[var5] = var2[var6]
        else:
            var3 = var5
            while var4 < var1 and var0[var4 - var3] == var0[var4]:
                var4 += 1
            var2[var5] = var4 - var3
            var4 -= 1",ZFunc
831,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
832,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8)",ZFunc
833,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    var6 = 1
    while var6 < var2:
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
        var6 += 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
834,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8)",ZFunc
835,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
836,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
837,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
838,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
839,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
840,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8)",ZFunc
841,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
842,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    var6 = 1
    while var6 < var2:
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
        var6 += 1
    return var3
var7 = input()
var8 = len(var7)
var9 = var0(var7)",ZFunc
843,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3
var7 = input()
var2 = len(var7)
var8 = var0(var7)",ZFunc
844,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
845,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    var6 = 1
    while var6 < var2:
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
        var6 += 1
    return var3
var7 = input()
var2 = len(var7)
var8 = var0(var7)",ZFunc
846,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3
var7 = input()
var2 = len(var7)
var8 = var0(var7)",ZFunc
847,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            var7 = 0
            while var5 < var2 and var1[var7] == var1[var5]:
                var7 += 1
                var5 += 1
            var3[var6] = var7
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                var7 = 0
                while var5 < var2 and var1[var7] == var1[var5]:
                    var7 += 1
                    var5 += 1
                var3[var6] = var7
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
848,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3
var7 = input()
var2 = len(var7)
var8 = var0(var7)",ZFunc
849,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
850,"def var0(var1, var2, var3, var4, var5):
    var6 = len(var1)
    if var2 == var6:
        return var5
    if var2 <= var4:
        var5[var2] = min(var4 - var2 + 1, var5[var2 - var3])
    else:
        var7, var8 = (var2, var2)
        while var8 < var6 and var1[var8 - var7] == var1[var8]:
            var8 += 1
        var5[var2] = var8 - var7
        var3 = var2
        var4 = var8 - 1
    return var0(var1, var2 + 1, var3, var4, var5)
var9 = input()
var6 = len(var9)
var10 = [0] * var6
var11 = var0(var9, 1, 0, 0, var10)",ZFunc
851,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
852,"def var0(var1, var2):
    var3 = [0] * var2
    var4, var5 = (0, 0)
    var6 = 1
    while var6 < var2:
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        else:
            var4, var5 = (var6, var6)
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        var6 += 1
    return var3
var7 = input()
var8 = len(var7)
var9 = var0(var7, var8)",ZFunc
853,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
854,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
855,"def var0(var1, var2):
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
856,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        else:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
    return var3
var7 = input()
var8 = len(var7)
var9 = var0(var7, var8)",ZFunc
857,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    var6 = 1
    while var6 < var2:
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
        var6 += 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
858,"def var0(var1, var2):
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
859,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
860,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
861,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
862,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8)",ZFunc
863,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    var6 = 1
    while var6 < var2:
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
        var6 += 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
864,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8)",ZFunc
865,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
866,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
867,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
868,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
869,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
870,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
871,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
872,"def var0(var1, var2):
    var3 = [0] * var2
    var4, var5 = (0, 0)
    var6 = 1
    while var6 < var2:
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        else:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        var6 += 1
    return var3
var7 = input()
var8 = len(var7)
var9 = var0(var7, var8)",ZFunc
873,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            var7 = 0
            while var4 + var7 < var2 and var1[var7] == var1[var4 + var7]:
                var7 += 1
            var3[var6] = var7
            var5 = var4 + var7 - 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                var7 = var5 - var6 + 1
                while var4 + var7 < var2 and var1[var7] == var1[var4 + var7]:
                    var7 += 1
                var3[var6] = var7
                var5 = var4 + var7 - 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
874,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var8 = var6
                var9 = var5
                while var9 < var2 and var1[var9 - var8] == var1[var9]:
                    var9 += 1
                var3[var6] = var9 - var8
                var5 = var9 - 1
    return var3
var10 = input()
var11 = len(var10)
var12 = var0(var10, var11)",ZFunc
875,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        else:
            var4 = var5 = var6
            var7 = 0
            while var4 + var7 < var2 and var1[var7] == var1[var4 + var7]:
                var7 += 1
            var3[var6] = var7
            var5 = var4 + var7 - 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
876,"def var0(var1, var2):
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            var7 = 0
            while var4 + var7 < var2 and var1[var7] == var1[var4 + var7]:
                var7 += 1
            var3[var6] = var7
            var5 = var4 + var7 - 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                var7 = var5 - var6 + 1
                while var4 + var7 < var2 and var1[var7] == var1[var4 + var7]:
                    var7 += 1
                var3[var6] = var7
                var5 = var4 + var7 - 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
877,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var8 = var6
                var9 = var5
                while var9 < var2 and var1[var9 - var8] == var1[var9]:
                    var9 += 1
                var3[var6] = var9 - var8
                var5 = var9 - 1
    return var3
var10 = input()
var11 = len(var10)
var12 = var0(var10, var11)",ZFunc
878,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        else:
            var4 = var5 = var6
            var7 = 0
            while var4 + var7 < var2 and var1[var7] == var1[var4 + var7]:
                var7 += 1
            var3[var6] = var7
            var5 = var4 + var7 - 1
    return var3
var8 = input()
var9 = len(var8)",ZFunc
879,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var7 = var6 - var4
            var3[var6] = min(var5 - var6 + 1, var3[var7])
        else:
            var4 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
880,"def var0(var1, var2):
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            var7 = 0
            while var4 + var7 < var2 and var1[var7] == var1[var4 + var7]:
                var7 += 1
            var3[var6] = var7
            var5 = var4 + var7 - 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                var7 = var5 - var6 + 1
                while var4 + var7 < var2 and var1[var7] == var1[var4 + var7]:
                    var7 += 1
                var3[var6] = var7
                var5 = var4 + var7 - 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8, var9)",ZFunc
881,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3
var7 = input()
var8 = len(var7)
var9 = var0(var7)",ZFunc
882,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    var6 = 1
    while var6 < var2:
        if var6 > var5:
            var4 = var6
            var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
        var6 += 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8)",ZFunc
883,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var6
            var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        elif var3[var6 - var4] < var5 - var6 + 1:
            var3[var6] = var3[var6 - var4]
        else:
            var4 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
    return var3
var7 = input()
var8 = len(var7)
var9 = var0(var7)",ZFunc
884,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        var7 = 1 if var6 > var5 else min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
            var7 += 1
        var3[var6] = var7
        if var6 + var7 - 1 > var5:
            var4 = var6
            var5 = var6 + var7 - 1
    return var3
var1 = input()
var2 = len(var1)
var8 = var0(var1)",ZFunc
885,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        else:
            var4 = var6
            var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
    return var3
var7 = input()
var8 = len(var7)
var9 = var0(var7)",ZFunc
886,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var3[var6] < var2 and var1[var3[var6]] == var1[var6 + var3[var6]]:
            var3[var6] += 1
        if var6 + var3[var6] - 1 > var5:
            var4 = var6
            var5 = var6 + var3[var6] - 1
    return var3
var7 = input()
var2 = len(var7)
var8 = var0(var7)",ZFunc
887,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        var7 = 0 if var6 > var5 else min(var5 - var6 + 1, var3[var6 - var4])
        while var6 + var7 < var2 and var1[var7] == var1[var6 + var7]:
            var7 += 1
        var3[var6] = var7
        if var6 + var7 - 1 > var5:
            var4 = var6
            var5 = var6 + var7 - 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8)",ZFunc
888,"def var0(var1):
    var2 = [0] * len(var1)
    var3, var4 = (0, 0)
    for var5 in range(1, len(var1)):
        if var5 <= var4:
            var2[var5] = min(var4 - var5 + 1, var2[var5 - var3])
        else:
            var3 = var5
            var4 = var5
            while var4 < len(var1) and var1[var4 - var3] == var1[var4]:
                var4 += 1
            var2[var5] = var4 - var3
            var4 -= 1
    return var2
var1 = input()
var6 = var0(var1)",ZFunc
889,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 <= var5:
            var3[var6] = min(var5 - var6 + 1, var3[var6 - var4])
        else:
            var4 = var6
            var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
    return var3
var7 = input()
var2 = len(var7)
var8 = var0(var7)",ZFunc
890,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var6
            var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
891,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
892,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8)",ZFunc
893,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    var6 = 1
    while var6 < var2:
        if var6 <= var5:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
        else:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        var6 += 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
894,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var9 = len(var8)
var10 = var0(var8)",ZFunc
895,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
896,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
897,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
898,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
899,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 0
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
900,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4, var5 = (0, 0)
    for var6 in range(1, var2):
        if var6 > var5:
            var4 = var5 = var6
            while var5 < var2 and var1[var5 - var4] == var1[var5]:
                var5 += 1
            var3[var6] = var5 - var4
            var5 -= 1
        else:
            var7 = var6 - var4
            if var3[var7] < var5 - var6 + 1:
                var3[var6] = var3[var7]
            else:
                var4 = var6
                while var5 < var2 and var1[var5 - var4] == var1[var5]:
                    var5 += 1
                var3[var6] = var5 - var4
                var5 -= 1
    return var3
var8 = input()
var2 = len(var8)
var9 = var0(var8)",ZFunc
901,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var3] != var1[var4]:
            var3 = var2[var3 - 1]
        if var1[var3] == var1[var4]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
902,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 > 0:
            var5 = var3[var5 - 1]
        else:
            var4 += 1
    return var3",PrefixFunc
903,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(var4, 0, -1):
            if var1[:var5] == var1[var4 - var5 + 1:var4 + 1]:
                var3[var4] = var5
                break
    return var3",PrefixFunc
904,"def var0(var1):
    var2 = [0] * len(var1)
    for var3 in range(1, len(var1)):
        var4 = var2[var3 - 1]
        while var4 > 0 and var1[var3] != var1[var4]:
            var4 = var2[var4 - 1]
        if var1[var3] == var1[var4]:
            var4 += 1
        var2[var3] = var4
    return var2",PrefixFunc
905,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3",PrefixFunc
906,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
907,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
908,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3",PrefixFunc
909,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = 0
        while var5 < var4:
            if var1[:var5 + 1] == var1[var4 - var5:var4 + 1]:
                var3[var4] = var5 + 1
            var5 += 1
    return var3",PrefixFunc
910,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
911,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var3] != var1[var4]:
            var3 = var2[var3 - 1]
        if var1[var3] == var1[var4]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
912,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    var4 = 1
    while var4 < len(var1):
        if var1[var4] == var1[var3]:
            var3 += 1
            var2[var4] = var3
            var4 += 1
        elif var3 != 0:
            var3 = var2[var3 - 1]
        else:
            var2[var4] = 0
            var4 += 1
    return var2",PrefixFunc
913,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3",PrefixFunc
914,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 != 0:
            var5 = var3[var5 - 1]
        else:
            var3[var4] = 0
            var4 += 1
    return var3",PrefixFunc
915,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var4] != var1[var3]:
            var3 = var2[var3 - 1]
        if var1[var4] == var1[var3]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
916,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var4] != var1[var3]:
            var3 = var2[var3 - 1]
        if var1[var4] == var1[var3]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
917,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3",PrefixFunc
918,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3",PrefixFunc
919,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 > 0:
            var5 = var3[var5 - 1]
        else:
            var4 += 1
    return var3",PrefixFunc
920,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var4] != var1[var3]:
            var3 = var2[var3 - 1]
        if var1[var4] == var1[var3]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
921,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var3] != var1[var4]:
            var3 = var2[var3 - 1]
        if var1[var3] == var1[var4]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
922,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    var4 = 1
    while var4 < len(var1):
        if var1[var4] == var1[var3]:
            var3 += 1
            var2[var4] = var3
            var4 += 1
        elif var3 != 0:
            var3 = var2[var3 - 1]
        else:
            var2[var4] = 0
            var4 += 1
    return var2",PrefixFunc
923,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var4] != var1[var3]:
            var3 = var2[var3 - 1]
        if var1[var4] == var1[var3]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
924,"def var0(var1):
    var2 = [0] * len(var1)
    for var3 in range(1, len(var1)):
        for var4 in range(var3):
            if var1[:var3 + 1] == var1[var4 + 1:var3 + 1 + var4 + 1] and len(var1[:var3 + 1]) > var2[var3]:
                var2[var3] = len(var1[:var3 + 1])
    return var2",PrefixFunc
925,"def var0(var1):
    var2 = [0] * len(var1)
    def var3(var4):
        if var4 == 0:
            return 0
        var5 = var2[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var2[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        return var5
    for var6 in range(1, len(var1)):
        var2[var6] = var3(var6)
    return var2",PrefixFunc
926,"def var0(var1):
    var2 = [0] * len(var1)
    yield from (var2[var3] for var3 in range(len(var1)))
    for var3 in range(1, len(var1)):
        var4 = var2[var3 - 1]
        while var4 > 0 and var1[var3] != var1[var4]:
            var4 = var2[var4 - 1]
        if var1[var3] == var1[var4]:
            var4 += 1
        var2[var3] = var4
    return var2",PrefixFunc
927,"def var0(var1):
    var2 = [0] * len(var1)
    def var3(var4):
        def var5(var6):
            if var6 == 0:
                return 0
            var7 = var4(var6 - 1)
            while var7 > 0 and var1[var6] != var1[var7]:
                var7 = var2[var7 - 1]
            if var1[var6] == var1[var7]:
                var7 += 1
            return var7
        return var5
    @decorator
    def var8(var9):
        return 0
    for var10 in range(1, len(var1)):
        var2[var10] = var8(var10)
    return var2",PrefixFunc
928,"def var0(var1):
    var2 = [0] * len(var1)
    def var3(var4):
        if var4 == 0:
            return 0
        var5 = var2[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var2[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        return var5
    for var6 in range(1, len(var1)):
        var2[var6] = var3(var6)
    return var2",PrefixFunc
929,"def var0(var1):
    var2 = [0] * len(var1)
    for var3 in range(1, len(var1)):
        var2[var3] = max(0, *[var4 for var4 in range(var3) if var1[:var3 + 1] == var1[var4 + 1:var3 + 1 + var4 + 1]])
    return var2",PrefixFunc
930,"def var0(var1):
    var2 = [0] * len(var1)
    for var3 in range(1, len(var1)):
        var4 = 0
        for var5 in range(var3):
            if var1[:var3 + 1] == var1[var5 + 1:var3 + 1 + var5 + 1]:
                var4 = max(var4, len(var1[:var3 + 1]))
        var2[var3] = var4
    return var2",PrefixFunc
931,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var3] != var1[var4]:
            var3 = var2[var3 - 1]
        if var1[var3] == var1[var4]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
932,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 != 0:
            var5 = var3[var5 - 1]
        else:
            var3[var4] = 0
            var4 += 1
    return var3",PrefixFunc
933,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(var4, 0, -1):
            if var1[:var5] == var1[var4 - var5 + 1:var4 + 1]:
                var3[var4] = var5
                break
    return var3",PrefixFunc
934,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    def var4(var5):
        if var5 == 0:
            return 0
        for var6 in range(var5, 0, -1):
            if var1[:var6] == var1[var5 - var6 + 1:var5 + 1]:
                return var6
        return 0
    for var7 in range(1, var2):
        var3[var7] = var4(var7)
    return var3",PrefixFunc
935,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
936,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
937,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3",PrefixFunc
938,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(1, var4 + 1):
            if var1[:var5] == var1[var4 - var5 + 1:var4 + 1]:
                var3[var4] = var5
    return var3",PrefixFunc
939,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = 0
        for var6 in range(1, var4 + 1):
            if var1[:var6] == var1[var4 - var6 + 1:var4 + 1]:
                var5 = var6
        var3[var4] = var5
    return var3",PrefixFunc
940,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
941,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var3] != var1[var4]:
            var3 = var2[var3 - 1]
        if var1[var3] == var1[var4]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
942,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 != 0:
            var5 = var3[var5 - 1]
        else:
            var3[var4] = 0
            var4 += 1
    return var3",PrefixFunc
943,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(var4, 0, -1):
            if var1[:var5] == var1[var4 - var5 + 1:var4 + 1]:
                var3[var4] = var5
                break
    return var3",PrefixFunc
944,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var3[var4] = max(0, var3[var4 - 1] if var1[var4] == var1[var3[var4 - 1]] else 0)
        while var3[var4] > 0 and var1[var4] != var1[var3[var4]]:
            var3[var4] = var3[var3[var4] - 1]
        if var1[var4] == var1[var3[var4]]:
            var3[var4] += 1
    return var3",PrefixFunc
945,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    def var4(var5):
        if var5 == 0:
            return 0
        var6 = var3[var5 - 1]
        while var6 > 0 and var1[var5] != var1[var6]:
            var6 = var3[var6 - 1]
        if var1[var5] == var1[var6]:
            var6 += 1
        return var6
    for var7 in range(1, var2):
        var3[var7] = var4(var7)
    return var3",PrefixFunc
946,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
947,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3",PrefixFunc
948,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
949,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = 0
        while var5 < var4:
            if var1[:var5 + 1] == var1[var4 - var5:var4 + 1]:
                var3[var4] = var5 + 1
            var5 += 1
    return var3",PrefixFunc
950,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
951,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var3] != var1[var4]:
            var3 = var2[var3 - 1]
        if var1[var3] == var1[var4]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
952,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 != 0:
            var5 = var3[var5 - 1]
        else:
            var3[var4] = 0
            var4 += 1
    return var3",PrefixFunc
953,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(var4, 0, -1):
            if var1[:var5] == var1[var4 - var5 + 1:var4 + 1]:
                var3[var4] = var5
                break
    return var3",PrefixFunc
954,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var3[var4] = max(0, *[var5 for var5 in range(1, var4 + 1) if var1[:var5] == var1[var4 - var5 + 1:var4 + 1]])
    return var3",PrefixFunc
955,"def var0(var1):
    def var2(var3):
        if var3 == 0:
            return 0
        for var4 in range(var3, 0, -1):
            if var1[:var4] == var1[var3 - var4 + 1:var3 + 1]:
                return var4
        return 0
    return [var2(var5) for var5 in range(len(var1))]",PrefixFunc
956,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    var4 = 1
    while var4 < len(var1):
        if var1[var4] == var1[var3]:
            var3 += 1
            var2[var4] = var3
            var4 += 1
        elif var3 > 0:
            var3 = var2[var3 - 1]
        else:
            var2[var4] = 0
            var4 += 1
    return var2",PrefixFunc
957,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
958,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(1, min(var4 + 1, var2)):
            if var1[:var5] == var1[var4 - var5 + 1:var4 + 1]:
                var3[var4] = var5
            else:
                break
    return var3",PrefixFunc
959,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(1, var4 + 1):
            if var1[:var5] == var1[var4 - var5 + 1:var4 + 1]:
                var3[var4] = var5
    return var3",PrefixFunc
960,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    while var4 < var2:
        var5 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var3[var4] = var5 + 1
            var4 += 1
        elif var5 == 0:
            var3[var4] = 0
            var4 += 1
        else:
            var5 = var3[var5 - 1]
    return var3",PrefixFunc
961,"def var0(var1):
    var2 = [0] * len(var1)
    var3 = 0
    for var4 in range(1, len(var1)):
        while var3 > 0 and var1[var3] != var1[var4]:
            var3 = var2[var3 - 1]
        if var1[var3] == var1[var4]:
            var3 += 1
        var2[var4] = var3
    return var2",PrefixFunc
962,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 != 0:
            var5 = var3[var5 - 1]
        else:
            var3[var4] = 0
            var4 += 1
    return var3",PrefixFunc
963,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(var4, 0, -1):
            if var1[:var5] == var1[var4 - var5 + 1:var4 + 1]:
                var3[var4] = var5
                break
    return var3",PrefixFunc
964,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    def var4(var5):
        if var5 == 0:
            return 0
        for var6 in range(var5, 0, -1):
            if var1[:var6] == var1[var5 - var6 + 1:var5 + 1]:
                return var6
        return 0
    for var7 in range(1, var2):
        var3[var7] = var4(var7)
    return var3",PrefixFunc
965,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
966,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
967,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 > 0:
            var5 = var3[var5 - 1]
        else:
            var4 += 1
    return var3",PrefixFunc
968,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        for var5 in range(1, var4 + 1):
            if var1[:var5] == var1[var4 - var5 + 1:var4 + 1]:
                var3[var4] = var5
    return var3",PrefixFunc
969,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = 0
        while var5 < var4:
            if var1[:var5 + 1] == var1[var4 - var5:var4 + 1]:
                var3[var4] = var5 + 1
            var5 += 1
    return var3",PrefixFunc
970,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3",PrefixFunc
971,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 = var4 + 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
972,"class var0:
    def var1(var2, var3):
        var2.pattern = var3
        var2.length = len(var3)
        var2.pi = var2.calculate_pi()
    def var4(var2):
        var5 = [0] * var2.length
        var6 = 0
        for var7 in range(1, var2.length):
            while var6 > 0 and var2.pattern[var6] != var2.pattern[var7]:
                var6 = var5[var6 - 1]
            if var2.pattern[var6] == var2.pattern[var7]:
                var6 += 1
            var5[var7] = var6
        return var5
if __name__ == '__main__':
    var8 = input()
    var9 = var0(var8)",PrefixFunc
973,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
974,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
975,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        var4 = 0
        for var6 in range(var5):
            if var1[var6] == var1[var5]:
                var4 = var6 + 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var7 = input()
    var8 = len(var7)
    var9 = var0(var7)",PrefixFunc
976,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 > 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
977,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
978,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
979,"def var0(var1, var2, var3, var4):
    if var2 == len(var1):
        return var4
    if var1[var2] == var1[var3]:
        var3 += 1
    elif var3 > 0:
        var3 = var4[var3 - 1]
    else:
        var3 = 0
    var4[var2] = var3
    return var0(var1, var2 + 1, var3, var4)
if __name__ == '__main__':
    var5 = input()
    var6 = len(var5)
    var4 = [0] * var6
    var7 = var0(var5, 1, 0, var4)",PrefixFunc
980,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
981,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 = var4 + 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
982,"class var0:
    def var1(var2, var3):
        var2.pattern = var3
        var2.length = len(var3)
        var2.pi = var2.calculate_pi()
    def var4(var2):
        var5 = var2.length
        var6 = [0] * var5
        var7 = 0
        for var8 in range(1, var5):
            while var7 > 0 and var2.pattern[var7] != var2.pattern[var8]:
                var7 = var6[var7 - 1]
            if var2.pattern[var7] == var2.pattern[var8]:
                var7 += 1
            var6[var8] = var7
        return var6
if __name__ == '__main__':
    var9 = input()
    var10 = var0(var9)",PrefixFunc
983,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
984,"def var0(var1, var2, var3, var4):
    if var2 == len(var1):
        return var4
    if var3 > 0 and var1[var3] != var1[var2]:
        var3 = var4[var3 - 1]
        return var0(var1, var2, var3, var4)
    if var1[var3] == var1[var2]:
        var3 += 1
    var4[var2] = var3
    return var0(var1, var2 + 1, var3, var4)
if __name__ == '__main__':
    var5 = input()
    var6 = len(var5)
    var4 = [0] * var6
    var7 = var0(var5, 1, 0, var4)",PrefixFunc
985,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
986,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
987,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
988,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
989,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
990,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
991,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 = var4 + 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
992,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 != 0:
            var5 = var3[var5 - 1]
        else:
            var3[var4] = 0
            var4 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
993,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
994,"class var0:
    def var1(var2, var3):
        var2.text = var3
        var2.n = len(var3)
        var2.pi = var2.calculate_pi()
    def var4(var2):
        var5 = [0] * var2.n
        var6 = 0
        for var7 in range(1, var2.n):
            while var6 > 0 and var2.text[var6] != var2.text[var7]:
                var6 = var5[var6 - 1]
            if var2.text[var6] == var2.text[var7]:
                var6 += 1
            var5[var7] = var6
        return var5
if __name__ == '__main__':
    var8 = input()
    var9 = var0(var8)",PrefixFunc
995,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
996,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
997,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
998,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
999,"def var0(var1, var2, var3, var4):
    if var2 == len(var1):
        return var4
    while var3 > 0 and var1[var2] != var1[var3]:
        var3 = var4[var3 - 1]
    if var1[var2] == var1[var3]:
        var3 += 1
    var4[var2] = var3
    return var0(var1, var2 + 1, var3, var4)
if __name__ == '__main__':
    var5 = input()
    var6 = len(var5)
    var7 = [0] * var6
    var8 = var0(var5, 1, 0, var7)",PrefixFunc
1000,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var4] == var1[var5]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1001,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 = var4 + 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
1002,"class var0:
    def var1(var2, var3):
        var2.pattern = var3
        var2.length = len(var3)
        var2.pi = var2.calculate_pi()
    def var4(var2):
        var5 = [0] * var2.length
        var6 = 0
        for var7 in range(1, var2.length):
            while var6 > 0 and var2.pattern[var6] != var2.pattern[var7]:
                var6 = var5[var6 - 1]
            if var2.pattern[var6] == var2.pattern[var7]:
                var6 += 1
            var5[var7] = var6
        return var5
if __name__ == '__main__':
    var8 = input()
    var9 = var0(var8)",PrefixFunc
1003,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1004,"def var0(var1, var2, var3, var4):
    if var2 == len(var1):
        return var4
    if var1[var2] == var1[var3]:
        var3 += 1
        var4[var2] = var3
        return var0(var1, var2 + 1, var3, var4)
    elif var3 > 0:
        var3 = var4[var3 - 1]
        return var0(var1, var2, var3, var4)
    else:
        var4[var2] = 0
        return var0(var1, var2 + 1, var3, var4)
if __name__ == '__main__':
    var5 = input()
    var6 = len(var5)
    var7 = [0] * var6
    var7 = var0(var5, 1, 0, var7)",PrefixFunc
1005,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1006,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1007,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1008,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1009,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1010,"def var0(var1, var2, var3, var4):
    if var2 == len(var1):
        return var4
    if var1[var2] == var1[var3]:
        var3 += 1
        var4[var2] = var3
        return var0(var1, var2 + 1, var3, var4)
    elif var3 > 0:
        var3 = var4[var3 - 1]
        return var0(var1, var2, var3, var4)
    else:
        var4[var2] = 0
        return var0(var1, var2 + 1, var3, var4)
if __name__ == '__main__':
    var5 = input()
    var6 = len(var5)
    var4 = [0] * var6
    var4 = var0(var5, 1, 0, var4)",PrefixFunc
1011,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1012,"class var0:
    def var1(var2, var3):
        var2.pattern = var3
        var2.n = len(var3)
        var2.pi = var2.calculate_pi()
    def var4(var2):
        var5 = [0] * var2.n
        var6 = 0
        for var7 in range(1, var2.n):
            while var6 > 0 and var2.pattern[var6] != var2.pattern[var7]:
                var6 = var5[var6 - 1]
            if var2.pattern[var6] == var2.pattern[var7]:
                var6 += 1
            var5[var7] = var6
        return var5
if __name__ == '__main__':
    var8 = input()
    var9 = var0(var8)",PrefixFunc
1013,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1014,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1015,"def var0(var1, var2, var3, var4):
    if var2 == len(var1):
        return var4
    if var1[var2] == var1[var3]:
        var3 += 1
        var4[var2] = var3
    elif var3 > 0:
        var3 = var4[var3 - 1]
        var0(var1, var2, var3, var4)
    else:
        var4[var2] = 0
    return var0(var1, var2 + 1, var3, var4)
if __name__ == '__main__':
    var5 = input()
    var6 = len(var5)
    var7 = [0] * var6
    var0(var5, 1, 0, var7)",PrefixFunc
1016,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        var4 = max(0, var4)
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1017,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1018,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1019,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)
    for var8 in var7:",PrefixFunc
1020,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1021,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1022,"class var0:
    def var1(var2, var3):
        var2.s = var3
        var2.length = len(var3)
        var2.pi = var2.calculate_pi()
    def var4(var2):
        var5 = [0] * var2.length
        var6 = 0
        for var7 in range(1, var2.length):
            while var6 > 0 and var2.s[var6] != var2.s[var7]:
                var6 = var5[var6 - 1]
            if var2.s[var6] == var2.s[var7]:
                var6 += 1
            var5[var7] = var6
        return var5
if __name__ == '__main__':
    var8 = input()
    var9 = var0(var8)",PrefixFunc
1023,"import sys
def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var4] == var1[var5]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = sys.stdin.readline().strip()
    var7 = var0(var6)",PrefixFunc
1024,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 != 0:
            var5 = var3[var5 - 1]
        else:
            var3[var4] = 0
            var4 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1025,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1026,"def var0(var1, var2, var3, var4, var5):
    if var3 == var2:
        return var5
    if var1[var3] == var1[var4]:
        var4 += 1
        var5[var3] = var4
        return var0(var1, var2, var3 + 1, var4, var5)
    elif var4 != 0:
        var4 = var5[var4 - 1]
        return var0(var1, var2, var3, var4, var5)
    else:
        var5[var3] = 0
        return var0(var1, var2, var3 + 1, 0, var5)
if __name__ == '__main__':
    var6 = input()
    var2 = len(var6)
    var5 = [0] * var2
    var7 = var0(var6, var2, 1, 0, var5)",PrefixFunc
1027,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 1
    var5 = 0
    while var4 < var2:
        if var1[var4] == var1[var5]:
            var5 += 1
            var3[var4] = var5
            var4 += 1
        elif var5 > 0:
            var5 = var3[var5 - 1]
        else:
            var3[var4] = 0
            var4 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1028,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1029,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1030,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 = var4 + 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1031,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 = var4 + 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
1032,"class var0:
    def var1(var2, var3):
        var2.pattern = var3
        var2.length = len(var3)
        var2.pi = var2.calculate_pi()
    def var4(var2):
        var5 = [0] * var2.length
        var6 = 0
        for var7 in range(1, var2.length):
            while var6 > 0 and var2.pattern[var6] != var2.pattern[var7]:
                var6 = var5[var6 - 1]
            if var2.pattern[var6] == var2.pattern[var7]:
                var6 += 1
            var5[var7] = var6
        return var5
if __name__ == '__main__':
    var8 = input()
    var9 = var0(var8)",PrefixFunc
1033,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
1034,"def var0(var1, var2, var3, var4):
    if var2 == len(var1):
        return var4
    if var1[var2] == var1[var3]:
        var4[var2] = var3 + 1
        return var0(var1, var2 + 1, var3 + 1, var4)
    elif var3 > 0:
        return var0(var1, var2, var4[var3 - 1], var4)
    else:
        var4[var2] = 0
        return var0(var1, var2 + 1, 0, var4)
if __name__ == '__main__':
    var5 = input()
    var6 = len(var5)
    var7 = [0] * var6
    var7 = var0(var5, 1, 0, var7)",PrefixFunc
1035,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    for var4 in range(1, var2):
        var5 = var3[var4 - 1]
        while var5 > 0 and var1[var4] != var1[var5]:
            var5 = var3[var5 - 1]
        if var1[var4] == var1[var5]:
            var5 += 1
        var3[var4] = var5
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1036,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1037,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1038,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1039,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1040,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1041,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var4] != var1[var5]:
            var4 = var3[var4 - 1]
        if var1[var4] == var1[var5]:
            var4 = var4 + 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
1042,"class var0:
    def var1(var2, var3):
        var2.pattern = var3
        var2.length = len(var3)
        var2.pi = var2.calculate_pi()
    def var4(var2):
        var5 = [0] * var2.length
        var6 = 0
        for var7 in range(1, var2.length):
            while var6 > 0 and var2.pattern[var6] != var2.pattern[var7]:
                var6 = var5[var6 - 1]
            if var2.pattern[var6] == var2.pattern[var7]:
                var6 += 1
            var5[var7] = var6
        return var5
if __name__ == '__main__':
    var8 = input()
    var9 = var0(var8)",PrefixFunc
1043,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 != 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
1044,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    var5 = 1
    while var5 < var2:
        if var1[var5] == var1[var4]:
            var4 += 1
            var3[var5] = var4
            var5 += 1
        elif var4 > 0:
            var4 = var3[var4 - 1]
        else:
            var3[var5] = 0
            var5 += 1
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1045,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
1046,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1047,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        var4 = max(0, var4)
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
1048,"def var0(var1, var2, var3, var4):
    if var2 == len(var1):
        return var4
    if var1[var2] == var1[var3]:
        var3 += 1
    elif var3 > 0:
        var3 = var4[var3 - 1]
    else:
        var3 = 0
    var4[var2] = var3
    return var0(var1, var2 + 1, var3, var4)
if __name__ == '__main__':
    var5 = input()
    var6 = len(var5)
    var4 = [0] * var6
    var7 = var0(var5, 1, 0, var4)",PrefixFunc
1049,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = len(var6)
    var8 = var0(var6)",PrefixFunc
1050,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = 0
    for var5 in range(1, var2):
        while var4 > 0 and var1[var5] != var1[var4]:
            var4 = var3[var4 - 1]
        if var1[var5] == var1[var4]:
            var4 += 1
        var3[var5] = var4
    return var3
if __name__ == '__main__':
    var6 = input()
    var7 = var0(var6)",PrefixFunc
