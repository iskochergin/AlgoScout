number,code,Type
1,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
2,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
3,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            yield from var0(var1, (var6 for var6 in var1[var5] if var6 not in var3))",DFS
4,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
5,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
6,"from functools import reduce

def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = var1[var2]
    var5 = [var6 for var6 in var4 if var6 not in var3]
    return reduce(lambda var7, var6: var0(var1, var6, var7), var5, var3)",DFS
7,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3 and var4 in var1:
            var0(var1, var4, var3)",DFS
8,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
9,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
10,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in reversed(var1[var2]):
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
11,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
12,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
13,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
14,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    if var2 in var3:
        return
    var3.add(var2)
    for var4 in var1[var2]:
        var0(var1, var4, var3)",DFS
15,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
16,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    while var5:
        var6 = var5.pop()
        if not var4[var6]:
            var4[var6] = True
            for var7 in range(var3):
                if var1[var6][var7] == 1 and (not var4[var7]):
                    var5.append(var7)",DFS
17,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return []
    var3 = set()
    var4 = [var2]
    var5 = []
    while var4:
        var6 = var4.pop()
        if var6 not in var3:
            var3.add(var6)
            var5.append(var6)
            if var6 in var1:
                var4.extend((var7 for var7 in var1[var6] if var7 not in var3))
    return var5",DFS
18,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return []
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var6 = []
    while var5:
        var7 = var5.pop()
        if not var4[var7]:
            var4[var7] = True
            var6.append(var7)
            for var8 in range(var3):
                if var1[var7][var8] == 1 and (not var4[var8]):
                    var5.append(var8)
    return var6",DFS
19,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = []
    if var2 in var3:
        return
    var3.append(var2)
    if var2 in var1:
        for var4 in var1[var2]:
            var0(var1, var4, var3)
    return var3",DFS
20,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var6 = []
    while var5:
        var7 = var5.pop()
        if not var4[var7]:
            var4[var7] = True
            var6.append(var7)
            for var8 in range(var3):
                if var1[var7][var8] == 1 and (not var4[var8]):
                    var5.append(var8)
    return var6",DFS
21,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
22,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
23,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
24,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = [var5 for var5 in var1[var2] if var5 not in var3]
    return [var2] + sum([var0(var1, var5, var3) for var5 in var4], [])",DFS
25,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
26,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
27,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
28,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
29,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
30,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    var4 = [var5 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5])]
    return [var2] + sum([var0(var1, var6, var3) for var6 in var4], [])",DFS
31,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
32,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
33,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
34,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = [var5 for var5 in var1[var2] if var5 not in var3]
    return (var2, [var0(var1, var5, var3)[0] for var5 in var4])",DFS
35,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
36,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
37,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
38,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
39,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    var4 = [var5 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5])]
    return (var2, [var0(var1, var6, var3)[0] for var6 in var4])",DFS
40,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
41,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
42,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
43,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
44,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = [var5 for var5 in var1[var2] if var5 not in var3]
    return [var2] + sum([var0(var1, var5, var3) for var5 in var4], [])",DFS
45,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
46,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
47,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
48,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
49,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
50,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    var4 = [var5 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5])]
    return [var2] + sum([var0(var1, var6, var3) for var6 in var4], [])",DFS
51,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
52,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            for var6 in reversed(var1[var5]):
                var4.append(var6)",DFS
53,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            for var6 in reversed(var1[var5]):
                var4.append(var6)",DFS
54,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    if var2 not in var3:
        var3.add(var2)
        return [var2] + sum([var0(var1, var4, var3) for var4 in var1[var2]], [])
    return []",DFS
55,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
56,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
57,"def var0(var1, var2, var3=None):
    if not var1:
        return
    if var3 is None:
        var3 = set()
    if var2 not in var1:
        return
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
58,"def var0(var1, var2):
    var3 = set()
    var4 = [var2] if var1 else []
    while var4:
        var5 = var4.pop()
        if var5 not in var3 and var5 in var1:
            var3.add(var5)
            for var6 in reversed(var1[var5]):
                var4.append(var6)
    return var3",DFS
59,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    if not var3[var2]:
        var3[var2] = True
        return [var2] + [var4 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5]) for var4 in var0(var1, var5, var3)]
    return []",DFS
60,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
61,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
62,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
63,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
64,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = [var5 for var5 in var1[var2] if var5 not in var3]
    return (var2, *sum((var0(var1, var5, var3) for var5 in var4), ()))",DFS
65,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
66,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
67,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
68,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
69,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
70,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    if var3[var2]:
        return ()
    var3[var2] = True
    var4 = [var5 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5])]
    return (var2, *sum((var0(var1, var5, var3) for var5 in var4), ()))",DFS
71,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
72,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
73,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
74,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
75,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
76,"from functools import reduce

def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = var1[var2]
    var5 = [var6 for var6 in var4 if var6 not in var3]
    return reduce(lambda var7, var6: var0(var1, var6, var7), var5, var3)",DFS
77,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
78,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
79,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            yield var5
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
80,"def var0(var1, var2, var3, var4=None):
    if var4 is None:
        var4 = []
    var4 = var4 + [var2]
    if var2 == var3:
        return var4
    if var2 not in var1:
        return None
    for var5 in var1[var2]:
        if var5 not in var4:
            var6 = var0(var1, var5, var3, var4)
            if var6:
                return var6
    return None",DFS
81,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
82,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
83,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            var4.extend((var6 for var6 in var1[var5] if var6 not in var3))",DFS
84,"def var0(var1, var2, var3=None):
    var4 = len(var1)
    if var3 is None:
        var3 = [False] * var4
    var3[var2] = True
    for var5 in range(var4):
        if var1[var2][var5] == 1 and (not var3[var5]):
            var0(var1, var5, var3)",DFS
85,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    while var5:
        var6 = var5.pop()
        if not var4[var6]:
            var4[var6] = True
            for var7 in range(var3):
                if var1[var6][var7] == 1 and (not var4[var7]):
                    var5.append(var7)",DFS
86,"from functools import reduce

def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    var4 = var1[var2]
    var5 = [var6 for var6 in var4 if var6 not in var3]
    return reduce(lambda var7, var6: var0(var1, var6, var7) or var7, var5, var3)",DFS
87,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1.get(var2, []):
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
88,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    while var5:
        var6 = var5.pop()
        if not var4[var6]:
            var4[var6] = True
            for var7 in range(var3):
                if var1[var6][var7] == 1 and (not var4[var7]):
                    var5.append(var7)",DFS
89,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = []
    var3.append(var2)
    for var4 in var1.get(var2, []):
        if var4 not in var3:
            var0(var1, var4, var3)
    return var3",DFS
90,"def var0(var1, var2):
    var3 = set()
    var4 = [(var2, [var2])]
    var5 = []
    while var4:
        var6, var7 = var4.pop()
        if var6 not in var3:
            var3.add(var6)
            var5 = var7
            for var8 in var1.get(var6, []):
                if var8 not in var3:
                    var4.append((var8, var7 + [var8]))
    return var5",DFS
91,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1[var2]:
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
92,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if var5 not in var3:
            var3.add(var5)
            for var6 in var1[var5]:
                var4.append(var6)",DFS
93,"def var0(var1, var2):
    var3 = set()

    def var4(var5):
        var3.add(var5)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                yield from var4(var6)
    return var4(var2)",DFS
94,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    if var2 in var3:
        return []
    var3.add(var2)
    var4 = var1[var2]
    return [var2] + sum([var0(var1, var5, var3) for var5 in var4], [])",DFS
95,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    var3[var2] = True
    for var4 in range(len(var1)):
        if var1[var2][var4] == 1 and (not var3[var4]):
            var0(var1, var4, var3)",DFS
96,"def var0(var1, var2):
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
97,"def var0(var1, var2, var3=None):
    if not var1 or var2 not in var1:
        return
    if var3 is None:
        var3 = set()
    var3.add(var2)
    for var4 in var1.get(var2, []):
        if var4 not in var3:
            var0(var1, var4, var3)",DFS
98,"def var0(var1, var2):
    if not var1 or var2 < 0 or var2 >= len(var1):
        return
    var3 = [False] * len(var1)
    var4 = [var2]
    while var4:
        var5 = var4.pop()
        if not var3[var5]:
            var3[var5] = True
            for var6 in range(len(var1)):
                if var1[var5][var6] == 1 and (not var3[var6]):
                    var4.append(var6)",DFS
99,"def var0(var1, var2):
    var3 = [False] * len(var1)

    def var4(var5):
        var3[var5] = True
        yield var5
        for var6 in range(len(var1)):
            if var1[var5][var6] == 1 and (not var3[var6]):
                yield from var4(var6)
    return var4(var2)",DFS
100,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = [False] * len(var1)
    if var3[var2]:
        return []
    var3[var2] = True
    var4 = [var5 for var5 in range(len(var1)) if var1[var2][var5] == 1 and (not var3[var5])]
    return [var2] + sum([var0(var1, var6, var3) for var6 in var4], [])",DFS
101,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
102,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
103,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
104,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
105,"from collections import deque

def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
106,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        for var7 in var6:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
107,"def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
108,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    var6 = []
    while var5:
        var7 = var5.pop(0)
        var6.append(var7)
        for var8 in range(var3):
            if var1[var7][var8] == 1 and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)
    return var6",BFS
109,"from collections import deque

def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 is not None and var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
110,"def var0(var1, var2):
    if not var1:
        return []
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
111,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
112,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
113,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
114,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1[var6]:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
115,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
116,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    return list(iter((lambda: next((var5 for var5 in var1[var6] if var5 not in var3 and (var3.add(var5) or True)), None) for var6 in var4)))",BFS
117,"def var0(var1, var2):
    if not var1:
        return []
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        var7 = var1.get(var6, [])
        var4.extend([var8 for var8 in var7 if var8 not in var3 and (not var3.add(var8))])
    return var5",BFS
118,"def var0(var1, var2):
    if var2 not in var1:
        return []
    var3 = {var2}
    var4 = [var2]
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1[var6]:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
119,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    var6 = []
    while var5:
        var7 = var5.pop(0)
        var6.append(var7)
        for var8 in range(var3):
            if var1[var7][var8] == 1 and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)
    return var6",BFS
120,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return []
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1[var6]:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
121,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
122,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
123,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        if var5 in var1:
            for var6 in var1[var5]:
                if var6 not in var3:
                    var3.add(var6)
                    var4.append(var6)",BFS
124,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    if var2 not in var3:
        var3.add(var2)
        yield var2
        for var4 in var1[var2]:
            yield from var0(var1, var4, var3)",BFS
125,"from collections import deque

def var0(var1, var2, var3):
    var4 = set()
    var5 = deque([(var2, 0)])
    var4.add(var2)
    while var5:
        var6, var7 = var5.popleft()
        yield var6
        if var7 < var3:
            for var8 in var1[var6]:
                if var8 not in var4:
                    var4.add(var8)
                    var5.append((var8, var7 + 1))",BFS
126,"def var0(var1, var2):
    var3 = [(var2, 0)]
    var4 = {var2}
    while var3:
        var5, var6 = min(var3, key=lambda var7: var7[1])
        var3.remove(var5)
        yield var5
        for var8 in var1.get(var5, []):
            if var8 not in var4:
                var4.add(var8)
                var3.append((var8, len([var9 for var9, var10 in var3])))",BFS
127,"from collections import deque

def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        if var5 in var1:
            for var6 in var1[var5]:
                if var6 not in var3:
                    var3.add(var6)
                    var4.append(var6)",BFS
128,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    var6 = 0
    while var6 < len(var5):
        var7 = var5[var6]
        var6 += 1
        yield var7
        for var8 in range(var3):
            if var1[var7][var8] and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)",BFS
129,"from collections import deque

def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
130,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        for var7 in var6:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
131,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
132,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
133,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
134,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
135,"from collections import deque

def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
136,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        for var7 in var6:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
137,"def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
138,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    var6 = []
    while var5:
        var7 = var5.pop(0)
        var6.append(var7)
        for var8 in range(var3):
            if var1[var7][var8] == 1 and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)
    return var6",BFS
139,"from collections import deque

def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 is not None and var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
140,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
141,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
142,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
143,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
144,"import queue

def var0(var1, var2):
    var3 = queue.Queue()
    var4 = set()
    var3.put(var2)
    var4.add(var2)
    while not var3.empty():
        var5 = var3.get()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var4:
                var4.add(var6)
                var3.put(var6)",BFS
145,"def var0(var1, var2):
    if not var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
146,"def var0(var1, var2):
    var3 = set()
    var4 = [var2] if var2 is not None else []
    if not var4:
        return
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        var4.extend([var7 for var7 in var6 if var7 not in var3])
        var3.update(var6)",BFS
147,"from collections import deque

def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = deque([var2])
    var4 = {var2}
    while var3:
        var5 = var3.popleft()
        yield var5
        for var6 in var1[var5]:
            if var6 not in var4:
                var4.add(var6)
                var3.append(var6)",BFS
148,"def var0(var1, var2):
    var3 = var4()
    var5 = set()
    if var2 is not None and var2 in var1:
        var3.append(var2)
        var5.add(var2)
    while var3:
        var6 = var3.popleft()
        yield var6
        for var7 in var1.get(var6, []):
            if var7 not in var5:
                var3.append(var7)
                var5.add(var7)",BFS
149,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = []
    if var2 < 0 or var2 >= var3:
        return
    var4[var2] = True
    var5.append(var2)
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
150,"def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while True:
        if not var4:
            break
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
151,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
152,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
153,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
154,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
155,"from collections import deque

def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
156,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        for var7 in var6:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
157,"def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
158,"from collections import deque

def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = deque([var2])
    var4[var2] = True
    while var5:
        var6 = var5.popleft()
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
159,"def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
160,"def var0(var1, var2):
    var3 = set()
    var4 = var5([var2])
    var3.add(var2)
    var6 = []
    while var4:
        var7 = var4.popleft()
        var6.append(var7)
        for var8 in var1.get(var7, []):
            if var8 not in var3:
                var3.add(var8)
                var4.append(var8)
    return var6",BFS
161,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
162,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
163,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield from var6(var1, var5, var3)

def var6(var1, var5, var3):
    yield var5
    for var7 in var1.get(var5, []):
        if var7 not in var3:
            var3.add(var7)
            yield from var6(var1, var7, var3)",BFS
164,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
165,"from collections import deque

def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = deque([var2])
    var4[var2] = True
    while var5:
        var6 = var5.popleft()
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
166,"def var0(var1, var2):
    var3 = {var2}
    var4 = [var2]

    def var5(var6):
        if not var6:
            return []
        var7 = var6.pop(0)
        var8 = [var9 for var9 in var1.get(var7, []) if var9 not in var3]
        var3.update(var8)
        return [var7] + var5(var6 + var8)
    return var5(var4)",BFS
167,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return []
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
168,"def var0(var1, var2):
    if not var1:
        return []
    var3 = len(var1)
    if var2 < 0 or var2 >= var3:
        return []
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
169,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    var3.add(var2)
    yield var2
    for var4 in var1.get(var2, []):
        if var4 not in var3:
            yield from var0(var1, var4, var3)",BFS
170,"def var0(var1, var2):
    var3 = set()
    var4 = list(var2)
    for var5 in var2:
        var3.add(var5)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
171,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
172,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
173,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
174,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
175,"from collections import deque

def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    while var4:
        var5 = var4.popleft()
        if var5 not in var3:
            var3.add(var5)
            yield var5
            for var6 in var1.get(var5, []):
                var4.append(var6)",BFS
176,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        if var5 not in var3:
            var3.add(var5)
            yield var5
            for var6 in var1.get(var5, []):
                var4.append(var6)",BFS
177,"def var0(var1, var2):
    var3 = set()
    var4 = var5([var2])
    var3.add(var2)
    while var4:
        var6 = var4.popleft()
        yield var6
        var7 = var1.get(var6, [])
        for var8 in var7:
            if var8 not in var3:
                var3.add(var8)
                var4.append(var8)",BFS
178,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = var6([var2])
    var4[var2] = True
    while var5:
        var7 = var5.popleft()
        yield var7
        for var8 in range(var3):
            if var1[var7][var8] == 1 and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)",BFS
179,"def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
180,"def var0(var1, var2):
    var3 = set()
    var4 = var5([var2])
    var3.add(var2)
    while var4:
        var6 = var4.popleft()
        yield var6
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
181,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
182,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
183,"def var0(var1, var2):
    if not var1 or var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1[var5]:
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
184,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] == 1 and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
185,"from collections import deque

def var0(var1, var2):
    if not var1:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
186,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    while var4:
        var5 = var4.pop(0)
        yield var5
        var6 = var1.get(var5, [])
        for var7 in var6:
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)",BFS
187,"def var0(var1, var2):
    if var2 not in var1:
        return
    var3 = {var2}
    var4 = [var2]
    while var4:
        var5 = var4.pop(0)
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
188,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    var6 = []
    while var5:
        var7 = var5.pop(0)
        var6.append(var7)
        for var8 in range(var3):
            if var1[var7][var8] == 1 and (not var4[var8]):
                var4[var8] = True
                var5.append(var8)
    return var6",BFS
189,"from collections import deque

def var0(var1, var2):
    if not var1 or var2 is None:
        return
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 is not None and var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
190,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
191,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6 in var1.get(var5, []):
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
192,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = [var2]
    var4[var2] = True
    while var5:
        var6 = var5.pop(0)
        yield var6
        for var7 in range(var3):
            if var1[var6][var7] and (not var4[var7]):
                var4[var7] = True
                var5.append(var7)",BFS
193,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
194,"def bfs_functional(graph, start_node):
    visited = set()
    queue = [start_node]
    visited.add(start_node)
    return list(filter(lambda x: True,
                      (node for node in queue for _ in [0]\
                       if (node not in visited or node == start_node)\
                       and not (node in visited and node != start_node)\
                       and (visited.add(node) or True)\
                       and yield node\
                       and (neighbor for neighbor in graph.get(node, []) if neighbor not in visited))))",BFS
195,"from collections import deque

def var0(var1, var2):
    if not var1:
        return []
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
196,"def var0(var1, var2):
    var3 = set()
    var4 = [var2]
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.pop(0)
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
197,"from collections import deque

def var0(var1, var2):
    if var2 not in var1:
        return []
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    var5 = []
    while var4:
        var6 = var4.popleft()
        var5.append(var6)
        for var7 in var1.get(var6, []):
            if var7 not in var3:
                var3.add(var7)
                var4.append(var7)
    return var5",BFS
198,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [False] * var3
    var5 = var6([var2])
    var4[var2] = True
    var7 = []
    while var5:
        var8 = var5.popleft()
        var7.append(var8)
        for var9 in range(var3):
            if var1[var8][var9] and (not var4[var9]):
                var4[var9] = True
                var5.append(var9)
    return var7",BFS
199,"from collections import deque

def var0(var1, var2):
    var3 = set()
    var4 = deque([var2])
    var3.add(var2)
    while var4:
        var5 = var4.popleft()
        yield var5
        for var6, var7 in var1.get(var5, {}).items():
            if var6 not in var3:
                var3.add(var6)
                var4.append(var6)",BFS
200,"def var0(var1, var2, var3=None):
    if var3 is None:
        var3 = set()
    if var2 not in var1:
        return []
    var3.add(var2)
    var4 = [var2]
    for var5 in var1[var2]:
        if var5 not in var3:
            var4.extend(var0(var1, var5, var3))
    return var4",BFS
201,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var7] > var3[var4] + var8:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
202,"import heapq

class var0:

    def var1(var2):
        var2.heap = []

    def var3(var2, var4):
        heapq.heappush(var2.heap, var4)

    def var5(var2):
        return heapq.heappop(var2.heap)

    def var6(var2):
        return len(var2.heap)

def var7(var8, var9):
    var10 = {var11: float('inf') for var11 in var8}
    var10[var9] = 0
    var12 = var0()
    var12.push((0, var9))
    while len(var12) > 0:
        var13, var11 = var12.pop()
        if var13 > var10[var11]:
            continue
        for var14, var15 in var8[var11].items():
            if var10[var14] > var10[var11] + var15:
                var10[var14] = var10[var11] + var15
                var12.push((var10[var14], var14))
    return var10",Dijkstra
203,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = min(var5)
        var5.remove((var6, var4))
        if var6 > var3[var4]:
            continue
        yield from ((var7, var3[var4] + var8) for var7, var8 in var1[var4].items() if var3[var7] > var3[var4] + var8)
        for var7, var8 in var1[var4].items():
            if var3[var7] > var3[var4] + var8:
                var3[var7] = var3[var4] + var8
                var5.append((var3[var7], var7))",Dijkstra
204,"from functools import reduce

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
205,"def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [False] * var3
    for var6 in range(var3):
        var7 = float('inf')
        var8 = -1
        for var9 in range(var3):
            if not var5[var9] and var4[var9] < var7:
                var7 = var4[var9]
                var8 = var9
        if var8 == -1:
            break
        var5[var8] = True
        for var9 in range(var3):
            if var1[var8][var9] != 0 and var4[var9] > var4[var8] + var1[var8][var9]:
                var4[var9] = var4[var8] + var1[var8][var9]
    return var4",Dijkstra
206,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    while var5:
        var6 = min(var5, key=var3.get)
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            var9 = var3[var6] + var8
            if var9 < var3[var7]:
                var3[var7] = var9
    return var3",Dijkstra
207,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var8 < 0:
                raise ValueError('Negative edge weights found')
            if var3[var7] > var3[var4] + var8:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
208,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = min(var5)
        var5.remove((var6, var4))
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var7] > var3[var4] + var8:
                var3[var7] = var3[var4] + var8
                var5.append((var3[var7], var7))
    var9 = {var4 for var4, var6 in var3.items() if var6 != float('inf')}
    return var3",Dijkstra
209,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2, 0)]
    var6 = set()
    while var5:
        var7, var4, var8 = heapq.heappop(var5)
        if (var4, var8) in var6:
            continue
        var6.add((var4, var8))
        if var7 > var3[var4]:
            continue
        for var9, var10 in var1[var4].items():
            if var3[var9] > var3[var4] + var10:
                var3[var9] = var3[var4] + var10
                heapq.heappush(var5, (var3[var9], var9, var8 + 1))
    return var3",Dijkstra
210,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    while True:
        var6 = float('inf')
        var7 = None
        for var4 in var5:
            if var3[var4] < var6:
                var6 = var3[var4]
                var7 = var4
        if var7 is None:
            break
        for var8, var9 in var1[var7].items():
            if var3[var8] > var3[var7] + var9:
                var3[var8] = var3[var7] + var9
    return var3",Dijkstra
211,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
212,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
213,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
214,"from functools import reduce

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
215,"import heapq

def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
216,"class var0:

    def var1(var2):
        var2.heap = []

    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)

    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6

    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break

    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break

def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
217,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
218,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
219,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
220,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {}
    for var4 in var1:
        if var3[var4] == float('inf'):
            var10[var4] = None
        else:
            var10[var4] = var3[var4]
    return var10",Dijkstra
221,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
222,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
223,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
224,"from functools import reduce

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
225,"import heapq

def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
226,"class var0:

    def var1(var2):
        var2.heap = []

    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)

    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6

    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break

    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break

def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
227,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
228,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
229,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
230,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {}
    for var4 in var1:
        if var3[var4] == float('inf'):
            var10[var4] = None
        else:
            var10[var4] = var3[var4]
    return var10",Dijkstra
231,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
232,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
233,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
234,"from functools import reduce

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
235,"import heapq

def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
236,"class var0:

    def var1(var2):
        var2.heap = []

    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)

    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6

    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break

    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break

def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
237,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
238,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
239,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
240,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {}
    for var4 in var1:
        if var3[var4] == float('inf'):
            var10[var4] = None
        else:
            var10[var4] = var3[var4]
    return var10",Dijkstra
241,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
242,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
243,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
244,"from functools import reduce

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
245,"import heapq

def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
246,"class var0:

    def var1(var2):
        var2.heap = []

    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)

    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6

    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break

    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break

def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
247,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
248,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
249,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
250,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {var4: var6 for var4, var6 in var3.items() if var6 != float('inf')}
    return var10",Dijkstra
251,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var7] > var6 + var8:
                var3[var7] = var6 + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
252,"import heapq

def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            if var1[var7][var8] != 0:
                var9 = var1[var7][var8]
                if var4[var8] > var6 + var9:
                    var4[var8] = var6 + var9
                    heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
253,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = min(var5)
        var5.remove((var6, var4))
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var7] > var6 + var8:
                var3[var7] = var6 + var8
                var5.append((var3[var7], var7))
        yield var3",Dijkstra
254,"from functools import reduce

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())

    def var6(var7, var4):
        for var8, var9 in var1[var4].items():
            if var7[var8] > var7[var4] + var9:
                var7[var8] = var7[var4] + var9
        return var7
    return reduce(var6, var5, var3)",Dijkstra
255,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var8 < 0:
                raise ValueError('Negative edge weights not allowed')
            if var3[var7] > var6 + var8:
                var3[var7] = var6 + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
256,"class var0:

    def var1(var2):
        var2.heap = []

    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up()

    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down()
        return var6

    def var7(var2):
        pass

    def var8(var2):
        pass

def var9(var10, var11):
    var12 = {var13: float('inf') for var13 in var10}
    var12[var11] = 0
    var14 = var0()
    var14.push((0, var11))
    while var14.heap:
        var15, var13 = var14.pop()
        if var15 > var12[var13]:
            continue
        for var16, var17 in var10[var13].items():
            if var12[var16] > var15 + var17:
                var12[var16] = var15 + var17
                var14.push((var12[var16], var16))
    return var12",Dijkstra
257,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var8] > var6 + var9:
                var3[var8] = var6 + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {var4 for var4, var6 in var3.items() if var6 != float('inf')}
    return (var3, var10)",Dijkstra
258,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = var8.heappop(var5)
        if var6 > var3[var7]:
            continue
        for var9, var10 in var1[var7]:
            if var3[var9] > var6 + var10:
                var3[var9] = var6 + var10
                var8.heappush(var5, (var3[var9], var9))
    return var3",Dijkstra
259,"def var0(var1, var2):
    if not var1:
        return {}
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var8] > var6 + var9:
                var3[var8] = var6 + var9
                var7.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
260,"def var0(var1, var2):
    if var2 not in var1:
        return {var2: float('inf')}
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var8] > var6 + var9:
                var3[var8] = var6 + var9
                var7.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
261,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var3[var7]:
            continue
        for var8, var9 in var1[var7].items():
            if var3[var8] > var3[var7] + var9:
                var3[var8] = var3[var7] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
262,"import heapq

def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            if var1[var7][var8] != 0:
                if var4[var8] > var4[var7] + var1[var7][var8]:
                    var4[var8] = var4[var7] + var1[var7][var8]
                    heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
263,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = []
    for var7 in var5:
        var6.append(var7)
        var8 = len(var6) - 1
        while var8 > 0 and var6[var8][0] < var6[(var8 - 1) // 2][0]:
            var6[var8], var6[(var8 - 1) // 2] = (var6[(var8 - 1) // 2], var6[var8])
            var8 = (var8 - 1) // 2
    while var6:
        var9, var10 = var6[0]
        var6[0] = var6[-1]
        var6.pop()
        var11(var6, 0)
        if var9 > var3[var10]:
            continue
        for var12, var13 in var1[var10].items():
            if var3[var12] > var3[var10] + var13:
                var3[var12] = var3[var10] + var13
                var6.append((var3[var12], var12))
                var8 = len(var6) - 1
                while var8 > 0 and var6[var8][0] < var6[(var8 - 1) // 2][0]:
                    var6[var8], var6[(var8 - 1) // 2] = (var6[(var8 - 1) // 2], var6[var8])
                    var8 = (var8 - 1) // 2
    return var3

def var11(var6, var8):
    var14 = len(var6)
    var15 = var8
    var16 = 2 * var8 + 1
    var17 = 2 * var8 + 2
    if var16 < var14 and var6[var16][0] < var6[var15][0]:
        var15 = var16
    if var17 < var14 and var6[var17][0] < var6[var15][0]:
        var15 = var17
    if var15 != var8:
        var6[var8], var6[var15] = (var6[var15], var6[var8])
        var11(var6, var15)",Dijkstra
264,"def var0(var1, var2):

    def var3(var4):
        for var5, var6 in var1[var4].items():
            yield (var5, var6)
    var7 = {var4: float('inf') for var4 in var1}
    var7[var2] = 0
    var8 = [(0, var2)]
    while var8:
        var9, var10 = var11.heappop(var8)
        if var9 > var7[var10]:
            continue
        for var12, var6 in var3(var10):
            if var7[var12] > var7[var10] + var6:
                var7[var12] = var7[var10] + var6
                var11.heappush(var8, (var7[var12], var12))
    return var7",Dijkstra
265,"from functools import reduce

def dijkstra_functional(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    nodes = list(graph.keys())
    pq = [(0, start)]
    return reduce(lambda acc, (dist, u):
                  {**acc, **{v: min(acc[v], acc[u] + weight)\
                                 for v, weight in graph[u].items()}}\
                  if dist <= acc[u] else acc, pq)",Dijkstra
266,"def var0(var1, var2):
    if any((var3 < 0 for var4 in var1 for var3 in var1[var4].values())):
        return 'Negative edge weights detected'
    return var5(var1, var2)",Dijkstra
267,"def var0(var1, var2):
    var3 = var4(var1, var2)
    var5 = [var6 for var6, var7 in var3.items() if var7 == float('inf')]
    return (var3, var5)",Dijkstra
268,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = var8.heappop(var5)
        if var6 > var3[var7]:
            continue
        for var9, var10 in var1[var7]:
            if var3[var9] > var3[var7] + var10:
                var3[var9] = var3[var7] + var10
                var8.heappush(var5, (var3[var9], var9))
    return var3",Dijkstra
269,"def var0(var1, var2):
    if not var1:
        return {}
    return var3(var1, var2)",Dijkstra
270,"def var0(var1, var2):
    if var2 not in var1:
        return {var2: 0}
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    return var3",Dijkstra
271,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
272,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
273,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
274,"from functools import reduce

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var6}, var5, var3)",Dijkstra
275,"import heapq

def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
276,"class var0:

    def var1(var2):
        var2.heap = []

    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)

    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6

    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break

    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break

def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
277,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
278,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
279,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
280,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {}
    for var4 in var1:
        if var3[var4] == float('inf'):
            var10[var4] = None
        else:
            var10[var4] = var3[var4]
    return var10",Dijkstra
281,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
282,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    var6 = set()
    while var5:
        var7, var4 = heapq.heappop(var5)
        if var4 in var6:
            continue
        var6.add(var4)
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
283,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        yield var3[var4]
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))",Dijkstra
284,"from functools import reduce

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = list(var1.keys())
    return reduce(lambda var6, var4: {var7: min(var6[var7], var6[var4] + var1[var4].get(var7, float('inf'))) for var7 in var5}, var5, var3)",Dijkstra
285,"import heapq

def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            var9 = var1[var7][var8]
            if var9 > 0 and var4[var7] + var9 < var4[var8]:
                var4[var8] = var4[var7] + var9
                heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
286,"class var0:

    def var1(var2):
        var2.heap = []

    def var3(var2, var4):
        var2.heap.append(var4)
        var2._heapify_up(len(var2.heap) - 1)

    def var5(var2):
        if not var2.heap:
            return None
        if len(var2.heap) == 1:
            return var2.heap.pop()
        var6 = var2.heap[0]
        var2.heap[0] = var2.heap.pop()
        var2._heapify_down(0)
        return var6

    def var7(var2, var8):
        while var8 > 0:
            var9 = (var8 - 1) // 2
            if var2.heap[var8][0] < var2.heap[var9][0]:
                var2.heap[var8], var2.heap[var9] = (var2.heap[var9], var2.heap[var8])
                var8 = var9
            else:
                break

    def var10(var2, var8):
        while True:
            var11 = 2 * var8 + 1
            var12 = 2 * var8 + 2
            var13 = var8
            if var11 < len(var2.heap) and var2.heap[var11][0] < var2.heap[var13][0]:
                var13 = var11
            if var12 < len(var2.heap) and var2.heap[var12][0] < var2.heap[var13][0]:
                var13 = var12
            if var13 != var8:
                var2.heap[var8], var2.heap[var13] = (var2.heap[var13], var2.heap[var8])
                var8 = var13
            else:
                break

def var14(var15, var16):
    var17 = {var18: float('inf') for var18 in var15}
    var17[var16] = 0
    var19 = var0()
    var19.push((0, var16))
    while not var19.heap:
        var20, var18 = var19.pop()
        if var20 > var17[var18]:
            continue
        for var21, var22 in var15[var18].items():
            if var17[var18] + var22 < var17[var21]:
                var17[var21] = var17[var18] + var22
                var19.push((var17[var21], var21))
    return var17",Dijkstra
287,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = set(var1.keys())
    while var5:
        var6 = None
        for var4 in var5:
            if var6 is None or var3[var4] < var3[var6]:
                var6 = var4
        if var6 is None:
            break
        var5.remove(var6)
        for var7, var8 in var1[var6].items():
            if var3[var6] + var8 < var3[var7]:
                var3[var7] = var3[var6] + var8
    return var3",Dijkstra
288,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var5 in range(len(var1)):
        for var4 in var1:
            for var6, var7 in var1[var4].items():
                if var3[var4] != float('inf') and var3[var4] + var7 < var3[var6]:
                    var3[var6] = var3[var4] + var7
    return var3",Dijkstra
289,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    for var4 in var1:
        if any((var5 < 0 for var5 in var1[var4].values())):
            raise ValueError('Negative edge weights not allowed')
    var6 = [(0, var2)]
    while var6:
        var7, var4 = var8.heappop(var6)
        if var7 > var3[var4]:
            continue
        for var9, var5 in var1[var4].items():
            if var3[var4] + var5 < var3[var9]:
                var3[var9] = var3[var4] + var5
                var8.heappush(var6, (var3[var9], var9))
    return var3",Dijkstra
290,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    var10 = {}
    for var4 in var1:
        if var3[var4] == float('inf'):
            var10[var4] = None
        else:
            var10[var4] = var3[var4]
    return var10",Dijkstra
291,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = heapq.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var7, var8 in var1[var4].items():
            if var3[var4] + var8 < var3[var7]:
                var3[var7] = var3[var4] + var8
                heapq.heappush(var5, (var3[var7], var7))
    return var3",Dijkstra
292,"import heapq

def var0(var1, var2):
    var3 = len(var1)
    var4 = [float('inf')] * var3
    var4[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var4[var7]:
            continue
        for var8 in range(var3):
            if var1[var7][var8] != 0:
                var9 = var1[var7][var8]
                if var4[var7] + var9 < var4[var8]:
                    var4[var8] = var4[var7] + var9
                    heapq.heappush(var5, (var4[var8], var8))
    return var4",Dijkstra
293,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = []
    var6.heappush(var5, (0, var2))
    while var5:
        var7, var4 = var6.heappop(var5)
        if var7 > var3[var4]:
            continue
        for var8, var9 in var1[var4].items():
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var6.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
294,"def var0(var1, var2):

    def var3(var4):
        for var5, var6 in var1[var4].items():
            yield (var5, var6)
    var7 = {var4: float('inf') for var4 in var1}
    var7[var2] = 0
    var8 = [(0, var2)]
    while var8:
        var9, var4 = var10.heappop(var8)
        if var9 > var7[var4]:
            continue
        for var5, var6 in var3(var4):
            if var7[var4] + var6 < var7[var5]:
                var7[var5] = var7[var4] + var6
                var10.heappush(var8, (var7[var5], var5))
    return var7",Dijkstra
295,"from functools import reduce

def dijkstra_functional(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    pq = [(0, start)]
    return reduce(lambda dists, (dist, node): dists if dist > dists[node] else (dists[node], dists[node] + weight) for neighbor, weight in graph[node].items() if distances[node] + weight < dists[neighbor] for _, dists in [(neighbor, dists)] if dists is not None, distances, pq)",Dijkstra
296,"import heapq

def var0(var1, var2):
    for var3 in var1:
        for var4, var5 in var1[var3].items():
            if var5 < 0:
                raise ValueError('Negative edge weights not allowed')
    return var6(var1, var2)",Dijkstra
297,"import heapq

def var0(var1, var2):
    var3 = var4(var1, var2)
    var5 = [var6 for var6, var7 in var3.items() if var7 == float('inf')]
    return (var3, var5)",Dijkstra
298,"def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var4 = var7.heappop(var5)
        if var6 > var3[var4]:
            continue
        for var8, var9 in var1[var4]:
            if var3[var4] + var9 < var3[var8]:
                var3[var8] = var3[var4] + var9
                var7.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
299,"import heapq

def var0(var1, var2, var3):
    var4 = {var5: float('inf') for var5 in var1}
    var4[var2] = 0
    var6 = {var5: None for var5 in var1}
    var7 = [(0, var2)]
    while var7:
        var8, var5 = heapq.heappop(var7)
        if var8 > var4[var5]:
            continue
        for var9, var10 in var1[var5].items():
            if var4[var5] + var10 < var4[var9]:
                var4[var9] = var4[var5] + var10
                var6[var9] = var5
                heapq.heappush(var7, (var4[var9], var9))
    var11 = []
    var12 = var3
    while var12 is not None:
        var11.append(var12)
        var12 = var6[var12]
    return (var4, var11[::-1])",Dijkstra
300,"import heapq

def var0(var1, var2):
    var3 = {var4: float('inf') for var4 in var1}
    var3[var2] = 0
    var5 = [(0, var2)]
    while var5:
        var6, var7 = heapq.heappop(var5)
        if var6 > var3[var7]:
            continue
        if var7 in var1:
            for var8, var9 in var1[var7].items():
                if var3[var7] + var9 < var3[var8]:
                    var3[var8] = var3[var7] + var9
                    heapq.heappush(var5, (var3[var8], var8))
    return var3",Dijkstra
301,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    var4 = {}

    def var5(var6):
        if var6 >= var2:
            return (0, [])
        if var6 in var3:
            return var3[var6]
        var7, var8 = var5(var6 + 1)
        var9, var10 = var5(var6 + 2)
        if var7 + var1[var6] < var9 + var1[var6]:
            var3[var6] = (var7 + var1[var6], [var6 + 1] + var8)
            return var3[var6]
        else:
            var3[var6] = (var9 + var1[var6], [var6 + 2] + var10)
            return var3[var6]
    var11, var12 = var5(0)
    return (var11, [var13 + 1 for var13 in var12])",Grasshopper
302,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[0] = var1[0]
    var4[0] = [1]
    if var2 > 1:
        var3[1] = var1[1]
        var4[1] = [2]
        for var6 in range(2, var2):
            if var3[var6 - 1] + var1[var6] < var3[var6 - 2] + var1[var6]:
                var3[var6] = var3[var6 - 1] + var1[var6]
                var4[var6] = [var6 + 1] + var4[var6 - 1]
            else:
                var3[var6] = var3[var6 - 2] + var1[var6]
                var4[var6] = [var6 + 1] + var4[var6 - 2]
    return (var3[var2 - 1], var4[var2 - 1])",Grasshopper
303,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0, var1[0], var1[1]]
    var4 = [0, 1, 1]
    for var5 in range(2, var2):
        if var3[1] + var1[var5] < var3[2] + var1[var5]:
            var3[0] = var3[1] + var1[var5]
            var4[0] = 1
        else:
            var3[0] = var3[2] + var1[var5]
            var4[0] = 2
        var3[1] = var3[0]
        var3[2] = var3[1]
    var6 = []
    var7 = var2 - 1
    while var7 >= 0:
        var6.insert(0, var7 + 1)
        if var4[0] == 1:
            var7 -= 1
        else:
            var7 -= 2
    return (var3[0], var6)",Grasshopper
304,"def var0(var1):
    var2 = len(var1)
    for var3 in range(2, var2):
        if var1[var3 - 1] < var1[var3 - 2]:
            var1[var3] += var1[var3 - 1]
        else:
            var1[var3] += var1[var3 - 2]
    var4 = []
    var3 = var2 - 1
    while var3 >= 0:
        var4.insert(0, var3 + 1)
        if var3 > 1 and var1[var3 - 1] < var1[var3 - 2]:
            var3 -= 1
        else:
            var3 -= 2
    return (var1[var2 - 1], var4)",Grasshopper
305,"def var0(var1):
    var2 = len(var1)
    var3 = [float('inf')] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var5 in range(2, var2):
        if var3[var5 - 1] + var1[var5] < var3[var5 - 2] + var1[var5]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
306,"def var0(var1):

    def var2(var3):
        if var3 >= len(var1):
            yield (0, [])
        else:
            for var4 in [var3 + 1, var3 + 2]:
                for var5, var6 in var2(var4):
                    yield (var5 + var1[var3], [var3 + 1] + var6)
    var7 = float('inf')
    var8 = []
    for var5, var6 in var2(0):
        if var5 < var7:
            var7 = var5
            var8 = var6
    return (var7, var8)",Grasshopper
307,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    var3 = reduce(lambda var4, var5: var4 + [min(var4[-1] + var1[var5], var4[-2] + var1[var5])], range(2, var2), [var1[0], var1[1]])
    var6 = []
    var5 = var2 - 1
    while var5 >= 0:
        var6.insert(0, var5 + 1)
        if var5 > 1 and var3[var5 - 1] < var3[var5 - 2]:
            var5 -= 1
        else:
            var5 -= 2
    return (var3[var2 - 1], var6)",Grasshopper
308,"import numpy as np

def var0(var1):
    var2 = len(var1)
    var3 = np.zeros(var2)
    var3[0] = var1[0]
    if var2 > 1:
        var3[1] = var1[1]
        for var4 in range(2, var2):
            var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        var5.insert(0, var4 + 1)
        if var4 > 1 and var3[var4 - 1] < var3[var4 - 2]:
            var4 -= 1
        else:
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
309,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        var5.insert(0, var4 + 1)
        if var4 > 1 and var3[var4 - 1] < var3[var4 - 2]:
            var4 -= 1
        else:
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
310,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1] + var1[var4], var3[var4 - 2] + var1[var4])
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        var5.insert(0, var4 + 1)
        if var4 > 1 and var3[var4 - 1] + var1[var4] < var3[var4 - 2] + var1[var4]:
            var4 -= 1
        else:
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
311,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = {}
    var4 = {}

    def var5(var6):
        if var6 == var2 - 1:
            return (var1[var6], [var6 + 1])
        if var6 in var3:
            return var3[var6]
        var7, var8 = var5(var6 + 1)
        var9, var10 = var5(var6 + 2)
        if var7 < var9:
            var3[var6] = (var1[var6] + var7, [var6 + 1] + var8)
            var4[var6] = var6 + 1
        else:
            var3[var6] = (var1[var6] + var9, [var6 + 1] + var10)
            var4[var6] = var6 + 2
        return var3[var6]
    var11, var12 = var5(0)
    return (var11, var12)",Grasshopper
312,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = [0] * var2
    var4 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 1
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var1[var5] + var3[var5 - 1]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var1[var5] + var3[var5 - 2]
            var4[var5] = var5 - 2
    var6 = [var2]
    var7 = var2 - 1
    while var7 != 0:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    if len(var1) == 1:
        return (var1[0], [1])
    return (var3[var2 - 1], var6)",Grasshopper
313,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = var1[0]
    var4 = var1[1]
    for var5 in range(2, var2):
        var6 = var1[var5] + min(var4, var3)
        var3 = var4
        var4 = var6
    var7 = [var2]
    var6 = var2 - 1
    if var2 >= 3:
        while var6 != 0:
            if var6 == 0:
                break
            if var6 == 1:
                var7.insert(0, 1)
                break
            if var1[var6 - 1] + var3 < var1[var6 - 2] + var3:
                var7.insert(0, var6)
                var6 -= 1
            else:
                var7.insert(0, var6)
                var6 -= 2
    elif var2 == 2:
        var7 = [1, 2]
    elif var2 == 1:
        var7 = [1]
    return (var4, var7)",Grasshopper
314,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    for var3 in range(2, var2):
        var1[var3] += min(var1[var3 - 1], var1[var3 - 2])
    var4 = [var2]
    var5 = var2 - 1
    while var5 != 0:
        var4.insert(0, var5 + 1)
        if var5 == 1:
            break
        if var1[var5 - 1] <= var1[var5 - 2]:
            var5 -= 1
        else:
            var5 -= 2
    return (var1[var2 - 1], var4)",Grasshopper
315,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = [0] * var2
    var4 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var1[var5] + var3[var5 - 1]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var1[var5] + var3[var5 - 2]
            var4[var5] = var5 - 2
    var6 = [var2]
    var7 = var2 - 1
    while var7 != 0:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
316,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])

    def var3(var4):
        if var4 == var2 - 1:
            yield (var1[var4], [var4 + 1])
        else:
            if var4 + 1 < var2:
                for var5, var6 in var3(var4 + 1):
                    yield (var1[var4] + var5, [var4 + 1] + var6)
            if var4 + 2 < var2:
                for var7, var8 in var3(var4 + 2):
                    yield (var1[var4] + var7, [var4 + 1] + var8)
    var9 = float('inf')
    var10 = []
    for var11, var12 in var3(0):
        if var11 < var9:
            var9 = var11
            var10 = var12
    return (var9, var10)",Grasshopper
317,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var3 = reduce(lambda var4, var5: var4 + [var1[var5] + min(var4[var5 - 1], var4[var5 - 2])], range(2, var2), var3)
    var6 = [var2]
    var7 = var2 - 1
    while var7 != 0:
        var6.insert(0, var7 + 1)
        if var7 == 1:
            break
        if var1[var7 - 1] <= var1[var7 - 2]:
            var7 -= 1
        else:
            var7 -= 2
    return (var3[var2 - 1], var6)",Grasshopper
318,"import numpy as np

def var0(var1):
    var1 = np.array(var1)
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = np.zeros(var2, dtype=int)
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + np.min([var3[var4 - 1], var3[var4 - 2]])
    var5 = [var2]
    var6 = var2 - 1
    while var6 != 0:
        var5.insert(0, var6 + 1)
        if var6 == 1:
            break
        if var3[var6 - 1] <= var3[var6 - 2]:
            var6 -= 1
        else:
            var6 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
319,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])
    var3 = [0] * var2
    var4 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var1[var5] + var3[var5 - 1]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var1[var5] + var3[var5 - 2]
            var4[var5] = var5 - 2
    var6 = [var2]
    var7 = var2 - 1
    while var7 != 0:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
320,"import multiprocessing

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1], [1, var2])

    def var3(var4):
        if var4 == var2 - 1:
            return (var1[var4], [var4 + 1])
        else:
            var5, var6 = var3(var4 + 1)
            var7, var8 = var3(var4 + 2)
            if var5 < var7:
                return (var1[var4] + var5, [var4 + 1] + var6)
            else:
                return (var1[var4] + var7, [var4 + 1] + var8)
    with multiprocessing.Pool(processes=2) as var9:
        var10 = var9.apply_async(var3, (0,))
        var11, var12 = var10.get()
    return (var11, var12)",Grasshopper
321,"def var0(var1):
    var2 = len(var1)
    var3 = {}

    def var4(var5):
        if var5 >= var2:
            return (0, [])
        if var5 in var3:
            return var3[var5]
        var6, var7 = var4(var5 + 1)
        var8, var9 = var4(var5 + 2)
        if var6 + var1[var5] < var8 + var1[var5]:
            var3[var5] = (var6 + var1[var5], [var5 + 1] + var7)
        else:
            var3[var5] = (var8 + var1[var5], [var5 + 2] + var9)
        return var3[var5]
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    return var4(0)",Grasshopper
322,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[var2 - 1] = var1[var2 - 1]
    var4[var2 - 1] = [var2]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = [var2 - 1, var2]
    for var6 in range(var2 - 3, -1, -1):
        if var3[var6 + 1] + var1[var6] < var3[var6 + 2] + var1[var6]:
            var3[var6] = var3[var6 + 1] + var1[var6]
            var4[var6] = [var6 + 1] + var4[var6 + 1]
        else:
            var3[var6] = var3[var6 + 2] + var1[var6]
            var4[var6] = [var6 + 2] + var4[var6 + 2]
    return (var3[0], var4[0])",Grasshopper
323,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0, 0]
    var4 = [[], []]
    var3[0] = var1[var2 - 1]
    var4[0] = [var2]
    var3[1] = var1[var2 - 2] + var1[var2 - 1]
    var4[1] = [var2 - 1, var2]
    for var5 in range(var2 - 3, -1, -1):
        if var3[0] + var1[var5] < var3[1] + var1[var5]:
            var3[1] = var3[0] + var1[var5]
            var4[1] = [var5 + 1] + var4[0]
        else:
            var3[0] = var3[1] + var1[var5]
            var4[0] = [var5 + 2] + var4[1]
    return (var3[0], var4[0])",Grasshopper
324,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = var1[:]
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + min(var3[var4 + 1], var3[var4 + 2])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
325,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = var2 - 1
    for var5 in range(var2 - 3, -1, -1):
        if var3[var5 + 1] + var1[var5] < var3[var5 + 2] + var1[var5]:
            var3[var5] = var3[var5 + 1] + var1[var5]
            var4[var5] = var5 + 1
        else:
            var3[var5] = var3[var5 + 2] + var1[var5]
            var4[var5] = var5 + 2
    var6 = []
    var7 = 0
    while var7 < var2:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[0], var6)",Grasshopper
326,"def var0(var1):
    var2 = len(var1)

    def var3(var4):
        if var4 >= var2:
            yield []
        else:
            for var5 in [var4 + 1, var4 + 2]:
                for var6 in var3(var5):
                    yield ([var4 + 1] + var6)
    var7 = float('inf')
    var8 = []
    for var9 in var3(0):
        var10 = sum((var1[var11 - 1] for var11 in var9))
        if var10 < var7:
            var7 = var10
            var8 = var9
    return (var7, var8)",Grasshopper
327,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = reduce(lambda var4, var5: [var1[var5] + min(var4[0], var4[1])] + var4, range(var2 - 2, -1, -1), [var1[var2 - 1], var1[var2 - 2] + var1[var2 - 1]])
    var6 = []
    var7 = 0
    while var7 < var2 - 1:
        if var3[0] < var3[1]:
            var6.append(var7 + 1)
            var7 += 1
        else:
            var6.append(var7 + 2)
            var7 += 2
    var6.append(var2)
    return (var3[0], [var8 + 1 for var8 in var6])",Grasshopper
328,"import numpy as np

def var0(var1):
    var2 = len(var1)
    var1 = np.array(var1)
    if var2 < 3:
        return (np.sum(var1), list(range(1, var2 + 1)))
    var3 = np.zeros(var2)
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + np.min([var3[var4 + 1], var3[var4 + 2]])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
329,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        if var3[var4 + 2] > var3[var4 + 1] + var1[var4]:
            var3[var4] = var3[var4 + 1] + var1[var4]
        else:
            var3[var4] = var3[var4 + 2] + var1[var4]
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
330,"import multiprocessing

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    with multiprocessing.Pool(processes=2) as var4:
        var5 = var4.starmap(lambda var6: (var6, var1[var6] + min(var3[var6 + 1], var3[var6 + 2])), [(var6,) for var6 in range(var2 - 3, -1, -1)])
    for var6, var7 in var5:
        var3[var6] = var7
    var8 = []
    var9 = 0
    while var9 < var2 - 1:
        if var3[var9 + 1] < var3[var9 + 2]:
            var8.append(var9 + 1)
            var9 += 1
        else:
            var8.append(var9 + 2)
            var9 += 2
    var8.append(var2)
    return (var3[0], [var10 + 1 for var10 in var8])",Grasshopper
331,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    var4 = {}

    def var5(var6):
        if var6 >= var2:
            return (0, [])
        if var6 in var3:
            return var3[var6]
        var7, var8 = var5(var6 + 1)
        var9, var10 = var5(var6 + 2)
        if var7 + var1[var6] < var9 + var1[var6]:
            var3[var6] = (var7 + var1[var6], [var6 + 1] + var8)
        else:
            var3[var6] = (var9 + var1[var6], [var6 + 2] + var10)
        return var3[var6]
    var11, var12 = var5(0)
    return (var11, [var13 + 1 for var13 in var12])",Grasshopper
332,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[0] = var1[0]
    var4[0] = [1]
    if var2 > 1:
        var3[1] = var1[1]
        var4[1] = [2]
        for var6 in range(2, var2):
            if var3[var6 - 1] + var1[var6] < var3[var6 - 2] + var1[var6]:
                var3[var6] = var3[var6 - 1] + var1[var6]
                var4[var6] = [var6 + 1] + var4[var6 - 1]
            else:
                var3[var6] = var3[var6 - 2] + var1[var6]
                var4[var6] = [var6 + 1] + var4[var6 - 2]
    return (var3[var2 - 1], var4[var2 - 1])",Grasshopper
333,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1] if var2 > 0 else 0, [])
    var3 = var1[0]
    var4 = var1[1]
    var5 = [1]
    var6 = [2]
    for var7 in range(2, var2):
        if var4 + var1[var7] < var3 + var1[var7]:
            var8 = var4 + var1[var7]
            var9 = [var7 + 1] + var6
        else:
            var8 = var3 + var1[var7]
            var9 = [var7 + 1] + var5
        var3 = var4
        var4 = var8
        var5 = var6
        var6 = var9
    return (var4, [var10 + 1 for var10 in var6])",Grasshopper
334,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1] if var2 > 0 else 0, [])
    var1 = var1[:]
    for var3 in range(2, var2):
        var1[var3] += min(var1[var3 - 1], var1[var3 - 2])
    var4 = []
    var5 = var2 - 1
    while var5 > 0:
        var4.append(var5 + 1)
        if var5 >= 2 and var1[var5] == var1[var5 - 2] + var1[var5]:
            var5 -= 2
        else:
            var5 -= 1
    var4.append(1)
    return (var1[var2 - 1], var4[::-1])",Grasshopper
335,"def var0(var1):
    var2 = len(var1)
    var3 = [float('inf')] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] + var1[var5] < var3[var5 - 2] + var1[var5]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6[::-1])",Grasshopper
336,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[0] = var1[0]
    var4[0] = [1]
    if var2 > 1:
        var3[1] = var1[1]
        var4[1] = [2]
        for var6 in range(2, var2):

            def var7(var8):
                if var8 == var6 - 1:
                    yield ([var6 + 1] + var4[var6 - 1])
                else:
                    yield ([var6 + 1] + var4[var6 - 2])
            if var3[var6 - 1] + var1[var6] < var3[var6 - 2] + var1[var6]:
                var3[var6] = var3[var6 - 1] + var1[var6]
                var4[var6] = next(var7(var6 - 1))
            else:
                var3[var6] = var3[var6 - 2] + var1[var6]
                var4[var6] = next(var7(var6 - 2))
    return (var3[var2 - 1], var4[var2 - 1])",Grasshopper
337,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    var3 = reduce(lambda var4, var5: var4 + [min(var4[-1] + var1[var5], (var4[-2] if var5 > 1 else float('inf')) + var1[var5])], range(var2), [0, var1[0]] if var2 > 0 else [])
    var6 = []
    var7 = var2 - 1
    while var7 > 0:
        var6.append(var7 + 1)
        if var7 > 1 and var3[var7] == var3[var7 - 1] + var1[var7]:
            var7 -= 1
        else:
            var7 -= 2
    var6.append(1)
    return (var3[var2 - 1], var6[::-1])",Grasshopper
338,"import numpy as np

def var0(var1):
    var2 = len(var1)
    var3 = np.zeros(var2)
    if var2 > 0:
        var3[0] = var1[0]
        if var2 > 1:
            var3[1] = var1[1]
            for var4 in range(2, var2):
                var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
    var5 = []
    var6 = var2 - 1
    while var6 > 0:
        var5.append(var6 + 1)
        if var3[var6] == var3[var6 - 1] + var1[var6]:
            var6 -= 1
        else:
            var6 -= 2
    var5.append(1)
    return (var3[var2 - 1], var5[::-1])",Grasshopper
339,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1] if var2 > 0 else 0, [])
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
        if var3[var4] > 1000000.0:
            break
    var5 = []
    var6 = var2 - 1
    while var6 > 0:
        var5.append(var6 + 1)
        if var3[var6] == var3[var6 - 1] + var1[var6]:
            var6 -= 1
        else:
            var6 -= 2
    var5.append(1)
    return (var3[var2 - 1], var5[::-1])",Grasshopper
340,"from multiprocessing import Pool

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (var1[-1] if var2 > 0 else 0, [])
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    with Pool(processes=2) as var4:
        for var5 in range(2, var2):
            var6 = var4.starmap(var7, [(var3, var1, var5)])
            var3[var5] = var6[0]
    var8 = []
    var9 = var2 - 1
    while var9 > 0:
        var8.append(var9 + 1)
        if var3[var9] == var3[var9 - 1] + var1[var9]:
            var9 -= 1
        else:
            var9 -= 2
    var8.append(1)
    return (var3[var2 - 1], var8[::-1])

def var7(var3, var1, var5):
    return var1[var5] + min(var3[var5 - 1], var3[var5 - 2])",Grasshopper
341,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = {}
    var4 = []

    def var5(var6):
        if var6 == var2:
            return (0, [])
        if var6 in var3:
            return var3[var6]
        var7, var8 = var5(var6 + 1)
        var9, var10 = var5(var6 + 2)
        if var7 < var9:
            var11 = var1[var6] + var7
            var12 = [var6 + 1] + var8
        else:
            var11 = var1[var6] + var9
            var12 = [var6 + 2] + var10
        var3[var6] = (var11, var12)
        return (var11, var12)
    var13, var4 = var5(0)
    return (var13, var4)",Grasshopper
342,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = [0] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var1[var5] + var3[var5 - 1]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var1[var5] + var3[var5 - 2]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
343,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = 0
    var4 = var1[0]
    var5 = var1[1]
    for var6 in range(2, var2):
        var7 = var1[var6] + min(var3, var4)
        var3 = var4
        var4 = var5
        var5 = var7
    var8 = []
    var9 = var2 - 1
    if var5 <= var3 + var1[var2 - 1]:
        var8.append(var9 + 1)
        var9 -= 2
    else:
        var8.append(var9 + 1)
        var9 -= 1
    while var9 >= 0:
        var8.append(var9 + 1)
        if var9 - 2 >= 0:
            var9 -= 2
        else:
            var9 -= 1
    return (var5, var8[::-1])",Grasshopper
344,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    for var3 in range(2, var2):
        var1[var3] += min(var1[var3 - 1], var1[var3 - 2])
    var4 = [var2]
    var5 = var2 - 1
    while var5 > 0:
        if var5 - 2 >= 0 and var1[var5 - 2] <= var1[var5 - 1]:
            var5 -= 2
        else:
            var5 -= 1
        var4.append(var5 + 1)
    return (var1[var2 - 1], var4[::-1])",Grasshopper
345,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = [0] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var1[var5] + var3[var5 - 1]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var1[var5] + var3[var5 - 2]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
346,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])

    def var3(var4, var5, var6):
        if var4 == var2:
            yield (var5, var6)
        else:
            yield from var3(var4 + 1, var5 + var1[var4], var6 + [var4 + 1])
            yield from var3(var4 + 2, var5 + var1[var4], var6 + [var4 + 2])
    var7 = float('inf')
    var8 = []
    for var9, var6 in var3(0, 0, []):
        if var9 < var7:
            var7 = var9
            var8 = var6
    return (var7, var8)",Grasshopper
347,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = reduce(lambda var4, var5: var4 + [var1[var5] + min(var4[var5 - 1], var4[var5 - 2] if var5 > 1 else float('inf'))], range(2, var2), [var1[0], var1[1]])
    var6 = []
    var7 = var2 - 1
    while var7 > 0:
        var6.insert(0, var7 + 1)
        if var7 - 2 >= 0 and var3[var7 - 2] <= var3[var7 - 1]:
            var7 -= 2
        else:
            var7 -= 1
    return (var3[var2 - 1], var6)",Grasshopper
348,"import numpy as np

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = np.zeros(var2, dtype=np.int64)
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
    var5 = []
    var6 = var2 - 1
    while var6 >= 0:
        var5.insert(0, var6 + 1)
        if var6 - 2 >= 0 and var3[var6 - 2] <= var3[var6 - 1]:
            var6 -= 2
        else:
            var6 -= 1
    return (var3[var2 - 1], var5)",Grasshopper
349,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
        if var3[var4] > 10 ** 6:
            break
    var5 = [var2]
    var6 = var2 - 1
    while var6 > 0:
        var5.insert(0, var6 + 1)
        if var6 - 2 >= 0 and var3[var6 - 2] <= var3[var6 - 1]:
            var6 -= 2
        else:
            var6 -= 1
    return (var3[var2 - 1], var5)",Grasshopper
350,"import multiprocessing

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (0, [1]) if var2 else (0, [])
    with multiprocessing.Pool(processes=2) as var3:
        var4 = var3.starmap(var5, [(var6, var1) for var6 in [1, 2]])
    var7, var8 = var4[0]
    var9, var10 = var4[1]
    if var7 < var9:
        var11 = var1[0] + var7
        var12 = [1] + var8
    else:
        var11 = var1[0] + var9
        var12 = [2] + var10
    return (var11, var12)

def var5(var13, var1):
    var2 = len(var1)
    var14 = [0] * var2
    var14[0] = 0
    var14[1] = var1[1]
    for var6 in range(2, var2):
        var14[var6] = var1[var6] + min(var14[var6 - 1], var14[var6 - 2])
    var12 = [var15 + 1 for var15 in range(var2 - 1, -1, -1)]
    return (var14[var2 - 1], var12)",Grasshopper
351,"def var0(var1):
    var2 = len(var1)
    var3 = {}

    def var4(var5):
        if var5 >= var2:
            return (0, [])
        if var5 in var3:
            return var3[var5]
        var6, var7 = var4(var5 + 1)
        var8, var9 = var4(var5 + 2)
        if var6 + var1[var5] < var8 + var1[var5]:
            var3[var5] = (var6 + var1[var5], [var5 + 1] + var7)
        else:
            var3[var5] = (var8 + var1[var5], [var5 + 2] + var9)
        return var3[var5]
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    return var4(0)",Grasshopper
352,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[0] = var1[0]
    var4[0] = [1]
    if var2 > 1:
        var3[1] = var1[1]
        var4[1] = [2]
    for var6 in range(2, var2):
        if var3[var6 - 1] + var1[var6] < var3[var6 - 2] + var1[var6]:
            var3[var6] = var3[var6 - 1] + var1[var6]
            var4[var6] = [var6 + 1] + var4[var6 - 1]
        else:
            var3[var6] = var3[var6 - 2] + var1[var6]
            var4[var6] = [var6 + 2] + var4[var6 - 2]
    return (var3[var2 - 1], var4[var2 - 1])",Grasshopper
353,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0, 0]
    var4 = [[1], [2]]
    for var5 in range(2, var2):
        if var3[0] + var1[var5] < var3[1] + var1[var5]:
            var3[1] = var3[0] + var1[var5]
            var4[1] = [var5 + 1] + var4[0]
        else:
            var3[1] = var3[1] + var1[var5]
            var4[1] = [var5 + 2] + var4[1]
        var3[0], var3[1] = (var3[1], var3[0])
        var4[0], var4[1] = (var4[1], var4[0])
    return (var3[1], var4[1])",Grasshopper
354,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    for var3 in range(2, var2):
        if var1[var3 - 1] < var1[var3 - 2]:
            var1[var3] = var1[var3 - 1] + var1[var3]
        else:
            var1[var3] = var1[var3 - 2] + var1[var3]
    var4 = []
    var3 = var2 - 1
    while var3 >= 0:
        var4.insert(0, var3 + 1)
        if var3 > 1 and var1[var3 - 1] < var1[var3 - 2]:
            var3 -= 1
        else:
            var3 -= 2
    return (var1[var2 - 1], var4)",Grasshopper
355,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    if var2 > 1:
        var3[1] = var1[1]
        var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] + var1[var5] < var3[var5 - 2] + var1[var5]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.insert(0, var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6)",Grasshopper
356,"def var0(var1):

    def var2(var3, var4):
        if var3 >= len(var1):
            yield (0, var4)
        else:
            for var5 in [1, 2]:
                var6 = var3 + var5
                yield (var1[var3] + (var7 for var7, var8 in var2(var6, var4 + [var6 + 1]))[0] if var6 < len(var1) else 0, var4 + [var6 + 1])
    var9 = float('inf')
    var10 = []
    for var11, var12 in var2(0, [1]):
        if var11 < var9:
            var9, var10 = (var11, var12)
    return (var9, var10)",Grasshopper
357,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = reduce(lambda var4, var5: var4 + [min(var4[var5 - 1] + var1[var5], var4[var5 - 2] + var1[var5])], range(2, var2), [var1[0], var1[1]])
    var6 = []
    var5 = var2 - 1
    while var5 >= 0:
        var6.insert(0, var5 + 1)
        if var5 > 1 and var3[var5 - 1] < var3[var5 - 2]:
            var5 -= 1
        else:
            var5 -= 2
    return (var3[-1], var6)",Grasshopper
358,"import numpy as np

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (np.sum(var1), list(range(1, var2 + 1)))
    var3 = np.zeros(var2)
    var3[0] = var1[0]
    if var2 > 1:
        var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1] + var1[var4], var3[var4 - 2] + var1[var4])
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        var5.insert(0, var4 + 1)
        if var4 > 1 and var3[var4 - 1] < var3[var4 - 2]:
            var4 -= 1
        else:
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
359,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
        if var3[var4] > 100000:
            return (float('inf'), [])
    var5 = [var2]
    var4 = var2 - 1
    while var4 > 0:
        if var4 >= 2 and var3[var4 - 2] < var3[var4 - 1]:
            var4 -= 2
        else:
            var4 -= 1
        var5.append(var4)
    var5.reverse()
    return (var3[var2 - 1], var5)",Grasshopper
360,"import concurrent.futures

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    with concurrent.futures.ThreadPoolExecutor(max_workers=2) as var3:
        var4 = var3.submit(lambda: var5(var1, var2, 1))
        var6 = var3.submit(lambda: var5(var1, var2, 2))
        var7, var8 = var4.result()
        var9, var10 = var6.result()
    if var7 < var9:
        return (var7, var8)
    else:
        return (var9, var10)

def var5(var1, var2, var11):
    if var11 >= var2:
        return (0, [])
    if var11 == var2 - 1:
        return (var1[var11], [var11 + 1])
    var7, var8 = var5(var1, var2, var11 + 1)
    var9, var10 = var5(var1, var2, var11 + 2)
    if var7 + var1[var11] < var9 + var1[var11]:
        return (var7 + var1[var11], [var11 + 1] + var8)
    else:
        return (var9 + var1[var11], [var11 + 2] + var10)",Grasshopper
361,"def var0(var1):
    var2 = len(var1)
    var3 = {}

    def var4(var5):
        if var5 >= var2:
            return (0, [])
        if var5 in var3:
            return var3[var5]
        var6, var7 = var4(var5 + 1)
        var8, var9 = var4(var5 + 2)
        if var6 + var1[var5] < var8 + var1[var5]:
            var3[var5] = (var6 + var1[var5], [var5 + 1] + var7)
        else:
            var3[var5] = (var8 + var1[var5], [var5 + 2] + var9)
        return var3[var5]
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var10, var11 = var4(0)
    return (var10, var11)",Grasshopper
362,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[0] = var1[0]
    var4[0] = [1]
    var3[1] = var1[1]
    var4[1] = [2]
    for var6 in range(2, var2):
        if var3[var6 - 1] + var1[var6] < var3[var6 - 2] + var1[var6]:
            var3[var6] = var3[var6 - 1] + var1[var6]
            var4[var6] = [var6 + 1] + var4[var6 - 1]
        else:
            var3[var6] = var3[var6 - 2] + var1[var6]
            var4[var6] = [var6 + 2] + var4[var6 - 2]
    return (var3[var2 - 1], var4[var2 - 1])",Grasshopper
363,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = var1[0]
    var4 = var1[1]
    for var5 in range(2, var2):
        var6 = min(var4 + var1[var5], var3 + var1[var5])
        var3 = var4
        var4 = var6
    var7 = []
    var5 = var2 - 1
    while var5 >= 0:
        if var5 == 0:
            var7 = [1] + var7
            break
        if var5 == 1:
            var7 = [2] + var7
            break
        if var4 + var1[var5] < var3 + var1[var5]:
            var7 = [var5 + 1] + var7
            var3 = var4
            var4 = var4 + var1[var5]
            var5 -= 1
        else:
            var7 = [var5 + 2] + var7
            var4 = var3
            var3 = var3 + var1[var5]
            var5 -= 2
    return (var4, var7)",Grasshopper
364,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    for var3 in range(2, var2):
        var1[var3] += min(var1[var3 - 1], var1[var3 - 2])
    var4 = []
    var3 = var2 - 1
    while var3 >= 0:
        if var3 == 0:
            var4 = [1] + var4
            break
        if var3 == 1:
            var4 = [2] + var4
            break
        if var1[var3 - 1] < var1[var3 - 2]:
            var4 = [var3 + 1] + var4
            var3 -= 1
        else:
            var4 = [var3 + 2] + var4
            var3 -= 2
    return (var1[var2 - 1], var4)",Grasshopper
365,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [None] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] + var1[var5] < var3[var5 - 2] + var1[var5]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6[::-1])",Grasshopper
366,"def var0(var1):

    def var2(var3, var4):
        if var3 >= len(var1):
            yield (0, var4)
        else:
            for var5 in [1, 2]:
                var6 = var3 + var5
                yield (var1[var3] + (yield from var2(var6, var4 + [var6 + 1])))
    var7 = float('inf')
    var8 = []
    for var9, var10 in var2(0, []):
        if var9 < var7:
            var7 = var9
            var8 = var10
    return (var7, var8)",Grasshopper
367,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = reduce(lambda var4, var5: var4 + [min(var4[-1] + var1[var5], var4[-2] + var1[var5])], range(2, var2), [var1[0], var1[1]])
    var6 = []
    var5 = var2 - 1
    while var5 >= 0:
        if var5 == 0:
            var6 = [1] + var6
            break
        if var5 == 1:
            var6 = [2] + var6
            break
        if var3[var5 - 1] < var3[var5 - 2]:
            var6 = [var5 + 1] + var6
            var5 -= 1
        else:
            var6 = [var5 + 2] + var6
            var5 -= 2
    return (var3[-1], var6)",Grasshopper
368,"import numpy as np

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (np.sum(var1), list(range(1, var2 + 1)))
    var3 = np.zeros(var2)
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        if var4 == 0:
            var5 = [1] + var5
            break
        if var4 == 1:
            var5 = [2] + var5
            break
        if var3[var4 - 1] < var3[var4 - 2]:
            var5 = [var4 + 1] + var5
            var4 -= 1
        else:
            var5 = [var4 + 2] + var5
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
369,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
        if var3[var4] >= 1000000:
            break
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        if var4 == 0:
            var5 = [1] + var5
            break
        if var4 == 1:
            var5 = [2] + var5
            break
        if var3[var4 - 1] < var3[var4 - 2]:
            var5 = [var4 + 1] + var5
            var4 -= 1
        else:
            var5 = [var4 + 2] + var5
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
370,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = var1[var4] + min(var3[var4 - 1], var3[var4 - 2])
    var5 = []
    var4 = var2 - 1
    while var4 >= 0:
        if var4 == 0:
            var5 = [1] + var5
            break
        if var4 == 1:
            var5 = [2] + var5
            break
        if var3[var4 - 1] < var3[var4 - 2]:
            var5 = [var4 + 1] + var5
            var4 -= 1
        else:
            var5 = [var4 + 2] + var5
            var4 -= 2
    return (var3[var2 - 1], var5)",Grasshopper
371,"def var0(var1):
    var2 = len(var1)
    var3 = {}
    var4 = {}

    def var5(var6):
        if var6 >= var2:
            return (0, [])
        if var6 in var3:
            return var3[var6]
        var7, var8 = var5(var6 + 1)
        var9, var10 = var5(var6 + 2)
        if var7 + var1[var6] < var9 + var1[var6]:
            var3[var6] = (var7 + var1[var6], [var6 + 1] + var8)
            var4[var6] = var6 + 1
        else:
            var3[var6] = (var9 + var1[var6], [var6 + 2] + var10)
            var4[var6] = var6 + 2
        return var3[var6]
    var11, var12 = var5(0)
    return (var11, var12)",Grasshopper
372,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    var4[1] = 0
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = var2 - 1
    var7 = [var6 + 1]
    while var6 > 0:
        var6 = var4[var6]
        var7.append(var6 + 1)
    return (var3[var2 - 1], var7[::-1])",Grasshopper
373,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1[:var2]), list(range(1, var2 + 1)))
    var3 = [0, 0]
    var4 = [0, 0]
    for var5 in range(2, var2):
        if var3[0] + var1[var5] < var3[1] + var1[var5]:
            var3[1] = var3[0] + var1[var5]
            var4[1] = var5
        else:
            var3[1] = var3[1] + var1[var5]
            var4[1] = var5
        var3[0], var3[1] = (var3[1], var3[0])
    var6 = [var2]
    var7 = var2 - 1
    return (var3[1], var6)",Grasshopper
374,"def var0(var1):
    var2 = len(var1)
    for var3 in range(2, var2):
        var1[var3] += min(var1[var3 - 1], var1[var3 - 2])
    var4 = [var2]
    var3 = var2 - 1
    while var3 > 0:
        if var3 == 1:
            var4.append(0)
            break
        if var1[var3 - 1] < var1[var3 - 2]:
            var4.append(var3 - 1)
            var3 = var3 - 1
        else:
            var4.append(var3 - 2)
            var3 = var3 - 2
    return (var1[var2 - 1], var4[::-1])",Grasshopper
375,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [None] * var2
    var3[1] = var1[1]
    for var5 in range(2, var2):
        if var3[var5 - 1] < var3[var5 - 2]:
            var3[var5] = var3[var5 - 1] + var1[var5]
            var4[var5] = var5 - 1
        else:
            var3[var5] = var3[var5 - 2] + var1[var5]
            var4[var5] = var5 - 2
    var6 = []
    var7 = var2 - 1
    while var7 is not None:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[var2 - 1], var6[::-1])",Grasshopper
376,"def var0(var1):

    def var2(var3, var4, var5):
        if var3 >= len(var1):
            yield (var4, var5)
        else:
            yield from var2(var3 + 1, var4 + var1[var3], var5 + [var3 + 1])
            yield from var2(var3 + 2, var4 + var1[var3], var5 + [var3 + 1, var3 + 2])
    var6 = list(var2(0, 0, []))
    return min(var6, key=lambda var7: var7[0])",Grasshopper
377,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    var3 = reduce(lambda var4, var5: var4 + [min(var4[-1] + var1[var5], (var4[-2] if var5 > 1 else float('inf')) + var1[var5])], range(2, var2), [0, var1[0] if var2 > 0 else 0, var1[1] if var2 > 1 else 0])
    var6 = []
    var5 = var2 - 1
    while var5 > 0:
        var6.append(var5 + 1)
        if var5 == 1:
            var5 = 0
        elif var3[var5] == var3[var5 - 1] + var1[var5]:
            var5 = var5 - 1
        else:
            var5 = var5 - 2
    return (var3[-1], var6[::-1])",Grasshopper
378,"import numpy as np

def var0(var1):
    var2 = len(var1)
    var3 = np.zeros(var2)
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
    var5 = [var2]
    var4 = var2 - 1
    while var4 > 0:
        if var4 == 1:
            var5.append(0)
            break
        if var3[var4] == var3[var4 - 1] + var1[var4]:
            var5.append(var4 - 1)
            var4 = var4 - 1
        else:
            var5.append(var4 - 2)
            var4 = var4 - 2
    return (var3[var2 - 1], var5[::-1])",Grasshopper
379,"def var0(var1):
    var2 = len(var1)
    if var2 <= 1:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[0] = var1[0]
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1], var3[var4 - 2]) + var1[var4]
    var5 = [var2]
    var4 = var2 - 1
    while var4 > 0:
        var5.append(var4)
        if var4 == 1:
            var4 = 0
        elif var3[var4] == var3[var4 - 1] + var1[var4]:
            var4 = var4 - 1
        else:
            var4 = var4 - 2
    return (var3[var2 - 1], var5[::-1])",Grasshopper
380,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var3[1] = var1[1]
    for var4 in range(2, var2):
        var3[var4] = min(var3[var4 - 1] + var1[var4], var3[var4 - 2] + var1[var4])
    var5 = [var2]
    var4 = var2 - 1
    while var4 > 0:
        var5.append(var4)
        if var4 == 1:
            var4 = 0
        elif var3[var4] == var3[var4 - 1] + var1[var4]:
            var4 = var4 - 1
        else:
            var4 = var4 - 2
    return (var3[var2 - 1], var5[::-1])",Grasshopper
381,"def var0(var1):
    var2 = len(var1)
    var3 = {}

    def var4(var5):
        if var5 >= var2:
            return (0, [])
        if var5 in var3:
            return var3[var5]
        var6, var7 = var4(var5 + 1)
        var8, var9 = var4(var5 + 2)
        if var6 + var1[var5] < var8 + var1[var5]:
            var3[var5] = (var6 + var1[var5], [var5 + 1] + var7)
        else:
            var3[var5] = (var8 + var1[var5], [var5 + 2] + var9)
        return var3[var5]
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    return var4(0)",Grasshopper
382,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[var2 - 1] = var1[var2 - 1]
    var4[var2 - 1] = [var2]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = [var2 - 1, var2]
    for var6 in range(var2 - 3, -1, -1):
        if var3[var6 + 1] + var1[var6] < var3[var6 + 2] + var1[var6]:
            var3[var6] = var3[var6 + 1] + var1[var6]
            var4[var6] = [var6 + 1] + var4[var6 + 1]
        else:
            var3[var6] = var3[var6 + 2] + var1[var6]
            var4[var6] = [var6 + 2] + var4[var6 + 2]
    return (var3[0], var4[0])",Grasshopper
383,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0, 0]
    var4 = [[], []]
    var3[0] = var1[var2 - 1]
    var4[0] = [var2]
    var3[1] = var1[var2 - 2] + var1[var2 - 1]
    var4[1] = [var2 - 1, var2]
    for var5 in range(var2 - 3, -1, -1):
        if var3[0] + var1[var5] < var3[1] + var1[var5]:
            var3[1] = var3[0] + var1[var5]
            var4[1] = [var5 + 1] + var4[0]
        else:
            var3[0] = var3[1] + var1[var5]
            var4[0] = [var5 + 2] + var4[1]
    return (var3[0], var4[0])",Grasshopper
384,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = var1[:]
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + min(var3[var4 + 1], var3[var4 + 2])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
385,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = var2 - 1
    for var5 in range(var2 - 3, -1, -1):
        if var3[var5 + 1] + var1[var5] < var3[var5 + 2] + var1[var5]:
            var3[var5] = var3[var5 + 1] + var1[var5]
            var4[var5] = var5 + 1
        else:
            var3[var5] = var3[var5 + 2] + var1[var5]
            var4[var5] = var5 + 2
    var6 = []
    var7 = 0
    while var7 < var2:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[0], var6)",Grasshopper
386,"def var0(var1):
    var2 = len(var1)

    def var3(var4):
        if var4 >= var2:
            yield []
        else:
            for var5 in [var4 + 1, var4 + 2]:
                for var6 in var3(var5):
                    yield ([var4 + 1] + var6)
    var7 = float('inf')
    var8 = []
    for var9 in var3(0):
        var10 = sum((var1[var11 - 1] for var11 in var9))
        if var10 < var7:
            var7 = var10
            var8 = var9
    return (var7, var8)",Grasshopper
387,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = reduce(lambda var4, var5: [var1[var5] + min(var4[0], var4[1])] + var4, range(var2 - 2, -1, -1), [var1[var2 - 1], var1[var2 - 2] + var1[var2 - 1]])
    var6 = []
    var7 = 0
    while var7 < var2 - 1:
        if var3[0] < var3[1]:
            var6.append(var7 + 1)
            var7 += 1
        else:
            var6.append(var7 + 2)
            var7 += 2
    var6.append(var2)
    return (var3[0], [var8 + 1 for var8 in var6])",Grasshopper
388,"import numpy as np

def var0(var1):
    var2 = len(var1)
    var1 = np.array(var1)
    if var2 < 3:
        return (np.sum(var1), list(range(1, var2 + 1)))
    var3 = np.zeros(var2)
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + np.min([var3[var4 + 1], var3[var4 + 2]])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
389,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        if var3[var4 + 2] > var3[var4 + 1] + var1[var4]:
            var3[var4] = var3[var4 + 1] + var1[var4]
        else:
            var3[var4] = var3[var4 + 2] + var1[var4]
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
390,"import multiprocessing

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    with multiprocessing.Pool(processes=2) as var4:
        var5 = var4.starmap(lambda var6: (var6, var1[var6] + min(var3[var6 + 1], var3[var6 + 2])), [(var6,) for var6 in range(var2 - 3, -1, -1)])
    for var6, var7 in var5:
        var3[var6] = var7
    var8 = []
    var9 = 0
    while var9 < var2 - 1:
        if var3[var9 + 1] < var3[var9 + 2]:
            var8.append(var9 + 1)
            var9 += 1
        else:
            var8.append(var9 + 2)
            var9 += 2
    var8.append(var2)
    return (var3[0], [var10 + 1 for var10 in var8])",Grasshopper
391,"def var0(var1):
    var2 = len(var1)
    var3 = {}

    def var4(var5):
        if var5 >= var2:
            return (0, [])
        if var5 in var3:
            return var3[var5]
        var6, var7 = var4(var5 + 1)
        var8, var9 = var4(var5 + 2)
        if var6 + var1[var5] < var8 + var1[var5]:
            var3[var5] = (var6 + var1[var5], [var5 + 1] + var7)
        else:
            var3[var5] = (var8 + var1[var5], [var5 + 2] + var9)
        return var3[var5]
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    return var4(0)",Grasshopper
392,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [[] for var5 in range(var2)]
    var3[var2 - 1] = var1[var2 - 1]
    var4[var2 - 1] = [var2]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = [var2 - 1, var2]
    for var6 in range(var2 - 3, -1, -1):
        if var3[var6 + 1] + var1[var6] < var3[var6 + 2] + var1[var6]:
            var3[var6] = var3[var6 + 1] + var1[var6]
            var4[var6] = [var6 + 1] + var4[var6 + 1]
        else:
            var3[var6] = var3[var6 + 2] + var1[var6]
            var4[var6] = [var6 + 2] + var4[var6 + 2]
    return (var3[0], var4[0])",Grasshopper
393,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0, 0]
    var4 = [[], []]
    var3[0] = var1[var2 - 1]
    var4[0] = [var2]
    var3[1] = var1[var2 - 2] + var1[var2 - 1]
    var4[1] = [var2 - 1, var2]
    for var5 in range(var2 - 3, -1, -1):
        if var3[0] + var1[var5] < var3[1] + var1[var5]:
            var3[1] = var3[0] + var1[var5]
            var4[1] = [var5 + 1] + var4[0]
        else:
            var3[0] = var3[1] + var1[var5]
            var4[0] = [var5 + 2] + var4[1]
    return (var3[0], var4[0])",Grasshopper
394,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = var1[:]
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + min(var3[var4 + 1], var3[var4 + 2])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
395,"def var0(var1):
    var2 = len(var1)
    var3 = [0] * var2
    var4 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
        var4[var2 - 2] = var2 - 1
    for var5 in range(var2 - 3, -1, -1):
        if var3[var5 + 1] + var1[var5] < var3[var5 + 2] + var1[var5]:
            var3[var5] = var3[var5 + 1] + var1[var5]
            var4[var5] = var5 + 1
        else:
            var3[var5] = var3[var5 + 2] + var1[var5]
            var4[var5] = var5 + 2
    var6 = []
    var7 = 0
    while var7 < var2:
        var6.append(var7 + 1)
        var7 = var4[var7]
    return (var3[0], var6)",Grasshopper
396,"def var0(var1):
    var2 = len(var1)

    def var3(var4):
        if var4 >= var2:
            yield []
        else:
            for var5 in [var4 + 1, var4 + 2]:
                for var6 in var3(var5):
                    yield ([var5] + var6)
    var7 = float('inf')
    var8 = []
    for var9 in var3(0):
        var10 = sum((var1[var11 - 1] for var11 in var9))
        if var10 < var7:
            var7 = var10
            var8 = var9
    return (var7, var8)",Grasshopper
397,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = reduce(lambda var4, var5: [var1[var5] + min(var4[0], var4[1])] + var4, range(var2 - 2, -1, -1), [var1[var2 - 1], var1[var2 - 2] + var1[var2 - 1]])
    var6 = []
    var7 = 0
    while var7 < var2 - 1:
        if var3[0] < var3[1]:
            var6.append(var7 + 1)
            var7 += 1
        else:
            var6.append(var7 + 2)
            var7 += 2
    var6.append(var2)
    return (var3[0], [var8 + 1 for var8 in var6])",Grasshopper
398,"import numpy as np

def var0(var1):
    var2 = len(var1)
    var1 = np.array(var1)
    if var2 < 3:
        return (np.sum(var1), list(range(1, var2 + 1)))
    var3 = np.zeros(var2)
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        var3[var4] = var1[var4] + np.min([var3[var4 + 1], var3[var4 + 2]])
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
399,"def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    for var4 in range(var2 - 3, -1, -1):
        if var3[var4 + 2] > var3[var4 + 1] + var1[var4]:
            var3[var4] = var3[var4 + 1] + var1[var4]
        else:
            var3[var4] = var3[var4 + 2] + var1[var4]
    var5 = []
    var6 = 0
    while var6 < var2 - 1:
        if var3[var6 + 1] < var3[var6 + 2]:
            var5.append(var6 + 1)
            var6 += 1
        else:
            var5.append(var6 + 2)
            var6 += 2
    var5.append(var2)
    return (var3[0], [var7 + 1 for var7 in var5])",Grasshopper
400,"import multiprocessing

def var0(var1):
    var2 = len(var1)
    if var2 < 3:
        return (sum(var1), list(range(1, var2 + 1)))
    var3 = [0] * var2
    var3[var2 - 1] = var1[var2 - 1]
    if var2 > 1:
        var3[var2 - 2] = var1[var2 - 2] + var1[var2 - 1]
    with multiprocessing.Pool(processes=2) as var4:
        var5 = var4.starmap(lambda var6: (var6, var1[var6] + min(var3[var6 + 1], var3[var6 + 2])), [(var6,) for var6 in range(var2 - 3, -1, -1)])
    for var6, var7 in var5:
        var3[var6] = var7
    var8 = []
    var9 = 0
    while var9 < var2 - 1:
        if var3[var9 + 1] < var3[var9 + 2]:
            var8.append(var9 + 1)
            var9 += 1
        else:
            var8.append(var9 + 2)
            var9 += 2
    var8.append(var2)
    return (var3[0], [var10 + 1 for var10 in var8])",Grasshopper
401,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = {}

    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var4[var6, var7] = (var1[var6][var7] + var8, 'D' + var9)
        else:
            var4[var6, var7] = (var1[var6][var7] + var10, 'R' + var11)
        return var4[var6, var7]
    return var5(0, 0)",Turtle
402,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 < var10:
                var4[var7][var8] = var1[var7][var8] + var9
                var6[var7][var8] = 'D'
            else:
                var4[var7][var8] = var1[var7][var8] + var10
                var6[var7][var8] = 'R'
    var11 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 > 0 or var8 > 0:
        var11 = var6[var7][var8] + var11
        if var6[var7][var8] == 'D':
            var7 -= 1
        else:
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var11)",Turtle
403,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [''] * var3
    for var6 in range(var2):
        var7 = 0
        var8 = ''
        for var9 in range(var3):
            var10 = var4[var9]
            var11 = var7 if var9 > 0 else float('inf')
            if var10 < var11:
                var4[var9] = var1[var6][var9] + var10
                var5[var9] = 'D'
            else:
                var4[var9] = var1[var6][var9] + var11
                var5[var9] = 'R'
            var7 = var4[var9]
            var8 = var5[var9]
    var12 = ''
    var9 = var3 - 1
    var6 = var2 - 1
    while var6 > 0 or var9 > 0:
        var12 = var5[var9] + var12
        if var5[var9] == 'D':
            var6 -= 1
        else:
            var9 -= 1
    return (var4[var3 - 1], var12)",Turtle
404,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 == 0 and var5 == 0:
                continue
            if var4 > 0 and var5 > 0:
                var1[var4][var5] += min(var1[var4 - 1][var5], var1[var4][var5 - 1])
            elif var4 > 0:
                var1[var4][var5] += var1[var4 - 1][var5]
            else:
                var1[var4][var5] += var1[var4][var5 - 1]
    var6 = ''
    var4, var5 = (var2 - 1, var3 - 1)
    while var4 > 0 or var5 > 0:
        if var4 > 0 and var5 > 0 and (var1[var4 - 1][var5] <= var1[var4][var5 - 1]):
            var6 = 'D' + var6
            var4 -= 1
        else:
            var6 = 'R' + var6
            var5 -= 1
    return (var1[var2 - 1][var3 - 1], var6)",Turtle
405,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            if var7 > 0 and var8 > 0:
                if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                    var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                    var6[var7][var8] = (var7 - 1, var8)
                else:
                    var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                    var6[var7][var8] = (var7, var8 - 1)
            elif var7 > 0:
                var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                var6[var7][var8] = (var7, var8 - 1)
    var9 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 != 0 or var8 != 0:
        if var6[var7][var8] == (var7 - 1, var8):
            var9 = 'D' + var9
            var7 -= 1
        else:
            var9 = 'R' + var9
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
406,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')

    def var4(var5, var6):
        if var5 == var2 - 1 and var6 == var3 - 1:
            yield ''
            return
        if var5 + 1 < var2:
            for var7 in var4(var5 + 1, var6):
                yield ('D' + var7)
        if var6 + 1 < var3:
            for var7 in var4(var5, var6 + 1):
                yield ('R' + var7)
    var8 = float('inf')
    var9 = ''
    for var7 in var4(0, 0):
        var10 = 0
        var11, var12 = (0, 0)
        for var13 in var7:
            var10 += var1[var11][var12]
            if var13 == 'D':
                var11 += 1
            else:
                var12 += 1
        var10 += var1[var11][var12]
        if var10 < var8:
            var8 = var10
            var9 = var7
    return (var8, var9)",Turtle
407,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = reduce(lambda var5, var6: var5 + [reduce(lambda var7, var8: var7 + [var1[var6][var8] + (var5[var6 - 1][var8] if var6 > 0 else 0) + (var5[var6][var8 - 1] if var8 > 0 else 0)], [0] * var3, 0)], [0] * var2, [])
    var9 = ''
    var6, var8 = (var2 - 1, var3 - 1)
    while var6 > 0 or var8 > 0:
        if var6 > 0 and (var8 == 0 or var4[var6 - 1][var8] <= var4[var6][var8 - 1]):
            var9 = 'D' + var9
            var6 -= 1
        else:
            var9 = 'R' + var9
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
408,"import numpy as np

def var0(var1):
    var1 = np.array(var1)
    var2, var3 = var1.shape
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = np.zeros((var2, var3), dtype=int)
    var4[0, 0] = var1[0, 0]
    for var5 in range(var2):
        for var6 in range(var3):
            if var5 == 0 and var6 == 0:
                continue
            var4[var5, var6] = var1[var5, var6] + min(var4[var5 - 1, var6] if var5 > 0 else float('inf'), var4[var5, var6 - 1] if var6 > 0 else float('inf'))
    var7 = ''
    var5, var6 = (var2 - 1, var3 - 1)
    while var5 > 0 or var6 > 0:
        if var5 > 0 and var4[var5 - 1, var6] <= var4[var5, var6 - 1]:
            var7 = 'D' + var7
            var5 -= 1
        else:
            var7 = 'R' + var7
            var6 -= 1
    return (var4[var2 - 1, var3 - 1], var7)",Turtle
409,"def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = [[float('inf')] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var4[var6][var7] == float('inf'):
                continue
            if var6 + 1 < var2:
                var4[var6 + 1][var7] = min(var4[var6 + 1][var7], var4[var6][var7] + var1[var6 + 1][var7])
            if var7 + 1 < var3:
                var4[var6][var7 + 1] = min(var4[var6][var7 + 1], var4[var6][var7] + var1[var6][var7 + 1])
    var8 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var4[var6 - 1][var7] <= var4[var6][var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
410,"import multiprocessing

def var0(var1):
    var2 = len(var1)
    if var2 == 0:
        return (0, '')
    var3 = len(var1[0])
    if var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]

    def var7(var6):
        for var8 in range(1, var3):
            var4[var6][var8] = var1[var6][var8] + min(var4[var6 - 1][var8], var4[var6][var8 - 1])
    with multiprocessing.Pool() as var9:
        var9.map(var7, range(1, var2))
    var10 = ''
    var6, var8 = (var2 - 1, var3 - 1)
    while var6 > 0 or var8 > 0:
        if var6 > 0 and (var8 == 0 or var4[var6 - 1][var8] <= var4[var6][var8 - 1]):
            var10 = 'D' + var10
            var6 -= 1
        else:
            var10 = 'R' + var10
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var10)",Turtle
411,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 <= var10:
                var4[var7][var8] = var9 + var1[var7][var8]
                var6[var7][var8] = var6[var7 - 1][var8] + 'D'
            else:
                var4[var7][var8] = var10 + var1[var7][var8]
                var6[var7][var8] = var6[var7][var8 - 1] + 'R'
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
412,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7] if var6 > 0 else float('inf'), var4[var6][var7 - 1] if var7 > 0 else float('inf'))
    var8 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var4[var6 - 1][var7] <= var4[var6][var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
413,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [0] * var3
    var4[0] = var1[0][0]
    for var6 in range(1, var3):
        var4[var6] = var4[var6 - 1] + var1[0][var6]
    for var7 in range(1, var2):
        var5[0] = var4[0] + var1[var7][0]
        for var6 in range(1, var3):
            var5[var6] = var1[var7][var6] + min(var4[var6], var5[var6 - 1])
        var4 = var5[:]
    var8 = ''
    var7, var6 = (var2 - 1, var3 - 1)
    while var7 > 0 or var6 > 0:
        if var7 > 0 and (var6 == 0 or var4[var6] <= var5[var6 - 1]):
            var8 = 'D' + var8
            var7 -= 1
        else:
            var8 = 'R' + var8
            var6 -= 1
    return (var4[var3 - 1], var8)",Turtle
414,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [0] * var3
    for var5 in range(var2):
        var6 = [0] * var3
        var6[0] = var4[0] + var1[var5][0]
        for var7 in range(1, var3):
            var6[var7] = var1[var5][var7] + min(var4[var7], var6[var7 - 1])
        var4 = var6
    var8 = ''
    var5, var7 = (var2 - 1, var3 - 1)
    while var5 > 0 or var7 > 0:
        if var5 > 0 and (var7 == 0 or var4[var7] <= var4[var7 - 1]):
            var8 = 'D' + var8
            var5 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var3 - 1], var8)",Turtle
415,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[(float('inf'), '') for var5 in range(var3)] for var5 in range(var2)]
    var4[0][0] = (var1[0][0], '')
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 > 0:
                var8, var9 = var4[var6 - 1][var7]
                if var8 + var1[var6][var7] < var4[var6][var7][0]:
                    var4[var6][var7] = (var8 + var1[var6][var7], var9 + 'D')
            if var7 > 0:
                var8, var9 = var4[var6][var7 - 1]
                if var8 + var1[var6][var7] < var4[var6][var7][0]:
                    var4[var6][var7] = (var8 + var1[var6][var7], var9 + 'R')
    return var4[var2 - 1][var3 - 1]",Turtle
416,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')

    def var4(var5, var6):
        if var5 == 0 and var6 == 0:
            return (var1[0][0], '')
        if var5 == 0:
            var7, var8 = var4(var5, var6 - 1)
            return (var7 + var1[var5][var6], var8 + 'R')
        if var6 == 0:
            var7, var8 = var4(var5 - 1, var6)
            return (var7 + var1[var5][var6], var8 + 'D')
        var9, var10 = var4(var5 - 1, var6)
        var11, var12 = var4(var5, var6 - 1)
        if var9 <= var11:
            return (var9 + var1[var5][var6], var10 + 'D')
        else:
            return (var11 + var1[var5][var6], var12 + 'R')
    return var4(var2 - 1, var3 - 1)",Turtle
417,"import functools

def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')

    @functools.lru_cache(maxsize=None)
    def var4(var5, var6):
        if var5 == 0 and var6 == 0:
            return (var1[0][0], '')
        if var5 < 0 or var6 < 0:
            return (float('inf'), '')
        var7, var8 = var4(var5 - 1, var6)
        var9, var10 = var4(var5, var6 - 1)
        if var7 <= var9:
            return (var7 + var1[var5][var6], var8 + 'D')
        else:
            return (var9 + var1[var5][var6], var10 + 'R')
    return var4(var2 - 1, var3 - 1)",Turtle
418,"import numpy as np

def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = np.zeros((var2, var3), dtype=np.int64)
    var5 = np.empty((var2, var3), dtype=object)
    var4[0, 0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1, var7] if var6 > 0 else np.inf
            var9 = var4[var6, var7 - 1] if var7 > 0 else np.inf
            if var8 <= var9:
                var4[var6, var7] = var8 + var1[var6][var7]
                var5[var6, var7] = (var6 - 1, var7)
            else:
                var4[var6, var7] = var9 + var1[var6][var7]
                var5[var6, var7] = (var6, var7 - 1)
    var10 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        var11, var12 = var5[var6, var7]
        if var11 == var6 - 1:
            var10 = 'D' + var10
        else:
            var10 = 'R' + var10
        var6, var7 = (var11, var12)
    return (var4[var2 - 1, var3 - 1], var10)",Turtle
419,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[(float('inf'), '') for var5 in range(var3)] for var5 in range(var2)]
    var4[0][0] = (var1[0][0], '')
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 > 0 and var4[var6 - 1][var7][0] + var1[var6][var7] < var4[var6][var7][0]:
                var4[var6][var7] = (var4[var6 - 1][var7][0] + var1[var6][var7], var4[var6 - 1][var7][1] + 'D')
            if var7 > 0 and var4[var6][var7 - 1][0] + var1[var6][var7] < var4[var6][var7][0]:
                var4[var6][var7] = (var4[var6][var7 - 1][0] + var1[var6][var7], var4[var6][var7 - 1][1] + 'R')
    return var4[var2 - 1][var3 - 1]",Turtle
420,"import multiprocessing

def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')

    def var4(var5):
        var6 = [0] * var3
        var6[0] = var1[var5][0] + (var7[0] if var5 > 0 else 0)
        for var8 in range(1, var3):
            var6[var8] = var1[var5][var8] + min(var6[var8 - 1], var7[var8])
        return var6
    with multiprocessing.Pool() as var9:
        var7 = [0] * var3
        for var10 in range(var2):
            var11 = var9.apply_async(var4, (var10,))
            var7 = var11.get()
    var12 = ''
    var10, var8 = (var2 - 1, var3 - 1)
    while var10 > 0 or var8 > 0:
        if var10 > 0 and (var8 == 0 or var7[var8] <= var11[var8 - 1] if var10 > 0 else True):
            var12 = 'D' + var12
            var10 -= 1
        else:
            var12 = 'R' + var12
            var8 -= 1
    return (var7[var3 - 1], var12)",Turtle
421,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    var4 = {}

    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        var12 = var1[var6][var7] + min(var8, var10)
        var13 = 'D' + var9 if var8 < var10 else 'R' + var11
        var4[var6, var7] = (var12, var13)
        return (var12, var13)
    if not var1:
        return (0, '')
    return var5(0, 0)",Turtle
422,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    for var6 in range(1, var2):
        for var7 in range(1, var3):
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7], var4[var6][var7 - 1])
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var10 > 0 and (var4[var9 - 1][var10] < var4[var9][var10 - 1]):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
423,"def var0(var1):
    if not var1:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [0] * var3
    var5 = [0] * var3
    var4[0] = var1[0][0]
    for var6 in range(1, var3):
        var4[var6] = var4[var6 - 1] + var1[0][var6]
    for var7 in range(1, var2):
        var5[0] = var4[0] + var1[var7][0]
        for var6 in range(1, var3):
            var5[var6] = var1[var7][var6] + min(var4[var6], var5[var6 - 1])
        var4, var5 = (var5, var4)
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var10 > 0 and (var4[var10] - var1[var9][var10] < var5[var10 - 1] - var1[var9][var10]):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var3 - 1], var8)",Turtle
424,"def var0(var1):
    if not var1:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    for var4 in range(1, var2):
        var1[var4][0] += var1[var4 - 1][0]
    for var5 in range(1, var3):
        var1[0][var5] += var1[0][var5 - 1]
    for var4 in range(1, var2):
        for var5 in range(1, var3):
            var1[var4][var5] += min(var1[var4 - 1][var5], var1[var4][var5 - 1])
    var6 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 > 0 or var8 > 0:
        if var7 > 0 and var8 > 0 and (var1[var7 - 1][var8] < var1[var7][var8 - 1]):
            var6 = 'D' + var6
            var7 -= 1
        else:
            var6 = 'R' + var6
            var8 -= 1
    return (var1[var2 - 1][var3 - 1], var6)",Turtle
425,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 > 0 and var8 > 0:
                if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                    var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                    var6[var7][var8] = (var7 - 1, var8)
                else:
                    var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                    var6[var7][var8] = (var7, var8 - 1)
            elif var7 == 0 and var8 > 0:
                var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                var6[var7][var8] = (var7, var8 - 1)
            elif var7 > 0 and var8 == 0:
                var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                var6[var7][var8] = (var7 - 1, var8)
    var9 = ''
    var10, var11 = (var2 - 1, var3 - 1)
    while var10 != 0 or var11 != 0:
        if var6[var10][var11] is None:
            break
        var12, var13 = var6[var10][var11]
        if var12 == var10 - 1:
            var9 = 'D' + var9
        else:
            var9 = 'R' + var9
        var10, var11 = (var12, var13)
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
426,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    var4 = (var1[var5][var6] + min(var7[var6], var4[var5 - 1][var6]) if var5 > 0 and var6 > 0 else var1[var5][var6] + var7[var6] if var5 == 0 and var6 > 0 else var1[var5][var6] + var4[var5 - 1][var6] if var5 > 0 and var6 == 0 else var1[var5][var6] for var5 in range(var2) for var6 in range(var3))
    var8 = list(var4)
    var9 = [var8[var5 * var3:(var5 + 1) * var3] for var5 in range(var2)]
    var10 = ''
    var11, var12 = (var2 - 1, var3 - 1)
    while var11 > 0 or var12 > 0:
        if var11 > 0 and var12 > 0 and (var9[var11 - 1][var12] < var9[var11][var12 - 1]):
            var10 = 'D' + var10
            var11 -= 1
        else:
            var10 = 'R' + var10
            var12 -= 1
    return (var9[var2 - 1][var3 - 1], var10)",Turtle
427,"from functools import reduce

def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    if not var1:
        return (0, '')
    var4 = reduce(lambda var5, var6: var5 + [var1[0][var6] + var5[-1] if var6 > 0 else var1[0][var6]], range(var3), [0])
    for var7 in range(1, var2):
        var4 = reduce(lambda var5, var6: var5 + [var1[var7][var6] + min(var4[var6], var5[-1]) if var6 > 0 else var1[var7][var6]], range(var3), [var4[0] + var1[var7][0]])
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var10 > 0 and (var4[var10] - var1[var9][var10] - 1 < var4[var10 - 1] - var1[var9][var10] - 1):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var3 - 1], var8)",Turtle
428,"import numpy as np

def var0(var1):
    var2 = np.array(var1)
    var3, var4 = var2.shape
    var5 = np.zeros((var3, var4), dtype=int)
    var5[0, 0] = var2[0, 0]
    for var6 in range(1, var3):
        var5[var6, 0] = var5[var6 - 1, 0] + var2[var6, 0]
    for var7 in range(1, var4):
        var5[0, var7] = var5[0, var7 - 1] + var2[0, var7]
    for var6 in range(1, var3):
        for var7 in range(1, var4):
            var5[var6, var7] = var2[var6, var7] + min(var5[var6 - 1, var7], var5[var6, var7 - 1])
    var8 = ''
    var9, var10 = (var3 - 1, var4 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var10 > 0 and (var5[var9 - 1, var10] < var5[var9, var10 - 1]):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var5[var3 - 1, var4 - 1], var8)",Turtle
429,"def var0(var1):
    var2, var3 = (len(var1), len(var1[0]) if var1 else 0)
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1][var7] if var6 > 0 else float('inf')
            var9 = var4[var6][var7 - 1] if var7 > 0 else float('inf')
            var4[var6][var7] = var1[var6][var7] + min(var8, var9)
            if var4[var6][var7] >= 10 ** 6:
                break
    var10 = ''
    var11, var12 = (var2 - 1, var3 - 1)
    while var11 > 0 or var12 > 0:
        if var11 > 0 and var12 > 0 and (var4[var11 - 1][var12] < var4[var11][var12 - 1]):
            var10 = 'D' + var10
            var11 -= 1
        else:
            var10 = 'R' + var10
            var12 -= 1
    return (var4[var2 - 1][var3 - 1], var10)",Turtle
430,"import multiprocessing

def var0(var1):
    if not var1:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))

    def var4(var5):
        var6 = [0] * var3
        var6[0] = var1[var5][0] + (var7[0] if var5 > 0 else 0)
        for var8 in range(1, var3):
            var6[var8] = var1[var5][var8] + min(var6[var8 - 1], var7[var8])
        return var6
    with multiprocessing.Pool() as var9:
        var10 = var9.map(var4, range(var2))
    var7 = var10[0]
    for var5 in range(1, len(var10)):
        var7 = var10[var5]
    var11 = ''
    var12, var13 = (var2 - 1, var3 - 1)
    while var12 > 0 or var13 > 0:
        if var12 > 0 and var13 > 0 and (var10[var12 - 1][var13] < var10[var12][var13 - 1]):
            var11 = 'D' + var11
            var12 -= 1
        else:
            var11 = 'R' + var11
            var13 -= 1
    return (var7[var3 - 1], var11)",Turtle
431,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = {}

    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var4[var6, var7] = (var1[var6][var7] + var8, 'D' + var9)
        else:
            var4[var6, var7] = (var1[var6][var7] + var10, 'R' + var11)
        return var4[var6, var7]
    if not var1:
        return (0, '')
    return var5(0, 0)",Turtle
432,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
433,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [''] * var3
    var4[0] = var1[0][0]
    var5[0] = ''
    for var6 in range(1, var3):
        var4[var6] = var4[var6 - 1] + var1[0][var6]
        var5[var6] = 'R' + var5[var6 - 1]
    for var7 in range(1, var2):
        var8 = [0] * var3
        var9 = [''] * var3
        var8[0] = var4[0] + var1[var7][0]
        var9[0] = 'D' + var5[0]
        for var6 in range(1, var3):
            if var4[var6] < var8[var6 - 1]:
                var8[var6] = var4[var6] + var1[var7][var6]
                var9[var6] = 'D' + var5[var6]
            else:
                var8[var6] = var8[var6 - 1] + var1[var7][var6]
                var9[var6] = 'R' + var9[var6 - 1]
        var4 = var8
        var5 = var9
    return (var4[var3 - 1], var5[var3 - 1])",Turtle
434,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 > 0 and var5 > 0:
                var1[var4][var5] += min(var1[var4 - 1][var5], var1[var4][var5 - 1])
            elif var4 > 0:
                var1[var4][var5] += var1[var4 - 1][var5]
            elif var5 > 0:
                var1[var4][var5] += var1[var4][var5 - 1]
    var6 = ''
    var4, var5 = (var2 - 1, var3 - 1)
    while var4 > 0 or var5 > 0:
        if var4 > 0 and var5 > 0 and (var1[var4 - 1][var5] <= var1[var4][var5 - 1]):
            var6 = 'D' + var6
            var4 -= 1
        else:
            var6 = 'R' + var6
            var5 -= 1
    return (var1[var2 - 1][var3 - 1], var6)",Turtle
435,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            if var7 > 0 and var8 > 0:
                if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                    var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                    var6[var7][var8] = (var7 - 1, var8)
                else:
                    var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                    var6[var7][var8] = (var7, var8 - 1)
            elif var7 > 0:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = (var7, var8 - 1)
    var9 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 != 0 or var8 != 0:
        if var6[var7][var8] is None:
            break
        var10, var11 = var6[var7][var8]
        if var10 == var7 - 1:
            var9 = 'D' + var9
        else:
            var9 = 'R' + var9
        var7, var8 = (var10, var11)
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
436,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[float('inf')] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]

    def var6(var7, var8):
        if var7 == 0 and var8 == 0:
            yield ''
        elif var7 > 0 and var4[var7 - 1][var8] < var4[var7][var8 - 1] if var8 > 0 else True:
            for var9 in var6(var7 - 1, var8):
                yield ('D' + var9)
        elif var8 > 0:
            for var9 in var6(var7, var8 - 1):
                yield ('R' + var9)
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 > 0:
                var4[var7][var8] = min(var4[var7][var8], var4[var7 - 1][var8] + var1[var7][var8])
            if var8 > 0:
                var4[var7][var8] = min(var4[var7][var8], var4[var7][var8 - 1] + var1[var7][var8])
    return (var4[var2 - 1][var3 - 1], next(var6(var2 - 1, var3 - 1)))",Turtle
437,"from functools import reduce

def turtle_dp_reduce(matrix):
    n = len(matrix)
    m = len(matrix[0]) if n > 0 else 0
    if n == 0:
        return 0, """"

    dp = reduce(lambda acc, i: acc + [reduce(lambda row_acc, j: row_acc + [row_acc[-1] + matrix[i][j] if j > 0 else matrix[i][j], []), range(m))], range(n), [[]])
    cost = dp[-1][-1]

    path = """"
    i, j = n - 1, m - 1
    while i > 0 or j > 0:
        if i > 0 and j > 0 and dp[i - 1][-1] <= dp[i][j - 1]:
            path = ""D"" + path
            i -= 1
        else:
            path = ""R"" + path
            j -= 1

    return cost, path",Turtle
438,"import numpy as np

def var0(var1):
    var2 = np.array(var1)
    var3, var4 = var2.shape
    var5 = np.zeros((var3, var4), dtype=int)
    var5[0, 0] = var2[0, 0]
    for var6 in range(var3):
        for var7 in range(var4):
            if var6 > 0 and var7 > 0:
                var5[var6, var7] = var2[var6, var7] + min(var5[var6 - 1, var7], var5[var6, var7 - 1])
            elif var6 > 0:
                var5[var6, var7] = var2[var6, var7] + var5[var6 - 1, var7]
            elif var7 > 0:
                var5[var6, var7] = var2[var6, var7] + var5[var6, var7 - 1]
    var8 = ''
    var6, var7 = (var3 - 1, var4 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and var7 > 0 and (var5[var6 - 1, var7] <= var5[var6, var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var5[var3 - 1, var4 - 1], var8)",Turtle
439,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
440,"import multiprocessing

def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]

    def var6(var7):
        for var8 in range(var3):
            if var7 > 0:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
            elif var8 > 0:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
    with multiprocessing.Pool() as var9:
        var9.map(var6, range(1, var2))
    for var10 in range(1, var2):
        for var8 in range(1, var3):
            var4[var10][var8] = min(var4[var10 - 1][var8], var4[var10][var8 - 1]) + var1[var10][var8]
    var11 = ''
    var10, var8 = (var2 - 1, var3 - 1)
    while var10 > 0 or var8 > 0:
        if var10 > 0 and var8 > 0 and (var4[var10 - 1][var8] <= var4[var10][var8 - 1]):
            var11 = 'D' + var11
            var10 -= 1
        else:
            var11 = 'R' + var11
            var8 -= 1
    return (var4[var2 - 1][var3 - 1], var11)",Turtle
441,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = {}

    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var12 = var1[var6][var7] + var8
            var13 = 'D' + var9
        else:
            var12 = var1[var6][var7] + var10
            var13 = 'R' + var11
        var4[var6, var7] = (var12, var13)
        return (var12, var13)
    if not var1:
        return (0, '')
    return var5(0, 0)",Turtle
442,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
443,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [0] * var3
    var6 = [''] * var3
    var7 = [''] * var3
    var4[0] = var1[0][0]
    var6[0] = ''
    for var8 in range(1, var3):
        var4[var8] = var4[var8 - 1] + var1[0][var8]
        var6[var8] = 'R' + var6[var8 - 1]
    for var9 in range(1, var2):
        var5[0] = var4[0] + var1[var9][0]
        var7[0] = 'D' + var6[0]
        for var8 in range(1, var3):
            if var4[var8] < var5[var8 - 1]:
                var5[var8] = var1[var9][var8] + var4[var8]
                var7[var8] = 'D' + var6[var8]
            else:
                var5[var8] = var1[var9][var8] + var5[var8 - 1]
                var7[var8] = 'R' + var7[var8 - 1]
        var4 = var5[:]
        var6 = var7[:]
    return (var4[var3 - 1], var6[var3 - 1])",Turtle
444,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 == 0 and var5 == 0:
                continue
            var6 = var1[var4 - 1][var5] if var4 > 0 else float('inf')
            var7 = var1[var4][var5 - 1] if var5 > 0 else float('inf')
            var1[var4][var5] += min(var6, var7)
    return (var1[var2 - 1][var3 - 1], '')",Turtle
445,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = (var7 - 1, 0)
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = (0, var8 - 1)
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var1[var7][var8] + var4[var7 - 1][var8]
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var1[var7][var8] + var4[var7][var8 - 1]
                var6[var7][var8] = (var7, var8 - 1)
    var9 = ''
    var10 = (var2 - 1, var3 - 1)
    while var10 != (0, 0):
        var11 = var6[var10[0]][var10[1]]
        if var11[0] < var10[0]:
            var9 = 'D' + var9
        else:
            var9 = 'R' + var9
        var10 = var11
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
446,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[float('inf')] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]

    def var6(var7, var8, var9):
        if var7 == var2 - 1 and var8 == var3 - 1:
            yield (var4[var7][var8], var9)
        else:
            if var7 + 1 < var2:
                var4[var7 + 1][var8] = min(var4[var7 + 1][var8], var4[var7][var8] + var1[var7 + 1][var8])
                yield from var6(var7 + 1, var8, var9 + 'D')
            if var8 + 1 < var3:
                var4[var7][var8 + 1] = min(var4[var7][var8 + 1], var4[var7][var8] + var1[var7][var8 + 1])
                yield from var6(var7, var8 + 1, var9 + 'R')
    if var2 == 0 or var3 == 0:
        return (0, '')
    var10 = float('inf')
    var11 = ''
    for var12, var13 in var6(0, 0, ''):
        if var12 < var10:
            var10, var11 = (var12, var13)
    return (var10, var11)",Turtle
447,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7] if var6 > 0 else float('inf'), var4[var6][var7 - 1] if var7 > 0 else float('inf'))
    return (var4[var2 - 1][var3 - 1], '')",Turtle
448,"import numpy as np

def var0(var1):
    var1 = np.array(var1)
    var2, var3 = var1.shape
    var4 = np.zeros((var2, var3))
    var4[0, 0] = var1[0, 0]
    for var5 in range(1, var2):
        var4[var5, 0] = var4[var5 - 1, 0] + var1[var5, 0]
    for var6 in range(1, var3):
        var4[0, var6] = var4[0, var6 - 1] + var1[0, var6]
    for var5 in range(1, var2):
        for var6 in range(1, var3):
            var4[var5, var6] = var1[var5, var6] + min(var4[var5 - 1, var6], var4[var5, var6 - 1])
    return (int(var4[var2 - 1, var3 - 1]), '')",Turtle
449,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1][var7] if var6 > 0 else float('inf')
            var9 = var4[var6][var7 - 1] if var7 > 0 else float('inf')
            var4[var6][var7] = var1[var6][var7] + min(var8, var9)
            if var4[var6][var7] > 100000:
                return (float('inf'), '')
    return (var4[var2 - 1][var3 - 1], '')",Turtle
450,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0] = list(var7.cumsum(var1[0]))
    var6[0] = ['R' * var8 for var8 in range(var3)]
    for var9 in range(1, var2):
        var4[var9][0] = var4[var9 - 1][0] + var1[var9][0]
        var6[var9][0] = 'D' + var6[var9 - 1][0]
        for var8 in range(1, var3):
            if var4[var9 - 1][var8] < var4[var9][var8 - 1]:
                var4[var9][var8] = var1[var9][var8] + var4[var9 - 1][var8]
                var6[var9][var8] = 'D' + var6[var9 - 1][var8]
            else:
                var4[var9][var8] = var1[var9][var8] + var4[var9][var8 - 1]
                var6[var9][var8] = 'R' + var6[var9][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
451,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = {}

    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6, var7 + 1)
        var10, var11 = var5(var6 + 1, var7)
        var12 = var1[var6][var7] + min(var8, var10)
        var13 = 'R' + var9 if var8 <= var10 else 'D' + var11
        var4[var6, var7] = (var12, var13)
        return (var12, var13)
    return var5(0, 0)",Turtle
452,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 <= var10:
                var4[var7][var8] = var1[var7][var8] + var9
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var1[var7][var8] + var10
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
453,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [0] * var3
    var5 = [0] * var3
    var4[0] = var1[0][0]
    for var6 in range(1, var3):
        var4[var6] = var4[var6 - 1] + var1[0][var6]
    for var7 in range(1, var2):
        var5[0] = var4[0] + var1[var7][0]
        for var6 in range(1, var3):
            var5[var6] = var1[var7][var6] + min(var4[var6], var5[var6 - 1])
        var4 = var5[:]
    return (var4[var3 - 1], '')",Turtle
454,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 == 0 and var5 == 0:
                continue
            var6 = var1[var4 - 1][var5] if var4 > 0 else float('inf')
            var7 = var1[var4][var5 - 1] if var5 > 0 else float('inf')
            var1[var4][var5] += min(var6, var7)
    return (var1[var2 - 1][var3 - 1], '')",Turtle
455,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 <= var10:
                var4[var7][var8] = var1[var7][var8] + var9
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var1[var7][var8] + var10
                var6[var7][var8] = (var7, var8 - 1)
    var11 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 > 0 or var8 > 0:
        if var6[var7][var8] == (var7 - 1, var8):
            var11 = 'D' + var11
        else:
            var11 = 'R' + var11
        var7, var8 = var6[var7][var8]
    return (var4[var2 - 1][var3 - 1], var11)",Turtle
456,"def var0(var1):

    def var2(var3, var4):
        if var3 == 0 and var4 == 0:
            yield (var1[0][0], '')
        elif var3 == 0:
            var5, var6 = (yield from var2(var3, var4 - 1))
            yield (var1[var3][var4] + var5, 'R' + var6)
        elif var4 == 0:
            var5, var6 = (yield from var2(var3 - 1, var4))
            yield (var1[var3][var4] + var5, 'D' + var6)
        else:
            var7, var8 = (yield from var2(var3 - 1, var4))
            var9, var10 = (yield from var2(var3, var4 - 1))
            if var7 <= var9:
                yield (var1[var3][var4] + var7, 'D' + var8)
            else:
                yield (var1[var3][var4] + var9, 'R' + var10)
    if not var1 or not var1[0]:
        return (0, '')
    else:
        var11, var12 = next(var2(len(var1) - 1, len(var1[0]) - 1))
        return (var11, var12)",Turtle
457,"from functools import reduce

def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7] if var6 > 0 else float('inf'), var4[var6][var7 - 1] if var7 > 0 else float('inf'))
    var8 = [[''] * var3 for var5 in range(var2)]

    def var9(var10, var11):
        if var10 == 0 and var11 == 0:
            return ''
        elif var10 == 0:
            return 'R' + var9(var10, var11 - 1)
        elif var11 == 0:
            return 'D' + var9(var10 - 1, var11)
        elif var4[var10 - 1][var11] <= var4[var10][var11 - 1]:
            return 'D' + var9(var10 - 1, var11)
        else:
            return 'R' + var9(var10, var11 - 1)
    return (var4[var2 - 1][var3 - 1], var9(var2 - 1, var3 - 1))",Turtle
458,"import numpy as np

def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2 = np.array(var1)
    var3, var4 = var2.shape
    var5 = np.zeros((var3, var4))
    var5[0, 0] = var2[0, 0]
    for var6 in range(var3):
        for var7 in range(var4):
            if var6 == 0 and var7 == 0:
                continue
            var5[var6, var7] = var2[var6, var7] + np.min([var5[var6 - 1, var7] if var6 > 0 else np.inf, var5[var6, var7 - 1] if var7 > 0 else np.inf])
    return (var5[var3 - 1, var4 - 1], '')",Turtle
459,"def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1][var7] if var6 > 0 else float('inf')
            var9 = var4[var6][var7 - 1] if var7 > 0 else float('inf')
            if var8 < var9:
                var4[var6][var7] = var1[var6][var7] + var8
            else:
                var4[var6][var7] = var1[var6][var7] + var9
    return (var4[var2 - 1][var3 - 1], '')",Turtle
460,"import multiprocessing

def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var8 = var4[var6 - 1][var7] if var6 > 0 else float('inf')
            var9 = var4[var6][var7 - 1] if var7 > 0 else float('inf')
            var4[var6][var7] = var1[var6][var7] + min(var8, var9)
    return (var4[var2 - 1][var3 - 1], '')",Turtle
461,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = {}

    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var12 = (var1[var6][var7] + var8, 'D' + var9)
        else:
            var12 = (var1[var6][var7] + var10, 'R' + var11)
        var4[var6, var7] = var12
        return var12
    if var2 == 0 or var3 == 0:
        return (0, '')
    return var5(0, 0)",Turtle
462,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    for var6 in range(1, var2):
        for var7 in range(1, var3):
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7], var4[var6][var7 - 1])
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var4[var9 - 1][var10] <= var4[var9][var10 - 1] if var10 > 0 else True:
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
463,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [0] * var3
    var4[0] = var1[0][0]
    for var5 in range(1, var3):
        var4[var5] = var4[var5 - 1] + var1[0][var5]
    for var6 in range(1, var2):
        var7 = [0] * var3
        var7[0] = var4[0] + var1[var6][0]
        for var5 in range(1, var3):
            var7[var5] = var1[var6][var5] + min(var4[var5], var7[var5 - 1])
        var4 = var7
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and (var10 == 0 or var4[var10 - 1] >= var4[var10]):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var3 - 1], var8)",Turtle
464,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    for var4 in range(1, var2):
        var1[var4][0] += var1[var4 - 1][0]
    for var5 in range(1, var3):
        var1[0][var5] += var1[0][var5 - 1]
    for var4 in range(1, var2):
        for var5 in range(1, var3):
            var1[var4][var5] += min(var1[var4 - 1][var5], var1[var4][var5 - 1])
    var6 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 > 0 or var8 > 0:
        if var7 > 0 and var1[var7 - 1][var8] <= var1[var7][var8 - 1] if var8 > 0 else True:
            var6 = 'D' + var6
            var7 -= 1
        else:
            var6 = 'R' + var6
            var8 -= 1
    return (var1[var2 - 1][var3 - 1], var6)",Turtle
465,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 < var10:
                var4[var7][var8] = var1[var7][var8] + var9
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var1[var7][var8] + var10
                var6[var7][var8] = (var7, var8 - 1)
    var11 = ''
    var12, var13 = (var2 - 1, var3 - 1)
    while var12 != 0 or var13 != 0:
        var14, var15 = var6[var12][var13]
        if var14 == var12 - 1:
            var11 = 'D' + var11
        else:
            var11 = 'R' + var11
        var12, var13 = (var14, var15)
    return (var4[var2 - 1][var3 - 1], var11)",Turtle
466,"def var0(var1):

    def var2(var3, var4):
        if var3 == len(var1) - 1 and var4 == len(var1[0]) - 1:
            yield (var1[var3][var4], '')
        elif var3 >= len(var1) or var4 >= len(var1[0]):
            yield (float('inf'), '')
        else:
            var5, var6 = next(var2(var3 + 1, var4))
            var7, var8 = next(var2(var3, var4 + 1))
            if var5 < var7:
                yield (var1[var3][var4] + var5, 'D' + var6)
            else:
                yield (var1[var3][var4] + var7, 'R' + var8)
    if not var1 or var1[0] == []:
        return (0, '')
    return next(var2(0, 0))",Turtle
467,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = reduce(lambda var5, var6: var5 + [[0] * var3], range(var2), [])
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 > 0 and var7 > 0:
                var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7], var4[var6][var7 - 1])
            elif var6 > 0:
                var4[var6][var7] = var1[var6][var7] + var4[var6 - 1][var7]
            elif var7 > 0:
                var4[var6][var7] = var1[var6][var7] + var4[var6][var7 - 1]
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and (var10 == 0 or var4[var9 - 1][var10] <= var4[var9][var10 - 1]):
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
468,"import numpy as np

def var0(var1):
    var1 = np.array(var1)
    var2, var3 = var1.shape
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = np.zeros((var2, var3), dtype=int)
    var4[0, 0] = var1[0, 0]
    for var5 in range(1, var2):
        var4[var5, 0] = var4[var5 - 1, 0] + var1[var5, 0]
    for var6 in range(1, var3):
        var4[0, var6] = var4[0, var6 - 1] + var1[0, var6]
    for var5 in range(1, var2):
        for var6 in range(1, var3):
            var4[var5, var6] = var1[var5, var6] + np.min([var4[var5 - 1, var6], var4[var5, var6 - 1]])
    var7 = ''
    var8, var9 = (var2 - 1, var3 - 1)
    while var8 > 0 or var9 > 0:
        if var8 > 0 and (var9 == 0 or var4[var8 - 1, var9] <= var4[var8, var9 - 1]):
            var7 = 'D' + var7
            var8 -= 1
        else:
            var7 = 'R' + var7
            var9 -= 1
    return (int(var4[var2 - 1, var3 - 1]), var7)",Turtle
469,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    for var6 in range(1, var2):
        for var7 in range(1, var3):
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7], var4[var6][var7 - 1])
    var8 = ''
    var9, var10 = (var2 - 1, var3 - 1)
    while var9 > 0 or var10 > 0:
        if var9 > 0 and var4[var9 - 1][var10] <= var4[var9][var10 - 1] if var10 > 0 else True:
            var8 = 'D' + var8
            var9 -= 1
        else:
            var8 = 'R' + var8
            var10 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
470,"import multiprocessing

def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]

    def var8(var6):
        var9 = [0] * var3
        var9[0] = var4[var6][0] + var1[var6][0]
        for var7 in range(1, var3):
            var9[var7] = var1[var6][var7] + min(var4[var6][var7 - 1], var4[var6 - 1][var7] if var6 > 0 else float('inf'))
        return var9
    with multiprocessing.Pool() as var10:
        var11 = var10.map(var8, range(1, var2))
    for var6, var12 in enumerate(var11):
        var4[var6 + 1] = var12
    var13 = ''
    var12, var14 = (var2 - 1, var3 - 1)
    while var12 > 0 or var14 > 0:
        if var12 > 0 and (var14 == 0 or var4[var12 - 1][var14] <= var4[var12][var14 - 1]):
            var13 = 'D' + var13
            var12 -= 1
        else:
            var13 = 'R' + var13
            var14 -= 1
    return (var4[var2 - 1][var3 - 1], var13)",Turtle
471,"```python
def turtle_dp_1(grid):
    if not grid or not grid[0]:
        return 0, """"
    n, m = len(grid), len(grid[0])
    dp = {}
    def solve(row, col):
        if (row, col) == (n - 1, m - 1):
            return grid[row][col], """"
        if (row, col) in dp:
            return dp[(row, col)]
        
        min_cost = float('inf')
        best_path = """"
        
        if row + 1 < n:
            cost_down, path_down = solve(row + 1, col)
            if grid[row][col] + cost_down < min_cost:
                min_cost = grid[row][col] + cost_down
                best_path = ""D"" + path_down
        
        if col + 1 < m:
            cost_right, path_right = solve(row, col + 1)
            if grid[row][col] + cost_right < min_cost:
                min_cost = grid[row][col] + cost_right
                best_path = ""R"" + path_right
        
        dp[(row, col)] = (min_cost, best_path)
        return min_cost, best_path

    return solve(0, 0)
```",Turtle
472,"```python
def turtle_dp_2(matrix):
    rows, cols = len(matrix), len(matrix[0])
    dist = [[0] * cols for _ in range(rows)]
    dist[0][0] = matrix[0][0]
    for i in range(rows):
        for j in range(cols):
            if i == 0 and j == 0:
                continue
            up = dist[i-1][j] if i > 0 else float('inf')
            left = dist[i][j-1] if j > 0 else float('inf')
            dist[i][j] = matrix[i][j] + min(up, left)
    
    path = """"
    i, j = rows - 1, cols - 1
    while i > 0 or j > 0:
        if i > 0 and (j == 0 or dist[i-1][j] <= dist[i][j-1]):
            path = ""D"" + path
            i -= 1
        else:
            path = ""R"" + path
            j -= 1
    return dist[rows-1][cols-1], path
```",Turtle
473,"```python
def turtle_dp_3(terrain):
    n, m = len(terrain), len(terrain[0])
    dp = [0] * m
    for i in range(n):
        new_dp = [0] * m
        for j in range(m):
            if i == 0 and j == 0:
                new_dp[j] = terrain[i][j]
            elif i == 0:
                new_dp[j] = terrain[i][j] + dp[j-1] if j > 0 else terrain[i][j]
            elif j == 0:
                new_dp[j] = terrain[i][j] + new_dp[j] if i > 0 else terrain[i][j]
            else:
                new_dp[j] = terrain[i][j] + min(dp[j], new_dp[j-1])
        dp = new_dp
    
    path = """"
    i, j = n - 1, m - 1
    while i > 0 or j > 0:
        if i > 0 and (j == 0 or dp[j] <= dp[j-1] if j > 0 else True):
            path = ""D"" + path
            i -= 1
        else:
            path = ""R"" + path
            j -= 1
    return dp[m-1], path
```",Turtle
474,"```python
def turtle_dp_4(costs):
    rows, cols = len(costs), len(costs[0])
    dp = [[(float('inf'), """") for _ in range(cols)] for _ in range(rows)]
    dp[0][0] = (costs[0][0], """")
    for i in range(rows):
        for j in range(cols):
            if i + 1 < rows:
                new_cost = dp[i][j][0] + costs[i+1][j]
                if new_cost < dp[i+1][j][0]:
                    dp[i+1][j] = (new_cost, dp[i][j][1] + ""D"")
            if j + 1 < cols:
                new_cost = dp[i][j][0] + costs[i][j+1]
                if new_cost < dp[i][j+1][0]:
                    dp[i][j+1] = (new_cost, dp[i][j][1] + ""R"")
    return dp[rows-1][cols-1]
```",Turtle
475,"```python
def turtle_dp_5(values):
    n = len(values)
    m = len(values[0])
    cost = [[0] * m for _ in range(n)]
    path = [[None] * m for _ in range(n)]
    cost[0][0] = values[0][0]
    for i in range(n):
        for j in range(m):
            if i == 0 and j == 0:
                continue
            if i > 0 and j > 0:
                if cost[i-1][j] <= cost[i][j-1]:
                    cost[i][j] = cost[i-1][j] + values[i][j]
                    path[i][j] = ""D""
                else:
                    cost[i][j] = cost[i][j-1] + values[i][j]
                    path[i][j] = ""R""
            elif i > 0:
                cost[i][j] = cost[i-1][j] + values[i][j]
                path[i][j] = ""D""
            elif j > 0:
                cost[i][j] = cost[i][j-1] + values[i][j]
                path[i][j] = ""R""
    
    route = """"
    i, j = n - 1, m - 1
    while i > 0 or j > 0:
        route = path[i][j] + route
        if path[i][j] == ""D"":
            i -= 1
        else:
            j -= 1
    return cost[n-1][m-1], route
```",Turtle
476,"```python
def turtle_dp_6(terrain_costs):
    n = len(terrain_costs)
    m = len(terrain_costs[0])
    dp = [[0] * m for _ in range(n)]
    dp[0][0] = terrain_costs[0][0]

    for i in range(n):
        for j in range(m):
            if i == 0 and j == 0:
                continue
            dp[i][j] = float('inf')
            if i > 0:
                dp[i][j] = min(dp[i][j], dp[i-1][j] + terrain_costs[i][j])
            if j > 0:
                dp[i][j] = min(dp[i][j], dp[i][j-1] + terrain_costs[i][j])

    path = """"
    i, j = n - 1, m - 1
    while i > 0 or j > 0:
        if i > 0 and dp[i][j] == dp[i-1][j] + terrain_costs[i][j]:
            path = 'D' + path
            i -= 1
        else:
            path = 'R' + path
            j -= 1

    return dp[n-1][m-1], path
```",Turtle
477,"```python
def turtle_dp_7(matrix):
    n, m = len(matrix), len(matrix[0])
    if n == 0 or m == 0: return 0, """"
    dp = [float('inf')] * m
    dp[0] = matrix[0][0]
    
    for i in range(1, n):
        new_dp = [float('inf')] * m
        for j in range(m):
            new_dp[j] = matrix[i][j] + min(dp[j] if j == 0 else dp[j - 1], dp[j])
        dp = new_dp

    path = """"
    i, j = n - 1, m - 1
    while i > 0 or j > 0:
        if i > 0 and dp[j] == matrix[i][j] + dp[j]:
            path = ""D"" + path
            i -= 1
        else:
            path = ""R"" + path
            j -= 1
    return dp[m-1], path
```",Turtle
478,"```python
def turtle_dp_8(grid_values):
    rows = len(grid_values)
    cols = len(grid_values[0])
    
    if rows == 0 or cols == 0:
        return 0, """"

    dp = [(0, """") for _ in range(cols)]
    dp[0] = (grid_values[0][0], """")

    for i in range(1, rows):
        new_dp = [(0, """") for _ in range(cols)]
        new_dp[0] = (grid_values[i][0] + dp[0][0], ""D"" + dp[0][1])

        for j in range(1, cols):
            cost_down, path_down = dp[j]
            cost_right, path_right = grid_values[i][j] + new_dp[j-1][0], ""R"" + new_dp[j-1][1]

            if cost_down <= cost_right:
                new_dp[j] = (cost_down, ""D"" + dp[j][1])
            else:
                new_dp[j] = (cost_right, path_right)
        dp = new_dp

    return dp[cols-1]
```",Turtle
479,"```python
def turtle_dp_9(costs):
    n = len(costs)
    m = len(costs[0])
    dp = [[0 for _ in range(m)] for _ in range(n)]
    for i in range(n):
        for j in range(m):
            if i == 0 and j == 0:
                dp[i][j] = costs[i][j]
            elif i == 0:
                dp[i][j] = dp[i][j-1] + costs[i][j]
            elif j == 0:
                dp[i][j] = dp[i-1][j] + costs[i][j]
            else:
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + costs[i][j]

    directions = """"
    i, j = n - 1, m - 1
    while i > 0 or j > 0:
        if i > 0 and j > 0 and dp[i-1][j] <= dp[i][j-1]:
            directions = ""D"" + directions
            i -= 1
        else:
            directions = ""R"" + directions
            j -= 1

    return dp[n-1][m-1], directions
```",Turtle
480,"```python
def turtle_dp_10(grid):
    n, m = len(grid), len(grid[0])
    dp = [[(float('inf'), '') for _ in range(m)] for _ in range(n)]
    dp[0][0] = (grid[0][0], '')

    for i in range(n):
        for j in range(m):
            if i + 1 < n:
                if dp[i+1][j][0] > dp[i][j][0] + grid[i+1][j]:
                    dp[i+1][j] = (dp[i][j][0] + grid[i+1][j], dp[i][j][1] + 'D')

            if j + 1 < m:
                if dp[i][j+1][0] > dp[i][j][0] + grid[i][j+1]:
                    dp[i][j+1] = (dp[i][j][0] + grid[i][j+1], dp[i][j][1] + 'R')

    return dp[n-1][m-1]",Turtle
481,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    var4 = {}

    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var4[var6, var7] = (var1[var6][var7] + var8, 'D' + var9)
            return (var1[var6][var7] + var8, 'D' + var9)
        else:
            var4[var6, var7] = (var1[var6][var7] + var10, 'R' + var11)
            return (var1[var6][var7] + var10, 'R' + var11)
    if not var1 or not var1[0]:
        return (0, '')
    return var5(0, 0)",Turtle
482,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
483,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [''] * var3
    for var6 in range(var3):
        var4[var6] = var1[0][var6]
        var5[var6] = 'R' * var6
    for var7 in range(1, var2):
        var8 = [0] * var3
        var9 = [''] * var3
        var8[0] = var4[0] + var1[var7][0]
        var9[0] = 'D' + var5[0]
        for var6 in range(1, var3):
            if var4[var6] < var8[var6 - 1]:
                var8[var6] = var4[var6] + var1[var7][var6]
                var9[var6] = 'D' + var5[var6]
            else:
                var8[var6] = var8[var6 - 1] + var1[var7][var6]
                var9[var6] = 'R' + var9[var6 - 1]
        var4 = var8
        var5 = var9
    return (var4[var3 - 1], var5[var3 - 1])",Turtle
484,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 == 0 and var5 == 0:
                continue
            var6 = var1[var4 - 1][var5] if var4 > 0 else float('inf')
            var7 = var1[var4][var5 - 1] if var5 > 0 else float('inf')
            var1[var4][var5] += min(var6, var7)
    var8 = ''
    var4, var5 = (var2 - 1, var3 - 1)
    while var4 > 0 or var5 > 0:
        if var4 > 0 and (var5 == 0 or var1[var4 - 1][var5] <= var1[var4][var5 - 1]):
            var8 = 'D' + var8
            var4 -= 1
        else:
            var8 = 'R' + var8
            var5 -= 1
    return (var1[var2 - 1][var3 - 1], var8)",Turtle
485,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[(None, None)] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = (var7 - 1, 0)
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = (0, var8 - 1)
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = (var7, var8 - 1)
    var9 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 != 0 or var8 != 0:
        var10, var11 = var6[var7][var8]
        if var10 == var7 - 1:
            var9 = 'D' + var9
        else:
            var9 = 'R' + var9
        var7, var8 = (var10, var11)
    return (var4[var2 - 1][var3 - 1], var9)",Turtle
486,"def var0(var1):

    def var2(var3, var4):
        if var3 == len(var1) - 1 and var4 == len(var1[0]) - 1:
            yield ''
        elif var3 >= len(var1) or var4 >= len(var1[0]):
            return
        else:
            if var3 + 1 < len(var1) and (var4 == len(var1[0]) - 1 or var1[var3 + 1][var4] <= var1[var3][var4 + 1]):
                for var5 in var2(var3 + 1, var4):
                    yield ('D' + var5)
            if var4 + 1 < len(var1[0]):
                for var5 in var2(var3, var4 + 1):
                    yield ('R' + var5)

    def var6(var1):
        var7 = float('inf')
        var8 = None
        for var9 in var2(0, 0):
            var10 = sum((var1[var11][var12] for var11, var12 in zip(range(len(var1)), [0] * len(var1)) if 'R' not in var9 and 'D' not in var9))
            var10 = 0
            var13, var14 = (0, 0)
            for var15 in var9:
                var10 += var1[var13][var14]
                if var15 == 'D':
                    var13 += 1
                else:
                    var14 += 1
            var10 += var1[len(var1) - 1][len(var1[0]) - 1]
            if var10 < var7:
                var7 = var10
                var8 = var9
        return (var7, var8)
    if not var1 or not var1[0]:
        return (0, '')
    return var6(var1)",Turtle
487,"from functools import reduce

def var0(var1):
    if not var1 or not var1[0]:
        return (0, '')
    var2, var3 = (len(var1), len(var1[0]))
    var4 = reduce(lambda var5, var6: var5 + [[0] * var3], range(var2), [])
    var4[0][0] = var1[0][0]
    for var6 in range(var2):
        for var7 in range(var3):
            if var6 == 0 and var7 == 0:
                continue
            var4[var6][var7] = var1[var6][var7] + min(var4[var6 - 1][var7] if var6 > 0 else float('inf'), var4[var6][var7 - 1] if var7 > 0 else float('inf'))
    var8 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var4[var6 - 1][var7] <= var4[var6][var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
488,"import numpy as np

def var0(var1):
    var2 = np.array(var1)
    var3, var4 = var2.shape
    var5 = np.zeros((var3, var4), dtype=int)
    var5[0, 0] = var2[0, 0]
    for var6 in range(1, var3):
        var5[var6, 0] = var5[var6 - 1, 0] + var2[var6, 0]
    for var7 in range(1, var4):
        var5[0, var7] = var5[0, var7 - 1] + var2[0, var7]
    for var6 in range(1, var3):
        for var7 in range(1, var4):
            var5[var6, var7] = var2[var6, var7] + min(var5[var6 - 1, var7], var5[var6, var7 - 1])
    var8 = ''
    var6, var7 = (var3 - 1, var4 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var5[var6 - 1, var7] <= var5[var6, var7 - 1]):
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var5[var3 - 1, var4 - 1], var8)",Turtle
489,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    for var6 in range(1, var2):
        for var7 in range(1, var3):
            var4[var6][var7] = min(var4[var6 - 1][var7], var4[var6][var7 - 1]) + var1[var6][var7]
    var8 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and var4[var6 - 1][var7] <= var4[var6][var7 - 1]:
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var8)",Turtle
490,"import concurrent.futures

def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 else 0
    if var2 == 0 or var3 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var6 in range(1, var2):
        var4[var6][0] = var4[var6 - 1][0] + var1[var6][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
    with concurrent.futures.ThreadPoolExecutor() as var8:
        var9 = []
        for var6 in range(1, var2):
            for var7 in range(1, var3):
                var9.append(var8.submit(var10, var1, var4, var6, var7))
        concurrent.futures.wait(var9)
    var11 = ''
    var6, var7 = (var2 - 1, var3 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and (var7 == 0 or var4[var6 - 1][var7] <= var4[var6][var7 - 1]):
            var11 = 'D' + var11
            var6 -= 1
        else:
            var11 = 'R' + var11
            var7 -= 1
    return (var4[var2 - 1][var3 - 1], var11)

def var10(var1, var4, var6, var7):
    var4[var6][var7] = min(var4[var6 - 1][var7], var4[var6][var7 - 1]) + var1[var6][var7]",Turtle
491,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = {}

    def var5(var6, var7):
        if (var6, var7) in var4:
            return var4[var6, var7]
        if var6 == var2 - 1 and var7 == var3 - 1:
            return (var1[var6][var7], '')
        if var6 >= var2 or var7 >= var3:
            return (float('inf'), '')
        var8, var9 = var5(var6 + 1, var7)
        var10, var11 = var5(var6, var7 + 1)
        if var8 < var10:
            var4[var6, var7] = (var1[var6][var7] + var8, 'D' + var9)
        else:
            var4[var6, var7] = (var1[var6][var7] + var10, 'R' + var11)
        return var4[var6, var7]
    if not var1:
        return (0, '')
    return var5(0, 0)",Turtle
492,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
493,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    var4 = [0] * var3
    var5 = [''] * var3
    var4[0] = var1[0][0]
    for var6 in range(1, var3):
        var4[var6] = var4[var6 - 1] + var1[0][var6]
        var5[var6] = 'R' + var5[var6 - 1]
    for var7 in range(1, var2):
        var8 = [0] * var3
        var9 = [''] * var3
        var8[0] = var4[0] + var1[var7][0]
        var9[0] = 'D' + var5[0]
        for var6 in range(1, var3):
            if var4[var6] < var8[var6 - 1]:
                var8[var6] = var4[var6] + var1[var7][var6]
                var9[var6] = 'D' + var5[var6]
            else:
                var8[var6] = var8[var6 - 1] + var1[var7][var6]
                var9[var6] = 'R' + var9[var6 - 1]
        var4 = var8
        var5 = var9
    return (var4[var3 - 1], var5[var3 - 1])",Turtle
494,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    for var4 in range(var2):
        for var5 in range(var3):
            if var4 == 0 and var5 == 0:
                continue
            var6 = var1[var4 - 1][var5] if var4 > 0 else float('inf')
            var7 = var1[var4][var5 - 1] if var5 > 0 else float('inf')
            var1[var4][var5] += min(var6, var7)
    var8 = var1[var2 - 1][var3 - 1]
    var9 = ''
    var4, var5 = (var2 - 1, var3 - 1)
    while var4 > 0 or var5 > 0:
        if var4 > 0 and var5 > 0:
            if var1[var4 - 1][var5] < var1[var4][var5 - 1]:
                var9 = 'D' + var9
                var4 -= 1
            else:
                var9 = 'R' + var9
                var5 -= 1
        elif var4 > 0:
            var9 = 'D' + var9
            var4 -= 1
        else:
            var9 = 'R' + var9
            var5 -= 1
    return (var8, var9)",Turtle
495,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[None] * var3 for var5 in range(var2)]
    for var7 in range(var2):
        for var8 in range(var3):
            if var7 == 0 and var8 == 0:
                continue
            var9 = var4[var7 - 1][var8] if var7 > 0 else float('inf')
            var10 = var4[var7][var8 - 1] if var8 > 0 else float('inf')
            if var9 < var10:
                var4[var7][var8] = var9 + var1[var7][var8]
                var6[var7][var8] = (var7 - 1, var8)
            else:
                var4[var7][var8] = var10 + var1[var7][var8]
                var6[var7][var8] = (var7, var8 - 1)
    var11 = ''
    var7, var8 = (var2 - 1, var3 - 1)
    while var7 != 0 or var8 != 0:
        if var6[var7][var8] is None:
            break
        var12, var13 = var6[var7][var8]
        if var12 == var7 - 1:
            var11 = 'D' + var11
        else:
            var11 = 'R' + var11
        var7, var8 = (var12, var13)
    return (var4[var2 - 1][var3 - 1], var11)",Turtle
496,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0

    def var4(var5, var6):
        if var5 == var2 - 1 and var6 == var3 - 1:
            yield ''
        elif var5 + 1 < var2 and var6 + 1 < var3:
            if var1[var5 + 1][var6] < var1[var5][var6 + 1]:
                yield 'D'
                for var7 in var4(var5 + 1, var6):
                    yield ('D' + var7)
            else:
                yield 'R'
                for var7 in var4(var5, var6 + 1):
                    yield ('R' + var7)
        elif var5 + 1 < var2:
            yield 'D'
            for var7 in var4(var5 + 1, var6):
                yield ('D' + var7)
        elif var6 + 1 < var3:
            yield 'R'
            for var7 in var4(var5, var6 + 1):
                yield ('R' + var7)
    if not var1:
        return (0, '')
    var8 = float('inf')
    var9 = ''
    for var10 in var4(0, 0):
        var11 = 0
        var12, var13 = (0, 0)
        for var14 in var10:
            var11 += var1[var12][var13]
            if var14 == 'D':
                var12 += 1
            else:
                var13 += 1
        var11 += var1[var2 - 1][var3 - 1]
        if var11 < var8:
            var8 = var11
            var9 = var10
    return (var8, var9)",Turtle
497,"from functools import reduce

def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    var4 = reduce(lambda var5, var6: var5 + [reduce(lambda var7, var8: var7 + [var1[var6][var8] + (var5[var8 - 1] if var8 > 0 else 0) if var6 == 0 else var1[var6][var8] + min(var5[var8] if var8 > 0 else float('inf'), var5[var8 - 1] if var8 > 0 else float('inf'))], [], range(var3))], [], range(var2))
    var9 = var4[-1][-1]
    var10 = ''
    var6, var8 = (var2 - 1, var3 - 1)
    while var6 > 0 or var8 > 0:
        if var6 > 0 and var8 > 0:
            if var1[var6 - 1][var8] < var1[var6][var8 - 1]:
                var10 = 'D' + var10
                var6 -= 1
            else:
                var10 = 'R' + var10
                var8 -= 1
        elif var6 > 0:
            var10 = 'D' + var10
            var6 -= 1
        else:
            var10 = 'R' + var10
            var8 -= 1
    return (var9, var10)",Turtle
498,"import numpy as np

def var0(var1):
    var2 = np.array(var1)
    var3, var4 = var2.shape
    var5 = np.zeros((var3, var4), dtype=int)
    var5[0, 0] = var2[0, 0]
    for var6 in range(1, var3):
        var5[var6, 0] = var5[var6 - 1, 0] + var2[var6, 0]
    for var7 in range(1, var4):
        var5[0, var7] = var5[0, var7 - 1] + var2[0, var7]
    for var6 in range(1, var3):
        for var7 in range(1, var4):
            var5[var6, var7] = var2[var6, var7] + min(var5[var6 - 1, var7], var5[var6, var7 - 1])
    var8 = ''
    var6, var7 = (var3 - 1, var4 - 1)
    while var6 > 0 or var7 > 0:
        if var6 > 0 and var7 > 0:
            if var5[var6 - 1, var7] < var5[var6, var7 - 1]:
                var8 = 'D' + var8
                var6 -= 1
            else:
                var8 = 'R' + var8
                var7 -= 1
        elif var6 > 0:
            var8 = 'D' + var8
            var6 -= 1
        else:
            var8 = 'R' + var8
            var7 -= 1
    return (var5[var3 - 1, var4 - 1], var8)",Turtle
499,"def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var2):
        var4[var7][0] = var4[var7 - 1][0] + var1[var7][0]
        var6[var7][0] = 'D' + var6[var7 - 1][0]
    for var8 in range(1, var3):
        var4[0][var8] = var4[0][var8 - 1] + var1[0][var8]
        var6[0][var8] = 'R' + var6[0][var8 - 1]
    for var7 in range(1, var2):
        for var8 in range(1, var3):
            if var4[var7 - 1][var8] < var4[var7][var8 - 1]:
                var4[var7][var8] = var4[var7 - 1][var8] + var1[var7][var8]
                var6[var7][var8] = 'D' + var6[var7 - 1][var8]
            else:
                var4[var7][var8] = var4[var7][var8 - 1] + var1[var7][var8]
                var6[var7][var8] = 'R' + var6[var7][var8 - 1]
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
500,"import multiprocessing

def var0(var1):
    var2 = len(var1)
    var3 = len(var1[0]) if var2 > 0 else 0
    if var2 == 0:
        return (0, '')
    var4 = [[0] * var3 for var5 in range(var2)]
    var6 = [[''] * var3 for var5 in range(var2)]
    var4[0][0] = var1[0][0]
    for var7 in range(1, var3):
        var4[0][var7] = var4[0][var7 - 1] + var1[0][var7]
        var6[0][var7] = 'R' + var6[0][var7 - 1]

    def var8(var9):
        var4[var9][0] = var4[var9 - 1][0] + var1[var9][0]
        var6[var9][0] = 'D' + var6[var9 - 1][0]
        for var7 in range(1, var3):
            if var4[var9 - 1][var7] < var4[var9][var7 - 1]:
                var4[var9][var7] = var4[var9 - 1][var7] + var1[var9][var7]
                var6[var9][var7] = 'D' + var6[var9 - 1][var7]
            else:
                var4[var9][var7] = var4[var9][var7 - 1] + var1[var9][var7]
                var6[var9][var7] = 'R' + var6[var9][var7 - 1]
    with multiprocessing.Pool() as var10:
        var10.map(var8, range(1, var2))
    return (var4[var2 - 1][var3 - 1], var6[var2 - 1][var3 - 1])",Turtle
